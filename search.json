[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tuto Git",
    "section": "",
    "text": "Une pr√©sentation de Git\n\nQu‚Äôest ce que Git ?\n√Ä quoi √ßa sert ?\nQuels sont les avantages de Git ?\n\nInstaller et param√®trer Git\nUn TP pour d√©couvrir Git"
  },
  {
    "objectID": "index.html#contenu",
    "href": "index.html#contenu",
    "title": "Tuto Git",
    "section": "",
    "text": "Une pr√©sentation de Git\n\nQu‚Äôest ce que Git ?\n√Ä quoi √ßa sert ?\nQuels sont les avantages de Git ?\n\nInstaller et param√®trer Git\nUn TP pour d√©couvrir Git"
  },
  {
    "objectID": "doc/parametrage.html",
    "href": "doc/parametrage.html",
    "title": "Param√©trer Git",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/parametrage.html#objectifs",
    "href": "doc/parametrage.html#objectifs",
    "title": "Param√©trer Git",
    "section": "Objectifs",
    "text": "Objectifs\n\nInstaller Git\nConfigurer Git\nCr√©er un compte GitHub"
  },
  {
    "objectID": "doc/parametrage.html#installer-git",
    "href": "doc/parametrage.html#installer-git",
    "title": "Param√©trer Git",
    "section": "1 Installer Git",
    "text": "1 Installer Git\n\nSuivez les instructions pour installer Git"
  },
  {
    "objectID": "doc/parametrage.html#param√®trer-git",
    "href": "doc/parametrage.html#param√®trer-git",
    "title": "Param√©trer Git",
    "section": "2 Param√®trer Git",
    "text": "2 Param√®trer Git\n\n\n\n\n\n\nNote\n\n\n\nLe param√®trage de Git n‚Äôest pas tr√®s dr√¥le et peut faire un peu peur.\nMais pas de panique, c‚Äôest √† faire une et une seule fois sur votre machine !\n\n\n\n2.1 Configuration Git Bash\nGit Bash est un Terminal o√π l‚Äôon peut √©crire des commandes git.\nOuvrir Git Bash et entrer une √† une les commandes suivantes\ngit config --global user.name \"Prenom Nom\"\ngit config --global user.email prenom.nom@eleve.ensai.fr\ngit config -l\nLa derni√®re commande permet de v√©rifier que les 2 attributs user.name et user.email sont bien renseign√©s\n\n\n2.2 Cl√© SSH\nAfin de pouvoir faire des mises √† jour sur le d√©p√¥t distant, il faut que votre machine (locale) soit reconnue. Vous devez donc fournir une cl√© d‚Äôauthentification √† GitLab.\nToujours dans Git Bash, lancer une √† une ces 2 commandes. La premi√®re commande permet de g√©n√©rer une cl√© publique SSH. La seconde permet de r√©cup√©rer la valeur de cette cl√©.\nssh-keygen -t rsa -b 4096 -C \"prenom.nom@eleve.ensai.fr\"\n\n## tapez ENTREE √† chaque question\n\n## R√©cup√©rez le contenu de la cl√© avec la commande\ncat $HOME/.ssh/id_rsa.pub          # cat /c/Users/idxxxx/.ssh/id_rsa.pub\n\nLa commande cat renvoie tout le contenu de ce fichier\n\nEn cas d‚Äô√©chec, vous pouvez aller dans le dossier cach√© C:/Users/idxxxx/.ssh/ et ouvrir avec Notepad le fichier id_rsa.pub\nsi vous ne trouvez toujours pas le fichier id_rsa.pub, retournez voir le r√©sultat de la commande ssh-keygen, il est √©crit dans quel dossier la cl√© a √©t√© g√©n√©r√©e\n\nS√©lectionner ce contenu et le copier dans notepad pour la prochaine √©tape\n\n\nCr√©ez une copie de votre cl√©\nIl arrive que le dossier C:/Users/idxxxx/.ssh soit supprim√©.\nIl est interessant d‚Äôavoir une copie de cette cl√© pour la restaurer si besoin.\n\ncp -r $HOME/.ssh /p pour copier le dossier dans le disque P:\n\n\n\n\n\n2.3 Cr√©er un compte sur GitHub\nSur GitHub, vous pourrez h√©berger votre projet. GitHub fera office de d√©p√¥t distant.\nD‚Äôautres alternatives existent avec des fonctionnalit√©s similaires : GitLab, Bitbucket‚Ä¶\n\nGitHub\n\n\n\n2.4 D√©clarer votre cl√© publique SSH √† GitHub\n\nDans GitHub, aller dans Param√®tres, puis SSH and GPG Keys\n\nNew SSH key\ndonnez un titre et coller dans Key le r√©sultat de l‚Äô√©tape 2\n\n\nüéä Bravo le param√®trage est termin√©\n\n\n2.5 En cas d‚Äôerreurs\n\nThe authenticity of host xxx can‚Äôt be established\nThe authenticity of host 'github.com (140.82.121.4)' can't be established.  \nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.    \n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nV√©rifiez que le dossier C:/users/idxxxx/.ssh existe et contient les fichiers id_rsa et id_rsa.pub. Si oui passer √† l‚Äô√©tape 2.\n\nSi non, recopiez votre cl√© dans C:/users/idxxxx/.ssh √† partir de la sauvegarde que vous avez faite dans P:/.ssh lors de la cr√©ation de la cl√©. Pour automatiser ceci, vous pouvez cr√©er un script restore_ssh.bat sur le bureau contenant le code ci-dessous :\nset \"source=P:\\.ssh\"\nset \"destination=%HOME%\\.ssh\"\nxcopy /E /H /I /Y \"%source%\" \"%destination%\"\npause\n\nV√©rifiez que la cl√© id_rsa.pub est bien d√©clar√©e dans GitLab ou GitHub. Si le probl√®me persiste, reg√©n√©rez une nouvelle cl√© ssh et d√©clarez l√† dans GitHub ou GitLab."
  },
  {
    "objectID": "doc/tp-ensai-new.html",
    "href": "doc/tp-ensai-new.html",
    "title": "Git TP ENSAI",
    "section": "",
    "text": "Note\n\n\n\nLes consignes de ce TP sont donn√©es pour une utilisation de GitLab. Il est cependant tout √† fait possible de r√©aliser ce TP avec GitHub dont l‚Äôinterface est tr√®s ressemblante.\n‚ö†Ô∏è Il y a tout de m√™me quelques diff√©rences :\n\nDans GitHub, il ne faut pas cr√©er un projet mais un R√©pository\nPour d√©clarer la cl√© SSH dans GitHub : Avatar &gt; Settings &gt; SSH keys\n\n\n\n\nCr√©er un compte sur GitLab\n\nGitLab &gt; Sign-in &gt; Inscrivez-vous maintenant\nou avec ce lien direct\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIl arrive que vous soyez redirig√© vers une page o√π l‚Äôon vous demande le nom de votre entreprise et votre num√©ro de carte bancaire.\nNe rentrez pas votre num√©ro de carte bancaire !!!\nQuittez et r√©essayez plus tard.\n\n\n\nCr√©ez un nouveau projet\n\nGitLab &gt; Projects &gt; New project\nou avec ce lien direct\nCreate blank project\nProject name : TP_initiation_git\nVisibility Level : Private\nCliquez sur Create project\n\nLire l‚Äôintroduction"
  },
  {
    "objectID": "doc/tp-ensai-new.html#√†-faire-√†-la-maison",
    "href": "doc/tp-ensai-new.html#√†-faire-√†-la-maison",
    "title": "Git TP ENSAI",
    "section": "",
    "text": "Note\n\n\n\nLes consignes de ce TP sont donn√©es pour une utilisation de GitLab. Il est cependant tout √† fait possible de r√©aliser ce TP avec GitHub dont l‚Äôinterface est tr√®s ressemblante.\n‚ö†Ô∏è Il y a tout de m√™me quelques diff√©rences :\n\nDans GitHub, il ne faut pas cr√©er un projet mais un R√©pository\nPour d√©clarer la cl√© SSH dans GitHub : Avatar &gt; Settings &gt; SSH keys\n\n\n\n\nCr√©er un compte sur GitLab\n\nGitLab &gt; Sign-in &gt; Inscrivez-vous maintenant\nou avec ce lien direct\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIl arrive que vous soyez redirig√© vers une page o√π l‚Äôon vous demande le nom de votre entreprise et votre num√©ro de carte bancaire.\nNe rentrez pas votre num√©ro de carte bancaire !!!\nQuittez et r√©essayez plus tard.\n\n\n\nCr√©ez un nouveau projet\n\nGitLab &gt; Projects &gt; New project\nou avec ce lien direct\nCreate blank project\nProject name : TP_initiation_git\nVisibility Level : Private\nCliquez sur Create project\n\nLire l‚Äôintroduction"
  },
  {
    "objectID": "doc/tp-ensai-new.html#introduction",
    "href": "doc/tp-ensai-new.html#introduction",
    "title": "Git TP ENSAI",
    "section": "Introduction",
    "text": "Introduction\nGit est un formidable outil de versionnage de fichiers qui va vous permettre de conserver efficacement l‚Äôhistorique de votre code aussi bien si vous travaillez seul mais √©galement quand vous travaillez √† plusieurs. Cet historique est conserv√© dans ce qu‚Äôon appelle un d√©p√¥t git.\nSa conception d√©centralis√©e fait qu‚Äôil est quasi impossible de perdre une donn√©e d√©finitivement avec git (√† noter toutefois, que, dans ce TP, nous utiliserons git en mode centralis√©, l‚Äôutilisation en mode d√©centralis√© √©tant plus complexe, et moins courante). En particulier, la perte totale d‚Äôun ordinateur h√©bergeant votre code ne repr√©sentera qu‚Äôune perte minime de code si vous utilisez git correctement.\nEn outre, de nombreux outils de CI/CD (Continuous Int√©gration / Continuous Deployment) qui rendent possible l‚Äôautomatisation de l‚Äôint√©gration et du d√©ploiement de votre code s‚Äôappuient sur un d√©p√¥t git.\n\n0.1 Concepts Cl√©s\nCependant, comme tout logiciel, git demande un peu d‚Äôapprentissage, et de la pratique. Pour commencer, nous aurons besoin de certains concepts essentiels pour une utilisation efficace. Par sa conception d√©centralis√©e, un d√©p√¥t git peut exister en plusieurs endroits en m√™me temps : sur notre machine, sur chaque machine des membre du projet, ou sur un serveur h√©bergeant le projet.\nOn parlera de la copie distante (remote en anglais) du d√©p√¥t dans le cas du serveur distant. En g√©n√©ral, une seule copie distante est utilis√©e, mais par sa nature d√©centralis√©e, plusieurs copies distantes sont possibles (possibilit√© non incluse dans ce TP).\nLa copie sur notre machine est la copie locale (local en anglais). Il s‚Äôagit de toutes les informations du d√©p√¥t concernant l‚Äôhistorique de ses fichiers, et les m√©tadonn√©es du d√©p√¥t. Une distinction subtile est alors faite entre la copie locale et la copie de travail (working copy en anglais) : Nos modifications sur les fichiers du d√©p√¥t n‚Äôint√©grerons la copie locale qu‚Äô√† notre demande explicite. Cette int√©gration sera alors effectu√©e par l‚Äôajout d‚Äôune entr√©e √† l‚Äôhistorique du d√©p√¥t.\n\n\n0.2 Programme\nPour utiliser git, donc pour g√©rer un d√©p√¥t, nous avons acc√®s √† de nombreuses commandes. Pour ce TP de d√©couverte vous allez utiliser seulement les commandes suivantes :\n\ngit add pour ajouter un fichier pr√©sent dans la copie de travail √† la copie locale\ngit commit pour faire un point de sauvegarde (ajout √† l‚Äôhistorique) dans la copie locale avec les modifications des fichiers de la copie de travail\ngit push pour pousser le code depuis votre copie locale vers la copie distante (envoi de l‚Äôhistorique ajout√© √† la copie locale par rapport √† la copie distante)\ngit pull pour tirer l‚Äôhistorique de la copie distante vers votre copie de travail (et votre copie locale)\ngit status pour voir la diff√©rence entre la copie de travail et la copie locale\ngit clone\n\nJe vous conseille de vous r√©f√©rer √† la cheatsheet git disponible sur Moodle (les commandes les plus importantes sont surlign√©es) pour avoir les commandes git sous les yeux."
  },
  {
    "objectID": "doc/tp-ensai-new.html#avant-de-commencer",
    "href": "doc/tp-ensai-new.html#avant-de-commencer",
    "title": "Git TP ENSAI",
    "section": "1 Avant de commencer",
    "text": "1 Avant de commencer\n\nCr√©ez un dossier P:/Cours1A/Git\nAllez sur Moodle &gt; Outils bureautiques pour le statisticien\n\nOnglet TP - Git\n\nT√©l√©chargez\n\nle sujet\nle zip Tp git\nSetup windows"
  },
  {
    "objectID": "doc/tp-ensai-new.html#param√©trage-de-git",
    "href": "doc/tp-ensai-new.html#param√©trage-de-git",
    "title": "Git TP ENSAI",
    "section": "2 Param√©trage de Git",
    "text": "2 Param√©trage de Git\n\n2.1 Le terminal Git Bash\n\n\n\n\n\n\nNote\n\n\n\nGit s‚Äôutilise en ligne de commande via Git Bash.\nIl existe des interfaces mais elles ne sont pas aussi compl√®tes. De plus quelques simples commandes permettent de quasiment tout faire.\n\n\n\nAllez dans le dossier P:/Cours1A/Git\nClic droit &gt; Git Bash here\nCr√©ez un dossier depot1 et entrez dans ce dossier\n\nmkdir depot1 pour make directory\ncd depot1 pour change directory\n\nAfficher le chemin du r√©pertoire courant avec la commande pwd : print working directory\ncd .. pour retourner dans le dossier parent\ncr√©er un dossier depot2\n\n\n\n2.2 Configuration üöß\n\nsetup\ngit init ...\n\nR√©cup√©rez le fichier setup disponible sur Moodle en fonction de la machine utilis√©e.\n\nWindows (VM ou pc perso windows): Fichier pour windows. Double cliquez dessus pour l‚Äôex√©cuter.\niOs / Linux : Fichier pour iOs/Linux. Ouvrez un terminal puis faites :\ncd ~/Download\nchmod +x setup.sh\n./setup.sh\n\nRentrez les informations demand√©es dans la console. Le script fait toutes l‚Äôinitialisation pour vous, et copie votre clef dans le presse papier (=fait un ‚Äúcopier‚Äù de votre clef pour que vous puissiez la coller). R√©cup√©rer √©galement l‚Äôarchive contenant le code du TP et d√©compressez-l√†. Elle contient un fichier README.md et un fichier python avec un simple print.\n\n\n2.3 Cr√©ation d‚Äôune cl√© SSH\n\n\n\n\n\n\nSSH : Comment √ßa marche ?\n\n\n\n\n\nSSH (Secure Shell) est un protocole permettant de se connecter √† un autre ordinateur sur un r√©seau de mani√®re s√©curis√©e.\nSSH chiffre toutes les informations √©chang√©es afin de prot√©ger les donn√©es.\nSSH utilise un m√©canisme de cl√©s cryptographiques pour authentifier les ordinateurs et les utilisateurs, garantissant que la connexion est effectu√©e avec le bon serveur et sans intervention malveillante :\n\nCl√© priv√©e : C‚Äôest comme la cl√© de votre maison. Vous la gardez en s√©curit√© avec vous et ne la partagez avec personne. Cette cl√© reste sur votre ordinateur et sert √† prouver votre identit√©.\nCl√© publique : Elle serait comme votre adresse postale. Vous pouvez la partager avec d‚Äôautres. Dans SSH, vous placez votre cl√© publique sur les serveurs ou les ordinateurs auxquels vous souhaitez vous connecter.\n\nCes deux cl√©s sont li√©es. Un message chiffr√© par la cl√© publique n‚Äôest d√©chiffrable que par celui qui poss√©de la cl√© priv√©e. Lorsque vous chiffrez un message avec votre cl√© priv√©e, vous prouvez √† tous votre identit√© car chacun peut d√©chiffrer ce message avec la cl√© publique.\nhttps://www.youtube.com/watch?v=Y-S6GtdLaSU&ab_channel=Grafikart.fr\n\n\n\nDans Git Bash - [ ] ssh-keygen -t ed25519 -C \"prenom.nom@eleve.ensai.fr\"\nD√©clarez votre cl√© publique √† GitLab, pour pouvoir ensuite faire communiquer d√©p√¥ts locaux avec les d√©p√¥ts distants :\n\nGitLab &gt; cliquez sur votre avatar &gt; Pr√©f√©rences &gt; SSH keys\n\nou avec ce lien direct\n\nCliquez sur Add new key\n\nCollez votre cl√© publique\nTitle : VM ENSAI\nSupprimez la date d‚Äôexpiration\nValidez\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCe param√®trage SSH est r√©alis√© au niveau de la machine.\nSi par exemple, vous souhaitez utiliser Git sur votre ordinateur personnel, il faudra faire √©galement ce param√©trage."
  },
  {
    "objectID": "doc/tp-ensai-new.html#cr√©ez-un-d√©p√¥t-local",
    "href": "doc/tp-ensai-new.html#cr√©ez-un-d√©p√¥t-local",
    "title": "Git TP ENSAI",
    "section": "3 Cr√©ez un d√©p√¥t local",
    "text": "3 Cr√©ez un d√©p√¥t local\nSuite √† la cr√©ation de votre compte GitLab, vous avez cr√©√© un projet (autrement dit un d√©p√¥t distant).\nVous allez maintenant cr√©er une copie locale en clonant ce projet.\nSur la page GitLab de votre projet,\n\nCliquez sur Code\nCopiez la ligne Clone with SSH\nDans Git Bash, entrez git clone &lt;collez la ligne&gt;\n\nexemple : git clone git@gitlab.com:ludo2ne/tp_initiation_git.git"
  },
  {
    "objectID": "doc/tp-ensai-new.html#premiers-pas",
    "href": "doc/tp-ensai-new.html#premiers-pas",
    "title": "Git TP ENSAI",
    "section": "4 Premiers pas üöß",
    "text": "4 Premiers pas üöß\n\nDans le dossier git-tp, cr√©ez un fichier voiture.py contenant le code suivant :\nclass Voiture:\n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\nDans le terminal VScode, ex√©cutez les commandes suivantes :\n\ngit status : permet de voir les diff√©rences entre la version de travail du code et le commit le plus r√©cent\n\nLe fichier voiture.py appara√Æt dans les Untracked files. Cela signifie que Git a rep√©r√© ce fichier mais pour le moment il ne le versionnera pas (les fichiers non versionn√©s sont ignor√©s par git commit)\n\ngit add voiture.py : permet de mettre des fichiers dans la zone de transit. Ces fichiers seront versionn√©s dans le prochain commit.\ngit status : maintenant le fichier est reconnu par Git\ngit commit -m \"Cr√©ation classe voiture\" : permet de faire un commit = un point de sauvegarde pour git = une entr√©e suppl√©mentaire √† l‚Äôhistorique. En r√®gle g√©n√©ral, entre les \" \", mettez un message court et explicite. Si vous omettez le -m \" \" Vscode va ouvrir une fen√™tre pour que vous saisissiez le message de commit. Vous pouvez alors √©crire le message de commit, puis fermer la fen√™tre pour valider le message. Attention si vous n‚Äô√©crivez rien hors de la zone de commentaire, le commit sera annul√©.\ngit status : affichera alors Your branch is ahead of 'origin/main' by 1 commit, signifiant que votre copie locale est en avance d‚Äôun commit par rapport √† la copie distante.\ngit pull : permet de r√©cup√©rer les derniers commits disponible sur la copie distante (= la copie du projet gitlab). Actuellement il n‚Äôy en a pas, mas il faut prendre l‚Äôhabitude de souvent r√©cup√©rer les derniers commits.\ngit push : permet de pousser vos commits sur le d√©p√¥t distant. Attention vous ne poussez que les commits (changements sur la copie locale) et pas toutes vos modifications sur votre copie de travail ! Si une modification que vous avez fait n‚Äôappara√Æt pas sur l√† copie distante, il est possible que vous n‚Äôayez pas fait de commit avec ces modifications.\n\nModifiez voiture.py pour qu‚Äôil ressemble √† √ßa :\nclass Voiture:\n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n            self.vitesse = min(130, self.vitesse + increment)\nDans le terminal VSCode :\n\nFaites git status, git add voiture.py, git commit -m \"Ajout m√©thode accelere\", et enfin git push, puis v√©rifiez que le code sur gitlab a bien √©t√© modifi√©.\nRegardez votre historique avec un git log --all --decorate --oneline --graph\n\n\nPour r√©sumer voil√† ce que vous avez fait :\n\n\n\nZonge git"
  },
  {
    "objectID": "doc/tp-ensai-new.html#exercice-dapplication-1",
    "href": "doc/tp-ensai-new.html#exercice-dapplication-1",
    "title": "Git TP ENSAI",
    "section": "5 Exercice d‚Äôapplication 1",
    "text": "5 Exercice d‚Äôapplication 1\n\nCr√©ez un fichier fibonacci.py avec le code suivant\ndef fibonacci(n):\n    if n &lt; 2:\n        return 1\n    else :\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nif __name__ == \"__main__\":\n    for i in range (1, 101):\n        print(fibonacci(i))\net envoyez le sur la copie distante de votre projet gitlab\nCr√©ez un fichier puissance_rec.py avec le code suivant\ndef puissance_rec(nombre, puissance):\n    if not puissance:\n        return 1\n    elif not puissance % 2:\n        return puissance_rec(nombre, int(puissance / 2)) \\\n        * puissance_rec(nombre, int(puissance / 2))\n    else:\n        return nombre * puissance_rec(nombre, puissance - 1)\net envoyez le sur la copie distante de votre projet gitlab\nAfficher votre historique"
  },
  {
    "objectID": "doc/tp-ensai-new.html#simulation-de-travail-en-groupe",
    "href": "doc/tp-ensai-new.html#simulation-de-travail-en-groupe",
    "title": "Git TP ENSAI",
    "section": "6 Simulation de travail en groupe",
    "text": "6 Simulation de travail en groupe\nPour cette seconde partie, vous allez cloner votre d√©p√¥t dans un autre dossier. Cela va permettre de simuler un travail √† plusieurs sur le m√™me projet. Sur la page gitlab de votre projet cliquez sur clone et copiez la partie clone with SSH. Dans VScode ouvrez une autre fen√™tre et ouvrez le dossier parent du dossier actuel. Dans le terminal de VScode clonez votre projet avec la commande git clone git@gitlab.com:username/TP_initiation_git.git en rempla√ßant git@gitlab.com:username/TP_initiation_git.git par la partie clone with SSH. Vous devrez voir appara√Ætre un nouveau dossier avec le code disponible sut git. Ouvrez ce dossier avec VScode. Vous devez avoir 2 fen√™tres VScode chacune avec le m√™me code (mais chacune correspondant √† une copie de travail distincte).\nDans une des fen√™tres cr√©ez un fichier moto.py avec le code suivant :\nclass Moto:\n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        \n    def accelere(self, increment):\n        if increment &gt; 15:\n            increment = 15\n        self.vitesse = min(150, self.vitesse + increment)\nPuis dans le terminal de cette fen√™tre faites les commandes git add moto.py, git commit -m \"creation classe moto\", git push.\nMaintenant allez dans l‚Äôautre fen√™tre. Actuellement il n‚Äôy a pas le fichier moto.py. Il va nous falloir le r√©cup√©rer.\n\nCommencez par faire un git fetch. Cela va permettre de r√©cup√©rer les modifications de la copie distante dans la copie locale, sans modifier la copie de travail (ici, moto.py ne va pas appara√Ætre dans l‚Äôexplorateur de fichier).\nEnsuite faites un git status. Vous allez obtenir le message suivant Your branch is behind 'origin/main' by 1 commit, and can be fast-forwarded. (use \"git pull\" to update your local branch). Cela signifie que votre copie de travail est en retard compar√©e √† votre copie locale.\nFaites un git log --all --decorate --oneline --graph. Vous devrez obtenir le r√©sultat suivant (les valeurs des hash (les 7 caract√®res hexad√©cimaux au d√©but) de commits peuvent √™tre diff√©rentes :\n* aa02cb7 (origin/main) creation classe moto\n* a81a5a2 (HEAD -&gt; main) add accelere fonction\n* 6e7c120 creation classe voiture\n* 49fdb53 Initial commit\nActuellement le dernier commit de ma copie de travail est le commit a81a5a mais ma copie locale poss√®de le commit aa02cb7 qu‚Äôil me faut r√©cup√©rer. HEAD permet de rep√©rer o√π se trouve notre copie de travail par rapport √† l‚Äôhistorique dans notre copie locale.\nFaites un git merge maintenant. Cela va appliquer sur votre copie de travail les modifications additionnelles de votre copie locale. Par la suite nous allons remplacer les op√©rations git fetch et git merge par git pull.\nUpdating a81a5a2..aa02cb7\nFast-forward\n moto.py | 10 ++++++++++\n 1 file changed, 10 insertions(+)\n create mode 100644 moto.py\nFaites un git log --all --decorate --oneline --graph pour v√©rifier que vous avez bien r√©cup√©r√© la dernier version du code.\nCr√©ez un fichier velo.py et avec le m√™me contenu que le fichier moto et faites les m√™mes manipulations pour que le fichier apparaisse dans les deux fen√™tres (donc dans vos deux copies de travail distinctes).\nMaintenant cr√©ez un fichier dans chaque fen√™tre VScode, dans la premi√®re vous allez faire un fichier exo1.R et dans l‚Äôautre vous allez cr√©er un fichier exo2.R avec les codes suivants :\n\n# exo1.R\na&lt;-c(10,5,3,2)\na[2]\na[3]\na[2:3]\n# exo2.R\nb&lt;-c(11,6,4,3)\nb[2]\nb[3]\nb[2:3]\nFaites un commit dans une fen√™tre et poussez le code, puis faite la m√™me chose dans l‚Äôautre fen√™tre. Vous devrez recevoir ce message :\n! [rejected]        master -&gt; dev (fetch first)\nerror: failed to push some refs to 'git@gitlab.com:username/TP_initiation_git.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nGit vous signifie que votre copie locale est en retard sur la copie distante. Et comme vous √™tes en retard, git ne vous permet pas de pousser vos modifications. Pour avoir le droit d‚Äôenvoyer votre code sur le d√©p√¥t distant vous devez avoir en local au minimum tout l‚Äôhistorique de la copie distante. R√©cup√©rez ces modifications distantes avec un git pull puis poussez vos modifications locales.\nEnfin allez r√©cup√©rer ces modifications que vous venez de pousser dans l‚Äôautre fen√™tre VScode. Faites un git log --all --decorate --oneline --graph pour voir √† quoi ressemble votre historique. Vous allez constater une disjonction puis une fusion. Cette s√©paration correspond aux deux commits effectu√©s en parall√®le.\n\n6.1 Avanc√©\nLorsque vous ma√Ætriserez git pull et la gestion de conflits (section Hands on 3 ci-dessous), vous pourrez utiliser git pull --rebase. Cette option permet d‚Äô√©viter la disjonction / fusion inscrite dans l‚Äôhistorique pour n‚Äôavoir que la ligne du commit additionnel dans l‚Äôhistorique. L‚Äôutilisation de rebase fait partie des bonnes pratiques de git, mais son usage n‚Äôest pas n√©cessaire pour un d√©butant."
  },
  {
    "objectID": "doc/tp-ensai-new.html#exercice-dapplication-2",
    "href": "doc/tp-ensai-new.html#exercice-dapplication-2",
    "title": "Git TP ENSAI",
    "section": "7 Exercice d‚Äôapplication 2",
    "text": "7 Exercice d‚Äôapplication 2\n\nDans une des fen√™tres VScode modifiez le code de puissance_rec.py pour le code suivant :\ndef puissance_rec_smarter(nombre, puissance):\n    if not puissance:\n        return 1\n    elif not puissance % 2:\n        return puissance_rec(nombre, int(puissance / 2))**2\n    else:\n        return nombre * puissance_rec(nombre, puissance - 1)\nDans l‚Äôautre fen√™tre modifiez le code de fibonacci.py pour que la boucle dans la condition finale aille jusqu‚Äô√† 201\nSynchronisez les deux codes."
  },
  {
    "objectID": "doc/tp-ensai-new.html#un-premier-conflit",
    "href": "doc/tp-ensai-new.html#un-premier-conflit",
    "title": "Git TP ENSAI",
    "section": "8 Un premier conflit",
    "text": "8 Un premier conflit\nPour le moment vous avez travaill√© sans g√©n√©rer le moindre conflit. Or la gestion des conflits est un √©l√©ment crucial pour utiliser correctement git. Les conflits vont appara√Ætre quand plusieurs commits faits en parall√®le sont incoh√©rents (dans le cas de fichiers textes, ceci est le cas lorsque les modifications impactent les m√™mes zones de code).\nDans la premi√®re fen√™tre VScode, modifiez le fichier voiture.py pour qu‚Äôil ressemble √† :\nclass Voiture:\n    def __init__(self, nom, couleur, marque):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        self.marque = marque\n        \n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\nDans la seconde, modifiez le fichier voiture.py pour qu‚Äôil ressemble √† :\nclass Voiture:\n    def __init__(self, nom, couleur, vitesse_max):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        self.vitesse_max = vitesse_max\n        \n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(self.vitesse_max, self.vitesse + increment)\nVous pourrez observer que ces modifications changent la ligne avec __init__ de mani√®re diff√©rente.\nMaintenant faites des commits dans les deux fen√™tres, un git push dans l‚Äôun des deux et un git pull dans l‚Äôautre. Vous allez obtenir le message suivant :\nremote: Enumerating objects: 9, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 5 (delta 3), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (5/5), 536 bytes | 15.00 KiB/s, done.\nFrom https://gitlab.com/username/tp_initiation_git\n   6bee995..a57ae91  main       -&gt; origin/main\nAuto-merging voiture.py\nCONFLICT (content): Merge conflict in voiture.py\nAutomatic merge failed; fix conflicts and then commit the result.\nGit vous pr√©vient que lors de la r√©cup√©ration (avec git pull), il n‚Äôest pas arriv√© √† fusionner les commits automatiquement. C‚Äôest cela qu‚Äôon appel un conflit. Un conflit est g√©n√©r√© quand les m√™mes lignes de fichiers sont modifi√©s par deux commits de mani√®re diff√©rente. Votre code ressemble √† cela d√©sormais :\nclass Voiture:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n    def __init__(self, nom, couleur, vitesse_max):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        self.vitesse_max = vitesse_max\n=======\n    def __init__(self, nom, couleur, marque):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        self.marque = marque\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a57ae9120dbf97dbab78f82db81f5fc8f48f3821\n        \n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(self.vitesse_max, self.vitesse + increment)\nLa zone de code :\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n...\n=======\n...\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a57ae9120dbf97dbab78f82db81f5fc8f48f3821\nest la zone du fichier en conflit. La premi√®re partie (apr√®s &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD mais avant =======) correspond au code en que vous aviez dans votre copie de travail, la seconde au code de la copie distante. Il vous faut maintenant fusionner les deux codes comme vous le souhaitez. Vous pouvez d√©cider de ne prendre que vos changements, que les changements distant ou faire un mix des deux. Remarquez que la ligne 19 n‚Äôest pas en conflit. Cette ligne n‚Äôa √©t√© modifi√©e que par un seul commit donc il n‚Äôy a pas de conflit.\nAvant de faire quoi que ce soit, faite un git status. Vous allez voir que git vous pr√©vient que les diff√©rents historiques ont diverg√©, et que le fichier voiture.py a √©t√© modifi√© par les versions. C‚Äôest donc le seul fichier en conflit.\nPour le r√©soudre vous allez faire un mix des deux commits. le code de votre fichier sera :\nclass Voiture:\n    def __init__(self, nom, couleur, vitesse_max, marque):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        self.vitesse_max = vitesse_max\n        self.marque = marque\n        \n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(self.vitesse_max, self.vitesse + increment)\nFaites maintenant un git add voiture.py puis un git status. Le message va vous dire que tout les conflits sont r√©solus, mais que vous √™tre encore en train de faire une fusion. Il vous faut maintenant faire un commit pour mettre fin √† la fusion. Faites un git log --all --decorate --oneline --graph pour voir √† quoi ressemble votre historique apr√®s votre commit. Finalement, faites un git push, puis un git pull dans l‚Äôautre fen√™tre de VSCode."
  },
  {
    "objectID": "doc/tp-ensai-new.html#exercice-dapplication-3",
    "href": "doc/tp-ensai-new.html#exercice-dapplication-3",
    "title": "Git TP ENSAI",
    "section": "9 Exercice d‚Äôapplication 3",
    "text": "9 Exercice d‚Äôapplication 3\n\nDans une des fen√™tres de VScode\n\nSur le constructeur de la classe voiture (la m√©thode __init__), mettez la valeur par d√©faut de couleur √† verte : def __init__(self, nom, vitesse_max, marque, couleur=verte)\nCr√©ez un nouveau fichier scooter.py en copiant le contenu du fichier voiture.py\nModifiez la m√©thode accelere() de scooter.py pour avoir une vitesse maximale de 80\n\nDans la seconde fen√™tres de VScode\n\nSur le constructeur de la classe voiture (la m√©thode __init__), mettez la valeur par d√©faut de couleur √† jaune\nCr√©ez un nouveau fichier scooter.py en copiant le contenu du fichier voiture.py\nModifiez la m√©thode accelere() de scooter.py pour avoir une vitesse maximale de 75\nCr√©ez un nouveau fichier train.py en copiant le contenu du fichier voiture.py\nModifiez la m√©thode accelere() de scooter.py pour avoir une vitesse maximale de 350\n\nSynchronisez vos d√©p√¥ts et r√©solvez les conflits.\n\n\n\n\nZonge git"
  },
  {
    "objectID": "doc/tp.html",
    "href": "doc/tp.html",
    "title": "Git TP",
    "section": "",
    "text": "Pr√©senter les fonctionnalit√©s de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nR√©soudre un conflit\nbonus : retour en arri√®re, branches‚Ä¶"
  },
  {
    "objectID": "doc/tp.html#objectifs",
    "href": "doc/tp.html#objectifs",
    "title": "Git TP",
    "section": "",
    "text": "Pr√©senter les fonctionnalit√©s de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nR√©soudre un conflit\nbonus : retour en arri√®re, branches‚Ä¶"
  },
  {
    "objectID": "doc/tp.html#cr√©er-un-projet",
    "href": "doc/tp.html#cr√©er-un-projet",
    "title": "Git TP",
    "section": "1 Cr√©er un projet",
    "text": "1 Cr√©er un projet\n‚ÑπÔ∏è Ce projet permettra d‚Äôh√©berger le d√©p√¥t distant\n\nse connecter √† GitHub\nEn haut √† gauche, cliquez sur l‚Äôicone GitHub, puis sur New\n\nou directement : Create a new repository\n\nRepository name : git-tp\nPublic\nAdd a README file\nAdd .gitignore (python)\nCreate Project\n\n\n1.1 Le fichier .gitignore\n\n\n\n\n\n\nTip\n\n\n\n.gitignore est un fichier pr√©sent √† la racine du d√©p√¥t permettant de dire √† Git quels fichiers il faut ignorer. Par exemple :\n\nsi .gitignore contient *.csv\net sur votre d√©p√¥t local, vous avez un fichier resultats.csv\nGit fera comme si ce fichier n‚Äôexiste pas\nAinsi, ce fichier ne sera jamais pouss√© vers le d√©p√¥t distant\n\n\n\n\n\n1.2 Inviter d‚Äôautres membres\nVous venez de cr√©er un projet public donc visible par tous. Cependant, vous √™tes seul √† pouvoir modifier ce projet. Pour autoriser d‚Äôautres personnes √† √©crire sur ce projet (par exemple lors du projet info), il faut donner les droits en √©criture.\nSur la page de votre d√©p√¥t, allez dans :\n\nSettings &gt; Collaborators\nAdd people\n\nCependant ce n‚Äôest pas n√©cessaire dans le cadre de ce TP, vous pouvez donc passer √† la suite."
  },
  {
    "objectID": "doc/tp.html#cloner-le-projet",
    "href": "doc/tp.html#cloner-le-projet",
    "title": "Git TP",
    "section": "2 Cloner le projet",
    "text": "2 Cloner le projet\n\n\n\n\n\n\nNote\n\n\n\nLe but de cette √©tape est de cr√©er votre d√©p√¥t local en faisant un clone du d√©p√¥t distant\n\n\n\nOuvrir Visual Studio Code\nOuvrir un Terminal\nOuvrir un Terminal Git Bash\n\nEn haut √† droite du terminal, √† cot√© du +, cliquer sur la fl√®che vers le bas ÀÖ\n\nCr√©er le dossier ci-dessous s‚Äôil n‚Äôexiste pas d√©j√†\n\nmkdir /p/Cours/Python\n\nSe positionner dans ce dossier\n\ncd /p/Cours/Python\n\nCloner le projet\n\ngit clone git@github.com:???????/git-tp.git\n\nRemplacer les ?????? par votre nom d‚Äôutilisateur GitHub\nOu sinon sur la page GitHub du projet\n\ncliquer sur Clone\ncopier la ligne qui commence par git@github...\n\n\nAre you sure you want to continue connecting (yes/no)?\n\ntaper yes puis ENTREE\n\nVotre d√©p√¥t local est maintenant cr√©√©\n\nOuvrir ce d√©p√¥t dans l‚Äôexplorateur VSCode\n\nFile &gt; Open Folder\ngit-tp\n\nR√©-ouvrir le terminal Git Bash\n\nSi ce n‚Äôest pas le cas, se positionner dans le dossier suivant :\n\ncd /p/Cours/Python/git-tp\"\n\nun (main) apparait dans le terminal, cela signifie bien que vous √™tes dans un d√©p√¥t Git"
  },
  {
    "objectID": "doc/tp.html#ajouter-un-nouveau-fichier",
    "href": "doc/tp.html#ajouter-un-nouveau-fichier",
    "title": "Git TP",
    "section": "3 Ajouter un nouveau fichier",
    "text": "3 Ajouter un nouveau fichier\n\n\n\n\n\n\nNote\n\n\n\nNous allons ici voir comment :\n\najouter/modifier des fichiers dans le d√©p√¥t local\nenvoyer ces mises √† jour au d√©p√¥t distant\n\n\n\nDans le dossier git-tp, cr√©er un fichier voiture.py contenant le code suivant :\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\nDans le terminal Git Bash, ex√©cuter les commandes suivantes :\ngit status\n\nLe fichier apparait dans les Untracked files\nCela siginifie que Git a rep√©r√© ce fichier mais pour le moment il ne le versionnera pas\n\ngit add voiture.py\n\npour dire √† Git de suivre ce fichier\n\ngit status\n\nmaintenant le fichier est reconnu par Git\n\ngit commit -m \"creation classe voiture\"\n\npour cr√©er un point de sauvegarde\nEntre les \" \", mettre un message court et explicite\n\ngit status\n\nYour branch is ahead of ‚Äòorigin/main‚Äô by 1 commit\nCe qui signifie que votre d√©p√¥t local est en avance d‚Äôun commit par rapport au d√©p√¥t distant\n\ngit pull\n\nAlready up to date\nPour v√©rifier que le d√©p√¥t distant n‚Äôa pas √©t√© mis √† jour\n\ngit push\n\nV√©rifier qu‚Äôil n‚Äôy a pas d‚Äôerreur\nPour mettre √† jour le d√©p√¥t distant avec mes modifications locales\n\n\n\n\n\n\n\n\nCombiner les commandes add et commit\n\n\n\nDans le cas d‚Äôun nouveau fichier, il faut imp√©rativement encha√Æner les deux commandes suivantes pour que Git suive ce fichier :\n\ngit add mon_fichier.py\ngit commit -m \"Creation mon_fichier\"\n\nSi le fichier existait d√©j√†, il est possible de combiner les deux commandes :\n\nen ajoutant au commit un a qui signifie add\ngit commit -am \"Modification mon_fichier\"\n\n\n\nüí° Si vous cr√©ez, non pas un mais plusieurs fichiers, vous pouvez utiliser la commande suivante pour tous les faire suivre par Git : git add .\n\n\n\n\n\n\nImportant\n\n\n\nIl est fortement recommand√© de cr√©er des commits tr√®s fr√©quement, par exemple\n\nVous venez de modifier une fonction\nTestez pour v√©rifier que votre code fonctionne bien\nCr√©ez un commit\nSi jamais par la suite vous ‚Äúcassez tout‚Äù et que plus rien ne marche, il est facile de revenir au dernier commit"
  },
  {
    "objectID": "doc/tp.html#g√©rer-un-conflit",
    "href": "doc/tp.html#g√©rer-un-conflit",
    "title": "Git TP",
    "section": "4 G√©rer un conflit",
    "text": "4 G√©rer un conflit\n\nDans le monde merveilleux de Git, tout se passe bien quand chacun travaille sur des fichiers diff√©rents. Lorsque deux personnes ont modifi√© le m√™me fichier, √ßa peut se compliquer.\nAu moment de la synchronisation des d√©p√¥ts, Git va tenter de faire un auto-merge. Celui-ci fonctionnera bien si par exemple l‚Äôune des deux personnes a modifi√© le d√©but du fichier et l‚Äôautre la fin.\nPar contre, si les modifications concernent le m√™me endroit, Git ne peut pas d√©cider seul quelle est la bonne version et demande √† l‚Äôutilisateur de choisir quelles lignes il souhaite conserver.\n\nNous allons cr√©er artificiellement un conflit, c‚Äôest √† dire faire comme si 2 personnes avaient modifi√© le m√™me fichier. Ce cas de figure arrivera in√©vitablement lorsque vous travaillerez √† plusieurs sur un projet.\n\n\n\n\n\n\nImportant\n\n\n\nIl faut bien avoir en t√™te qu‚Äôun conflit :\n\nce n‚Äôest pas grave\nce n‚Äôest pas une erreur\nvous n‚Äôavez pas tout cass√©\nüò± il ne faut pas paniquer, simplement savoir comment le r√©soudre\n\n\n\n\nDans GitHub, cliquer sur le fichier voiture.py\nPuis sur la petite fl√®che apr√®s Open in web IDE et Edit\nCliquer sur Edit\n\nRemplacer √† la derni√®re ligne 130 par 110\nCommit changes\nLe fichier a √©t√© modifi√© sur le d√©p√¥t distant\n\nDans VSCode, √©diter le fichier voiture.py\n\nRemplacer √† la derni√®re ligne 130 par 150 et enregistrer\ngit status\n\nle fichier voiture.py est √† l‚Äô√©tat modifi√©\n\ngit commit -am \"Modif vitesse max\"\nLe fichier a √©t√© modifi√© sur le d√©p√¥t local\n\ngit push\n\n‚ö†Ô∏è Error : petit pi√®ge, il faut toujours faire un pull avant de tenter un push\nLe d√©p√¥t distant a √©t√© modifi√©\nJe dois d‚Äôabord r√©cup√©rer ces modifications sur mon d√©p√¥t local (pull)\nEnsuite seulement je pourrai mettre √† jour le d√©p√¥t distant (push)\n\ngit pull\n\nüö® Conflict - Automatic merge failed\nSur les 2 d√©p√¥ts, la m√™me ligne a √©t√© modifi√©e\n\nAinsi dans le cas pr√©sent, Git ne peut pas savoir quelle version choisir\n\ndans le terminal Git est au statut (main|MERGING)\n\ngit status\n\nboth modified: voiture.py\n\nDans VSCode, ouvrir le fichier voiture.py, on voit s‚Äôafficher :\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n        self.vitesse = min(150, self.vitesse + increment)\n******=\n        self.vitesse = min(110, self.vitesse + increment)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; d29aa04e48e16d3648fd4ae9796b4a035e176f1c\n\nMaintenant il faut choisir quelle ligne on garde\n\nCelle du dessus est la notre (d√©p√¥t local)\nCelle du dessous est celle telle qu‚Äôelle a √©t√© modifi√©e sur le d√©p√¥t distant\n\nSupprimer la ligne avec le 110, ainsi que les lignes avec &lt;&lt;&lt;&lt;&lt;, ****= et &gt;&gt;&gt;&gt;&gt;\n\nOu cliquer simplement sur le bouton VSCode Accept Current Change\nEnregistrer\n\nüí° En th√©orie, √† cet instant, il faut tester de nouveau que le programme fonctionne bien, cependant ce n‚Äôest pas l‚Äôobjet de ce TP\ngit commit -am \"Resolve merge\"\n\ncela cr√©e un nouveau point de sauvegarde pour valider le merge\ndans le terminal Git repasse au statut (main)\n\ngit status\ngit push\n\ncette fois ci, c‚Äôest ok, les modifications faites sur le d√©p√¥t local sont pouss√©es vers le d√©p√¥t distant\n\nüéâ F√©licitations, vous venez de r√©soudre votre 1er conflit\n\nc‚Äô√©tait pas compliqu√©, hein ?\n\n\n\nLes parties 3 et 4 sont de tr√®s loin les plus importantes. Pour utiliser efficacement Git, il faut imp√©rativement avoir bien compris comment utiliser les 5 commandes principales (status, add, commit ,pull, push) et savoir r√©soudre des conflits.\nLa suite permet d‚Äôaller un peu plus loin si vous commencez √† √™tre √† l‚Äôaise."
  },
  {
    "objectID": "doc/tp.html#revenir-en-arri√®re",
    "href": "doc/tp.html#revenir-en-arri√®re",
    "title": "Git TP",
    "section": "5 Revenir en arri√®re",
    "text": "5 Revenir en arri√®re\n‚ÑπÔ∏è L‚Äôint√©r√™t de versionner est d‚Äôavoir la possibilit√© de revenir en arri√®re si besoin !\nSoyons clair, revenir en arri√®re n‚Äôest pas une action anodine et n√©cessite parfois une certaine ma√Ætrise de Git. Nous nous contenterons donc ici de quelques outils de base.\n\n\n5.1 Revenir au dernier commit\nComme souvent avec Git, il y a plusieurs mani√®res de faire, ici nous utiliserons la commande stash\n\nCr√©er un fichier vehicule.py\nModifier le fichier voiture.py\n\npar exemple en ajoutant toto sur la derni√®re ligne\n\ngit stash -u\n\nLe fichier vehicule.py a √©t√© supprim√©\nLe fichier voiture.py est revenu √† l‚Äô√©tat du dernier commit\n\nil est possible de retrouver les fichiers qui ont √©t√© ‚Äústash√©s‚Äù (voir commandes stash et pop)\n\n\n\n\n5.2 Consulter l‚Äôhistorique d‚Äôun fichier\n\n5.2.1 Dans GitHub, aller sur le fichier voiture.py\n\nCliquer sur History\nCela affiche la liste des commits qui ont mis √† jour ce fichier\n\n\n\n5.2.2 Dans Git Bash\n\ngit log voiture.py\n\nCela affiche a peu pr√®s la m√™me chose que dans GitHub\n\nFaire ENTREE pour continuer √† d√©filer\nFaire q comme quit pour sortir\n\nMais ce n‚Äôest pas tr√®s lisible, voire tr√®s moche\nHeureusement la commande git log propose de nombreuses options\n\ngit log affiche une liste de commit\n\nPour la suite, nous ne limeterons pas aux commits impactant le fichier voiture.py mais nous afficherons tous les commits\nvous pouvez ajouter √† la fin de chaque commande le nom d‚Äôun fichier pour se restreindre aux commits sur ce fichier\n\ngit log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\n\nC‚Äôest joli, non ?\nMais un peu p√©nible √† retenir, et long √† √©crire\nC‚Äôest ici que l‚Äôon pr√©sente les alias\n\nVoici deux commandes pour cr√©er les alias nomm√©s arbitrairement bb et cc :\n\ngit config --global alias.bb \"log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\"\ngit config --global alias.cc \"log --all --decorate --oneline --graph\"\nces 2 alias sont √† cr√©er une seule fois\n√©ventuellement vous pouvez en cr√©er d‚Äôautres, ou les modifier\n\nMaintenant essayez git bb et git cc\n\nC‚Äôest de toute beaut√© !\n\n\n\n\n\n\n5.3 Comparer 2 versions d‚Äôun fichier\n\nNoter le num√©ro d‚Äôun commit o√π vous avez modifi√© voiture.py\n\ngit bb voiture.py\nen jaune sur 7 caract√®res alphanum√©riques\nne choisissez pas le plus r√©cent, sinon il n‚Äôy aura aucune diff√©rence\n\ngit diff 7539cf7 voiture.py\n\nremplacer 7539cf7 par votre num√©ro de commit\nvous voyez les diff√©rences la version actuelle et une ancienne version\n\ngit diff\n\npour lister toutes les modifications effectu√©es depuis le dernier commit\ngit diff voiture.py : pour se limiter aux modifications effectu√©e sur ce fichier\n\n\n\n\n\n5.4 Retour vers le pass√©\n\nToujours avec le num√©ro d‚Äôun ancien commit\ngit checkout 7539cf7\n\nHEAD is now 7539cf7\nHEAD est un mot que l‚Äôon retrouve souvent dans Git\n\non peut le traduire par ‚Äút√™te de lecture‚Äù\n\nAu bout de la ligne de commande, ne s‚Äôaffiche plus (main) mais ((7539cf7...))\nVous voici revenu au code tel qu‚Äôil √©tait √† l‚Äô√©poque de ce commit\n\ngit checkout main pour revenir au pr√©sent\n\n\n\n\n5.5 Annuler un commit\n\nEn fait non, on ne verra pas comment annuler un commit, ni sur le d√©p√¥t local, ni sur le d√©p√¥t distant. C‚Äôest possible mais √† vos risques et p√©rils.\nPr√©f√©rez la m√©thode un peu archa√Øque qui consiste √† retourner dans le pass√© pour copier ce qui fonctionnait bien avant.\nEt pour vous faciliter la vie, faites des commits r√©guliers et ne modifiez pas 50 fichiers dans un commit.\n\n\n\n\n\n\n\nTip\n\n\n\nSi √† un moment vous avez peur de faire une b√©tise et de perdre tout votre code (par exemple si une commande Git ne se passe pas comme vous l‚Äôaviez pr√©vu), il est tout a fait possible de copier votre d√©p√¥t. Votre d√©p√¥t local est un dossier, allez dans l‚Äôexplorateur windows, faites CTRL + C CTRL + V et voila vous avez une copie que vous pouvez garder de cot√© au cas o√π √ßa tourne mal.\n\n\nEt surtout n‚Äôh√©sitez pas √† demander de l‚Äôaide !"
  },
  {
    "objectID": "doc/tp.html#fonctionnalit√©s-de-github",
    "href": "doc/tp.html#fonctionnalit√©s-de-github",
    "title": "Git TP",
    "section": "6 Fonctionnalit√©s de GitHub",
    "text": "6 Fonctionnalit√©s de GitHub\nGitHub n‚Äôest pas seulement un d√©p√¥t distant, il y a de nombreuses fonctionnalit√©s interessantes.\n\nIssues : Pour lister et suivre les incidents ou les √©volutions du programme\nWiki : Pour cr√©er facilement des pages de documentation en langage markdown\nCI/CD (Continuous Integration/Continuous Delivery) : Cela permet lorsque l‚Äôon met √† jour le d√©p√¥t distant de lancer des t√¢ches automatis√©es, par exemple pour : tester le code, √©valuer la qualit√© du code, d√©ployer le code sur une machine de production ou de d√©veloppement‚Ä¶"
  },
  {
    "objectID": "doc/tp.html#un-petit-exo-dapplication",
    "href": "doc/tp.html#un-petit-exo-dapplication",
    "title": "Git TP",
    "section": "7 Un petit exo d‚Äôapplication",
    "text": "7 Un petit exo d‚Äôapplication\n\nRevenez dans VSCode, ouvrez un terminal Git Bash et positionnez votre terminal dans le dossier P:\\Cours\\Python\\git-tp comme cela a √©t√© fait au d√©but de la partie 2.\nDans VSCode, sur le constructeur de la classe voiture, mettre la valeur par d√©faut de couleur √† verte : def __init__(self, nom, couleur=verte)\nDans GitHub, faites la m√™me modification sur la classe voiture mais en mettant cette fois-ci la couleur jaune\nCr√©ez un nouveau fichier velo.py en copiant le contenu du fichier voiture.py\nModifier la m√©thode accelere() de velo.py pour avoir une vitesse maximale de 80\nCr√©er un point de sauvegarde sur votre d√©p√¥t local (add et commit)\nSynchronisez vos d√©p√¥ts et r√©solvez les conflits (pull et push)"
  },
  {
    "objectID": "doc/tp.html#les-branches",
    "href": "doc/tp.html#les-branches",
    "title": "Git TP",
    "section": "8 Les branches",
    "text": "8 Les branches\n‚ÑπÔ∏è Uniquement si vous √™tes √† l‚Äôaise\n\n8.1 A quoi sert une branche ?\nImaginez vous avez votre code qui fonctionne bien mais qui est tout moche (avec des duplications‚Ä¶). Comme vous √™tes s√©rieux, vous voulez faire tout bien comme il faut et mettre tout au propre.\nVous faites vos corrections, faites de commits, et puis √† un moment vous en avez marre car plus rien ne fonctionne. Vous avez envie de retourner en arri√®re, ce qui est possible avec ce que l‚Äôon a vu pr√©c√©demment mais pas trivial ni tr√®s propre.\nSi vous connaissiez les branches voici ce que vous auriez fait :\n\ncr√©er une branche nomm√©e ‚Äúrefonte‚Äù\nD√©velopper, Commiter sur cette branche\nSi √† la fin ce que vous avez fait sur cette branche vous plait alors fusion de cette branche avec la branche principale main\nSinon vous pouvez simplement supprimer cette branche\n\nEn gros une branche permet de coder et/ou tester une nouvelle fonctionnalit√© sans polluer la branche principale.\n\n\n\n8.2 Un petit exemple pour y voir plus clair\n\nimaginons que vous voulez ajouter une classe trottinette, mais vous n‚Äô√™tes pas encore s√ªr, alors vous testez sur une branche\ngit checkout -b trottinette\n\ncr√©ation d‚Äôune branche trottinette\nSwitched to a new branch ‚Äòtrottinette‚Äô\n\net comme l‚Äôindique le message, avec cette commande vous √™tes directement positionn√© sur cette branche\n\n\nCr√©ez un fichier trottinette.py\nModifiez la vitesse de voiture √† 210 parce que vous √™tes un malade\nadd puis commit\ngit push pour partager sur le d√©p√¥t distant\n\nGit dit que cette branche n‚Äôest pas connue sur le d√©p√¥t distant\nMais comme il est sympa, il donne la commande pour la cr√©er\ngit push --set-upstream origin trottinette\n\nEnsuite revenons sur la branche principale main\n\ngit checkout main\n\nModifiez la vitesse maximale de voiture √† 90 parce qu‚Äôen fait vous √™tes tr√®s prudent puis commit\nMaintenant, apr√®s m√ªre r√©flexion, vous vous dites que la trottinette c‚Äôest trop bien et qu‚Äôil faut l‚Äôint√©grer √† la branche main\nVous avec envie de fusionner directement les branches trottinette et main\n\ngit merge trottinette\nSeulement il y a un conflit et c‚Äôest fait expr√©s\nIl a √©t√© dit plus haut que la branche main doit rester le plus propre possible, ainsi on va √©viter de la polluer avec des commits de gestion de conflit. Les conflits doivent √™tre r√©gl√© sur les autres branches\nAnnulons ce merge\n\ngit merge --abort\n\n\nVoici comment nous allons proc√©der pour faire cela proprement\n\nOn retourne sur la branche trottinette\n\ngit checkout trottinette\n\nNous allons faire la fusion sur cette branche\n\ngit merge main\nnous r√©solvons le conflit puis commit\n\nMaintenant que les 2 branches sont synchronis√©es, retournons sur la branche main\n\ngit checkout main\ngit merge --squash trottinette\n\ncette fois-ci pas de conflits car ils ont √©t√© r√©solu juste avant\n\ngit commit -am \"ajout fonctionnalit√© trottinette\"\n\nL‚Äôoption --squash permet de ne pas polluer le main avec tous les commits r√©alis√©s sur la branche trottinette. Si par la suite vous utilisez GitHub ou GitHub cette option se retrouve directement dans les merge ou les pull requests."
  },
  {
    "objectID": "doc/open-source.html",
    "href": "doc/open-source.html",
    "title": "Open source",
    "section": "",
    "text": "Faire un fork du projet\nCloner en local votre fork\nCr√©er une branche (IMPORTANT pour √©viter les conflits)\n\nCorriger sur cette branche\nPousser la branche\n\nCreer une pull request\n\ndepuis mon d√©pot/ma branche\nvers le d√©pot original/master\nMessage\n\n\nPour mettre √† jour son fork - git remote add upstream https://d√©pot_original - git remote -v - git fecth upstream pour r√©cup√©rer les branches du upstream - git branch -a - git merge upstream/master pour fusionner upstream/master vers ma propre branche master\nPour plus d‚Äôinfos : https://grafikart.fr/tutoriels/fork-pull-request-591"
  },
  {
    "objectID": "doc/open-source.html#contribuer-√†-un-projet-open-source",
    "href": "doc/open-source.html#contribuer-√†-un-projet-open-source",
    "title": "Open source",
    "section": "",
    "text": "Faire un fork du projet\nCloner en local votre fork\nCr√©er une branche (IMPORTANT pour √©viter les conflits)\n\nCorriger sur cette branche\nPousser la branche\n\nCreer une pull request\n\ndepuis mon d√©pot/ma branche\nvers le d√©pot original/master\nMessage\n\n\nPour mettre √† jour son fork - git remote add upstream https://d√©pot_original - git remote -v - git fecth upstream pour r√©cup√©rer les branches du upstream - git branch -a - git merge upstream/master pour fusionner upstream/master vers ma propre branche master\nPour plus d‚Äôinfos : https://grafikart.fr/tutoriels/fork-pull-request-591"
  },
  {
    "objectID": "doc/open-source.html#nommer-ses-commits",
    "href": "doc/open-source.html#nommer-ses-commits",
    "title": "Open source",
    "section": "2 Nommer ses commits",
    "text": "2 Nommer ses commits\n: \nType d√©finit le type de commit\n\nbuild: Syst√®me de build (example : gulp, webpack, npm)\nci: Int√©gration continue (example scopes: Travis, Circle, BrowserStack, SauceLabs)\ndocs: Documentation\nfeat: Ajout d‚Äôune fonctionnalit√©\nfix: Correction de bogue\nperf: Am√©lioration des performances\nrefactor: Changement du code qui ne change rien au fonctionnement\ntest: Modification des tests"
  },
  {
    "objectID": "doc/tp-ensai.html",
    "href": "doc/tp-ensai.html",
    "title": "Git TP ENSAI",
    "section": "",
    "text": "Cr√©ez un dossier P:/Cours1A/Git\nAllez sur Moodle &gt; Outils bureautiques pour le statisticien &gt;\nOnglet TP - Git\nT√©l√©chargez\n\nle sujet\nle zip Tp git\nSetup windows"
  },
  {
    "objectID": "doc/tp-ensai.html#param√©trage",
    "href": "doc/tp-ensai.html#param√©trage",
    "title": "Git TP ENSAI",
    "section": "1 Param√©trage",
    "text": "1 Param√©trage\n\nCr√©er un compte sur GitLab\nsur la VM, double cliquez sur le fichier setup_windows.bat et suivez les instructions\nAjoutez votre cl√© ssh\n\nEdit profile &gt; SSH Keys\nAdd new key\nDans le cadre Key, clic droit &gt; Coller\nCliquez sur Add key"
  },
  {
    "objectID": "doc/tp-ensai.html#cr√©er-un-projet-gitlab",
    "href": "doc/tp-ensai.html#cr√©er-un-projet-gitlab",
    "title": "Git TP ENSAI",
    "section": "2 Cr√©er un projet GitLab",
    "text": "2 Cr√©er un projet GitLab\n\nSur GitLab &gt; New project &gt; Create blank project\n\nd√©cochez README\nCreate project"
  },
  {
    "objectID": "doc/tp-ensai.html#cr√©er-son-d√©p√¥t-local",
    "href": "doc/tp-ensai.html#cr√©er-son-d√©p√¥t-local",
    "title": "Git TP ENSAI",
    "section": "3 Cr√©er son d√©p√¥t local",
    "text": "3 Cr√©er son d√©p√¥t local\n\nOuvrez VSCode &gt; Open Folder &gt; Dossier P:/Cours1A/Git\nOuvrez un terminal Git Bash\n\ngit init --initial-branch=main pour d√©clarer le dossier courant comme d√©p√¥t local Git\ngit remote add origin git@gitlab.com:&lt;username&gt;/TP_initiation_git.git pour lier votre d√©p√¥t local au d√©p√¥t distant\n\nen modifiant username par votre nom d‚Äôutilisateur GitLab\n\ngit status : pour voir l‚Äô√©tat du d√©p√¥t\n\nNormalement vous voyez des fichiers Untracked files ie non versionn√©s par Git\n\ngit add . : ajouter tous les fichiers du dossier √† la liste des fichiers suivis par Git\ngit status : pour voir l‚Äô√©tat du d√©p√¥t\ngit commit -m \"Initial commit\" : cr√©er un point de sauvegarde\ngit push -u origin main : pousser les modification depuis le d√©p√¥t local vers le d√©p√¥t distant\n\nSi vous actualisez la page GitLab de votre projet, vous devez voir les fichiers"
  },
  {
    "objectID": "doc/tp-ensai.html#hands-on-1",
    "href": "doc/tp-ensai.html#hands-on-1",
    "title": "Git TP ENSAI",
    "section": "4 Hands on 1",
    "text": "4 Hands on 1\nsuivez le sujet"
  },
  {
    "objectID": "doc/tp-ensai.html#code-√†-coller",
    "href": "doc/tp-ensai.html#code-√†-coller",
    "title": "Git TP ENSAI",
    "section": "Code √† coller",
    "text": "Code √† coller\n\n\nvoiture.py\n\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\n\n\nfibonacci.py\n\ndef fibonacci(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(fibonacci(i))\n\n\n\npuissance_rec.py\n\ndef puissance_rec(nombre, puissance):\n    if not puissance:\n        return 1\n    elif not puissance % 2:\n        return puissance_rec(nombre, int(puissance / 2)) \\\n            * puissance_rec(nombre, int(puissance / 2))\n    else:\n        return nombre * puissance_rec(nombre, puissance - 1)\n\n\n\nmoto.py\n\nclass Moto:\n    def ______init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 15:\n            increment = 15\n        self.vitesse = min(150, self.vitesse + increment)\n\n\n\nexo1.R\n\na &lt;- c(10,5,3,2) \na[2] \na[3] \na[2:3]\n\n\n\nexo2.R\n\nb &lt;- c(11,6,4,3) \nb[2] \nb[3] \nb[2:3]"
  },
  {
    "objectID": "doc/presentation-slides.html#introduction",
    "href": "doc/presentation-slides.html#introduction",
    "title": "Introduction √† Git",
    "section": "Introduction",
    "text": "Introduction\nImaginez que vous faites parti d‚Äôune √©quipe de 5 personnes qui doit coder une application de jeux de cartes.\nComment faites-vous pour mettre en commun votre code ?\n\nVous d√©veloppez votre partie chacun de votre cot√© et √† la fin, vous mettez tout en commun\nVous envoyez vos programmes par mail\nVous cr√©er un dossier commun que vous mettez √† jour manuellement"
  },
  {
    "objectID": "doc/presentation-slides.html#git",
    "href": "doc/presentation-slides.html#git",
    "title": "Introduction √† Git",
    "section": "Git",
    "text": "Git\n\nVersionner son code\nHistorique des modifications\nTravail en √©quipe\nD√©centralis√©"
  },
  {
    "objectID": "doc/presentation-slides.html#pourquoi-versionner",
    "href": "doc/presentation-slides.html#pourquoi-versionner",
    "title": "Introduction √† Git",
    "section": "Pourquoi versionner ?",
    "text": "Pourquoi versionner ?\n\nQuelle est la bonne version ?\nComment faire pour revenir en arri√®re ?\nQui a √©crit ce code ? Quand ?\n\n\n\nles questions que l‚Äôon peut se poser en projet"
  },
  {
    "objectID": "doc/presentation-slides.html#la-solution",
    "href": "doc/presentation-slides.html#la-solution",
    "title": "Introduction √† Git",
    "section": "La solution",
    "text": "La solution\n\n\n\n\n\ngit : connard en argot britannique"
  },
  {
    "objectID": "doc/presentation-slides.html#historique",
    "href": "doc/presentation-slides.html#historique",
    "title": "Introduction √† Git",
    "section": "Historique",
    "text": "Historique\n\nCr√©√© par Linus Torvalds en 2005\nPour g√©rer le d√©veloppement du noyau Linux\nLe standard incontournable de la gestion de versions\nAnciens outils : CVS, SVN\n\n\n\nStandard : produit qui s‚Äôest impos√© par l‚Äôusage (ex : Moteur de recherche Google, TCP/IP)"
  },
  {
    "objectID": "doc/presentation-slides.html#logiciel",
    "href": "doc/presentation-slides.html#logiciel",
    "title": "Introduction √† Git",
    "section": "Logiciel",
    "text": "Logiciel\n\nLogiciel Libre\nGratuit\nS‚Äôutilise en ligne de commande\n\n\n\n\n\n\n\nNote\n\n\nüò® Git s‚Äôutilise tr√®s majoritairement en ligne de commande dans un terminal Git Bash.\nüòÖ Pas de panique, quelques commandes simples suffisent largement pour travailler avec Git.\nIl existe aussi des interfaces graphiques mais elles sont souvent imparfaites et sources d‚Äôerreur.\n\n\n\n\n\nLogiciel libre :\n\ncode source est ouvert et disponible\npermettant √† quiconque de l‚Äôutiliser, le modifier, et le distribuer librement\ndiff√©rent de gratuit"
  },
  {
    "objectID": "doc/presentation-slides.html#git-bash",
    "href": "doc/presentation-slides.html#git-bash",
    "title": "Introduction √† Git",
    "section": "Git Bash",
    "text": "Git Bash\n\nTerminal de commande\nPlusieurs mani√®res de lancer (Menu Windows, clic droit, inclus dans VSCode)\n\n\n\nLors de l‚Äôinstallation de Git, choisissez le terminal Unix"
  },
  {
    "objectID": "doc/presentation-slides.html#versionner-son-code",
    "href": "doc/presentation-slides.html#versionner-son-code",
    "title": "Introduction √† Git",
    "section": "Versionner son code",
    "text": "Versionner son code"
  },
  {
    "objectID": "doc/presentation-slides.html#travailler-en-√©quipe",
    "href": "doc/presentation-slides.html#travailler-en-√©quipe",
    "title": "Introduction √† Git",
    "section": "Travailler en √©quipe",
    "text": "Travailler en √©quipe"
  },
  {
    "objectID": "doc/presentation-slides.html#concepts",
    "href": "doc/presentation-slides.html#concepts",
    "title": "Introduction √† Git",
    "section": "Concepts",
    "text": "Concepts\n\nClonage d‚Äôun d√©p√¥t\nConcept de commit\nCommandes Git Bash\ntxt"
  },
  {
    "objectID": "doc/presentation-slides.html#git-quest-ce-que-cest",
    "href": "doc/presentation-slides.html#git-quest-ce-que-cest",
    "title": "Introduction √† Git",
    "section": "Git, qu‚Äôest ce que c‚Äôest ?",
    "text": "Git, qu‚Äôest ce que c‚Äôest ?\nGit est un syst√®me de contr√¥le de version distribu√©, largement utilis√© dans le d√©veloppement logiciel pour suivre les modifications apport√©es aux fichiers source. Il permet aux d√©veloppeurs de travailler efficacement en √©quipe, de g√©rer les diff√©rentes versions du code, de collaborer sur un m√™me projet et de maintenir un historique complet des modifications. Git facilite le d√©veloppement collaboratif, tout en offrant performance, flexibilit√© et fiabilit√©.\n\nGit\n\nLogiciel de gestion de versions\nOpen source, gratuit, tr√®s tr√®s tr√®s utilis√© et pas qu‚Äôen informatique\ncr√©√© par Linus Torvalds, cr√©ateur √©galement du noyau Linux\n\nGit Bash\n\nTerminal pour √©crire des commandes git\nPossible d‚Äôouvrir via le menu D√©marrer, mais aussi inclus dans Visual Studio Code\n\nGitHub / GitLab\n\nplateforme de d√©veloppement collaboratif bas√©e sur Git\nh√©berge des d√©p√¥ts Git\nPropose d‚Äôautres fonctionnalit√©s (CICD, wiki, gestion des incidents‚Ä¶)"
  },
  {
    "objectID": "doc/presentation-slides.html#git-√ßa-sert-√†-quoi",
    "href": "doc/presentation-slides.html#git-√ßa-sert-√†-quoi",
    "title": "Introduction √† Git",
    "section": "Git, √ßa sert √† quoi ?",
    "text": "Git, √ßa sert √† quoi ?\n\nGit permet de suivre les modifications apport√©es aux fichiers et de g√©rer efficacement les diff√©rentes versions\nGit enregistre un historique complet de toutes les modifications, ce qui permet de retracer l‚Äô√©volution du projet, d‚Äôidentifier les changements sp√©cifiques et de revenir √† des versions ant√©rieures si n√©cessaire\nGit facilite la collaboration entre les membres d‚Äôune √©quipe en permettant √† plusieurs personnes de travailler simultan√©ment sur le m√™me projet\n\nGit va aider √† synchroniser ces d√©p√¥ts avec les commandes suivantes :\n\ngit clone : cr√©er une copie du d√©p√¥t commun sur son poste\ngit status : voir o√π l‚Äôon en est\ngit add : ajouter de nouveaux fichiers dans le d√©p√¥t\ngit commit : cr√©er un point de sauvegarde\ngit pull : r√©cup√©rer les √©ventuelles modifications du d√©p√¥t distant pour mettre √† jour son d√©p√¥t local\ngit push : partager ses mises √† jour locale sur le d√©p√¥t distant"
  },
  {
    "objectID": "doc/presentation-slides.html#les-principales-commandes",
    "href": "doc/presentation-slides.html#les-principales-commandes",
    "title": "Introduction √† Git",
    "section": "Les principales commandes",
    "text": "Les principales commandes"
  },
  {
    "objectID": "doc/presentation-slides.html#exemples",
    "href": "doc/presentation-slides.html#exemples",
    "title": "Introduction √† Git",
    "section": "Exemples",
    "text": "Exemples"
  },
  {
    "objectID": "doc/presentation-slides.html#les-erreurs-courantes",
    "href": "doc/presentation-slides.html#les-erreurs-courantes",
    "title": "Introduction √† Git",
    "section": "Les erreurs courantes",
    "text": "Les erreurs courantes"
  },
  {
    "objectID": "doc/presentation-slides.html#bibliographie",
    "href": "doc/presentation-slides.html#bibliographie",
    "title": "Introduction √† Git",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nGit : un √©l√©ment essentiel au quotidien, Python pour la datascience, Lino Galiana\nFormation Git du Lab INSEE\nBonnes pratiques Git\nGitFlow\nD√©veloppement bas√© sur le tronc\n\n\n\n\nHome ‚Äî Introduction √† Git\n\n\n\nFigure¬†1: Source : ThinkR"
  },
  {
    "objectID": "doc/presentation.html",
    "href": "doc/presentation.html",
    "title": "Introduction √† Git",
    "section": "",
    "text": "Imaginez que vous faites parti d‚Äôune √©quipe de 5 personnes qui doit coder une application de jeux de cartes.\nComment faites-vous pour mettre en commun votre code ?\n\nVous d√©veloppez votre partie chacun de votre cot√© et √† la fin, vous mettez tout en commun\nVous envoyez vos programmes par mail\nVous cr√©er un dossier commun que vous mettez √† jour manuellement"
  },
  {
    "objectID": "doc/presentation.html#introduction",
    "href": "doc/presentation.html#introduction",
    "title": "Introduction √† Git",
    "section": "",
    "text": "Imaginez que vous faites parti d‚Äôune √©quipe de 5 personnes qui doit coder une application de jeux de cartes.\nComment faites-vous pour mettre en commun votre code ?\n\nVous d√©veloppez votre partie chacun de votre cot√© et √† la fin, vous mettez tout en commun\nVous envoyez vos programmes par mail\nVous cr√©er un dossier commun que vous mettez √† jour manuellement"
  },
  {
    "objectID": "doc/presentation.html#git",
    "href": "doc/presentation.html#git",
    "title": "Introduction √† Git",
    "section": "Git",
    "text": "Git\n\nVersionner son code\nHistorique des modifications\nTravail en √©quipe\nD√©centralis√©"
  },
  {
    "objectID": "doc/presentation.html#pourquoi-versionner",
    "href": "doc/presentation.html#pourquoi-versionner",
    "title": "Introduction √† Git",
    "section": "Pourquoi versionner ?",
    "text": "Pourquoi versionner ?\n\nQuelle est la bonne version ?\nComment faire pour revenir en arri√®re ?\nQui a √©crit ce code ? Quand ?\n\n\n\nles questions que l‚Äôon peut se poser en projet\n\n\n\nPour connaitre la v√©ritable derni√®re version\n\n\nimaginons que vous partagiez un dossier commun\nou encore que ce fichier soit dans des mails\n\n\n\nSans GitAvec GitObjectif\n\n\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ old\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport.txt\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_new.txt\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_v1.0.txt\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport_v1.2.txt\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_old.txt\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_2022.05.15.txt\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport_2022.05.15_new.txt\nüòï Quelle est la bonne version du fichier ?\n\n\nüòä Un seul fichier + l‚Äôhistorique des modifications\n‚îú‚îÄ‚îÄ‚îÄProjet info\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄLivrables\n‚îÇ     ‚îî‚îÄ‚îÄ‚îÄRapport.txt\n\nDate         Heure   Auteur      Message commit\n----         -----   ------      --------------\n2022.05.29   23h58   bianca      \"Version finale\"\n2022.05.29   23h40   archibald   \"j'avais oubli√© l'intro\"\n2022.05.29   21h32   tryphon     \"ajout partie 2\"\n2022.05.29   20h25   bianca      \"v1.1\"\n2022.05.29   20h12   tryphon     \"Cr√©ation du rapport\"\n\n\n\n\n\n\n\n\nFigure¬†1: Source : ThinkR\n\n\n\n\n\n\n\n\nAncien code comment√©\n\nSans GitAvec Git\n\n\n\n\nanalyse.R\n\nlibrary(ggplot2)\n\ndata &lt;- data.frame(x = seq(-4, 4, length=100))\ndata$y &lt;- dnorm(data$x)\n\n# plot(data$x, data$y, type=\"l\", lwd=2, col=\"blue\",\n#      main=\"Densit√© de la loi normale centr√©e r√©duite\",\n#      xlab=\"x\", ylab=\"Densit√©\")\n# abline(h=0, col=\"gray\")\n\nggplot(data, aes(x = x, y = y)) +\n  geom_line(color = \"blue\", size = 1) +\n  ggtitle(\"Densit√© de la loi normale centr√©e r√©duite\") +\n  xlab(\"x\") +\n  ylab(\"Densit√©\") +\n  theme_minimal()\n\n\n\n\n\nanalyse.R - Commit 05016ab - Date 2024.06.02 - Author tryphon\n\ndata$y &lt;- dnorm(data$x)\n\nplot(data$x, data$y, type=\"l\", lwd=2, col=\"blue\",\n     main=\"Densit√© de la loi normale centr√©e r√©duite\",\n     xlab=\"x\", ylab=\"Densit√©\")\nabline(h=0, col=\"gray\")\n\n\n\n\nanalyse.R - Commit f97f766 - Date 2024.06.04 - Author bianca\n\nlibrary(ggplot2)\n\ndata &lt;- data.frame(x = seq(-4, 4, length=100))\ndata$y &lt;- dnorm(data$x)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_line(color = \"blue\", size = 1) +\n  ggtitle(\"Densit√© de la loi normale centr√©e r√©duite\") +\n  xlab(\"x\") +\n  ylab(\"Densit√©\") +\n  theme_minimal()\n\n\n\n\n\nVous passez de R-base √† ggplot2"
  },
  {
    "objectID": "doc/presentation.html#la-solution",
    "href": "doc/presentation.html#la-solution",
    "title": "Introduction √† Git",
    "section": "La solution",
    "text": "La solution\n\n\n\n\n\ngit : connard en argot britannique"
  },
  {
    "objectID": "doc/presentation.html#historique",
    "href": "doc/presentation.html#historique",
    "title": "Introduction √† Git",
    "section": "Historique",
    "text": "Historique\n\nCr√©√© par Linus Torvalds en 2005\nPour g√©rer le d√©veloppement du noyau Linux\nLe standard incontournable de la gestion de versions\nAnciens outils : CVS, SVN\n\n\n\nStandard : produit qui s‚Äôest impos√© par l‚Äôusage (ex : Moteur de recherche Google, TCP/IP)"
  },
  {
    "objectID": "doc/presentation.html#logiciel",
    "href": "doc/presentation.html#logiciel",
    "title": "Introduction √† Git",
    "section": "Logiciel",
    "text": "Logiciel\n\nLogiciel Libre\nGratuit\nS‚Äôutilise en ligne de commande\n\n\n\n\n\n\n\nNote\n\n\n\nüò® Git s‚Äôutilise tr√®s majoritairement en ligne de commande dans un terminal Git Bash.\nüòÖ Pas de panique, quelques commandes simples suffisent largement pour travailler avec Git.\nIl existe aussi des interfaces graphiques mais elles sont souvent imparfaites et sources d‚Äôerreur.\n\n\n\n\nLogiciel libre :\n\ncode source est ouvert et disponible\npermettant √† quiconque de l‚Äôutiliser, le modifier, et le distribuer librement\ndiff√©rent de gratuit"
  },
  {
    "objectID": "doc/presentation.html#git-bash",
    "href": "doc/presentation.html#git-bash",
    "title": "Introduction √† Git",
    "section": "Git Bash",
    "text": "Git Bash\n\nTerminal de commande\nPlusieurs mani√®res de lancer (Menu Windows, clic droit, inclus dans VSCode)\n\n\n\nLors de l‚Äôinstallation de Git, choisissez le terminal Unix\n\n\nCommandes Unix\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\nls (ou ll)\nListe le contenu d‚Äôun r√©pertoire\n\n\npwd\nAffiche le r√©pertoire courant\n\n\ncd &lt;directory&gt;\nChange le r√©pertoire de travail courant\n\n\nmv &lt;src_file&gt; &lt;dest_file&gt;\nD√©place des fichiers ou des r√©pertoires\n\n\ncp &lt;src_file&gt; &lt;dest_file&gt;\nCopie un fichier ou un r√©pertoire\n\n\nmkdir &lt;directory&gt;\nCr√©e un nouveau r√©pertoire\n\n\nrm &lt;file_or_dir&gt;\nSupprime des fichiers ou des r√©pertoires\n\n\ntouch &lt;filename&gt;\nCr√©e un nouveau fichier vide\n\n\ncat &lt;filename&gt;\nAffiche le contenu d‚Äôun fichier\n\n\ngrep &lt;text&gt; &lt;filename&gt;\nRechercher dans un fichier\n\n\nman &lt;command_name&gt;\nManuel d‚Äôutilisation de la commande\n\n\n\n\n\nce qui est entre &lt; ‚Ä¶ &gt; est √† remplacer\nls : list\ncd : change directory\npwd : print working directory\nmkdir : make directory\npour √©diter un fichier : vi, nano\n\n\n\n\nCommandes Unix - Exemples\nPour chaque commande, de nombreuses options sont disponibles\nll *.py                  # liste tous les fichiers python du r√©pertoire courantes\nll *.py &gt; a.txt          # cr√©er un fichier a.txt contenant le r√©sultat de la commande\ncd ..                    # Se positionne dans le r√©pertoire parent\ncd ../projet/src         # remonter dans le dossier parent puis aller dans projet puis src\ncp /p/image.jpg .        # copie le fichier image.jpg du disque P dans le dossier courant (.)\n\n\n\n\n\n\nTip\n\n\n\n\n. repr√©sente le dossier courant\n.. repr√©sente le dossier parent"
  },
  {
    "objectID": "doc/presentation.html#versionner-son-code",
    "href": "doc/presentation.html#versionner-son-code",
    "title": "Introduction √† Git",
    "section": "Versionner son code",
    "text": "Versionner son code\n\nCr√©er un commit\n2 √©tapes pour cr√©er une nouvelle version :\n\ngit add &lt;filename&gt;\n\najouter le fichier √† l‚Äôindex (ie. dire √† Git de suivre ce fichier)\ngit add . : pour ajouter tous les fichiers\n\ngit commit -m \"&lt;mon message&gt;\"\n\n\n\ngit utilise la sauvegarde incr√©mentale\nil ne garde que les modifs apport√©es depuis le dernier commit\nmessage dans commit : ‚Äúfix:‚Äù, ‚Äúfeat:‚Äù\n\nhttps://talks.freelancerepublik.com/git-commandes-indispensables-developpeurs/\n\n\n\nExemple\n\nv0Je codev1Sch√©ma\n\n\nVoici votre d√©p√¥t avant de commencer √† coder.\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ src\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ main.py\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ doc\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport.txt\n\n\nVous avez modifi√© un fichier et cr√©√© un nouveau.\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ src\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ main.py               &lt;- fichier modifi√©\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ velo.py               &lt;- nouveau fichier\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ doc\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport.txt\n\n\nj‚Äôajoute les fichiers cr√©√©s ou modifi√©s √† l‚Äôindex :\n\ngit add .\n\nje cr√©e un point de sauvegarde\n\ngit commit -m \"ajout de l'utilisation de velo\"\n\n\n\n\n\nje viens de cr√©er un nouveau commit\nil est possible de consulter les commits pr√©c√©dents\n\ngit checkout &lt;commit_number&gt;\nles fichiers de votre d√©p√¥t sont alors dans l‚Äô√©tat o√π ils √©taient √† ce commit\n\n\n\n\n\n\n\n\nIgnorer des fichiers\n\n\n\n\n\n\nLe fichier .gitignore\n\n\n\n.gitignore est un fichier pr√©sent √† la racine du d√©p√¥t permettant de dire √† Git quels fichiers il doit ignorer. Par exemple :\n\nsi .gitignore contient *.csv ‚û°Ô∏è tous les fichiers csv seront ignor√©s par Git\nsi .gitignore contient data/ ‚û°Ô∏è le dossier data et son contenu sera ignor√©\n\nCela est utile, pour exclure par exemple du d√©p√¥t Git :\n\ndes fichiers contenant des mots de passe, des jetons d‚Äôacc√®s‚Ä¶\ndes fichiers de donn√©es volumineux qui n‚Äôont pas vocation √† √™tre versionn√©s\ndes fichiers de log"
  },
  {
    "objectID": "doc/presentation.html#travailler-en-√©quipe",
    "href": "doc/presentation.html#travailler-en-√©quipe",
    "title": "Introduction √† Git",
    "section": "Travailler en √©quipe",
    "text": "Travailler en √©quipe\n\nD√©p√¥t local et d√©p√¥t distant\n\n1 d√©p√¥t distant\n\nappel√© aussi remote\nh√©berg√© sur une forge (GitHub, GitLab, Bitbucket‚Ä¶)\n\nn d√©p√¥ts locaux\n\nclone sur votre machine\ngit permet la synchronisation des d√©p√¥ts\n\n\n\n\n\n\n\n\nRemarque\n\n\n\nIl est tout √† fait possible d‚Äôavoir plusieurs clones du m√™me d√©p√¥t sur son poste\n\n\n\n\nD√©p√¥t local et d√©p√¥t distant\n\n\n\n\n\n\nTip\n\n\n\nChaque d√©p√¥t est une copie int√©grale du projet\n\n\n\n\n\n\n\nflowchart LR\n    github[(D√©p√¥t distant)]\n    dev1[(D√©p√¥t local 1)]\n    dev2[(D√©p√¥t local 2)]\n    dev3[(D√©p√¥t local 3)]\n    dev4[(D√©p√¥t local 4)]\n    \n    github &lt;--&gt; dev1\n    github &lt;--&gt; dev2\n    dev3 &lt;--&gt; github\n    dev4 &lt;--&gt; github\n\n\n\n\n\n\n\n\nCommuniquer avec le d√©p√¥t distant\n\ngit pull : mettre √† jour son d√©p√¥t local √† partir du d√©p√¥t distant\ngit push : envoyer ses commits locaux sur le d√©p√¥t distant\n\n\n\n\n\n\n\nImportant\n\n\n\nIl est important de pousser et puller r√©guli√©rement son code pour garder son d√©p√¥t √† jour.\n\n\n\n\ngit push\n\n\n\n\n\nflowchart LR\n    dev1[(D√©p√¥t local)]\n    github[(D√©p√¥t distant)]\n    \n    dev1 == push ==&gt; github\n\n\n\n\n\n\nPour pouvoir pousser son code, il est n√©cessaire :\n\nd‚Äôavoir au pr√©alable cr√©√© au minimum un commit\nque votre d√©p√¥t local soit √† jour\n\npas de retard de version par rapport au d√©p√¥t distant\nsi ce n‚Äôest pas le cas, il faut commencer par git pull\n\n\n\n\ngit pull - conflit\nQue se passe-t-il si :\n\nAlice a modifi√© un fichier et pouss√© sa modification sur le d√©p√¥t distant\nVous avez √©galement modifi√© le m√™me fichier et vous faites un git pull pour mettre √† jour votre d√©p√¥t √† partir du d√©p√¥t distant\n\nüò® Un conflit ! Git ne sait pas choisir quelle est la bonne version entre la votre et celle d‚ÄôAlice.\n\n\ngit pull - conflit\nüòÖ Pas de panique ! Pour r√©soudre le conflit, il faut simplement :\n\nmodifier le fichier en question pour garder la bonne version\ngit add puis git commit pour valider la r√©solution du conflit\n\n\n\n2 versions s‚Äôopposent\n\nVersion d‚ÄôorigineVotre versionVersion d‚ÄôAlice\n\n\n\n\nvoiture.py\n\nclass Voiture:\n    def __init__(self, couleur):\n        self.couleur = \"bleu\"\n\n\n\n\n\nvoiture.py\n\nclass Voiture:\n    def __init__(self, couleur):\n        self.couleur = \"noir\"\n\n\n\n\n\nvoiture.py\n\nclass Voiture:\n    def __init__(self, couleur):\n        self.couleur = \"blanc\"\n\n\n\n\n\n\nR√©soudre un conflit\n\nContexteLe conflitR√©solution\n\n\n\nAlice a pouss√© son code avant vous\nVous fa√Ætes donc un git pull\n\nEn effet, vous devez imp√©rativement mettre √† jour votre d√©p√¥t local avant de pousser votre code\n\n2 versions s‚Äôopposent sur votre d√©p√¥t local\n\nself.couleur = \"noir\"\nself.couleur = \"blanc\"\n\nGit n‚Äôest pas capable de choisir laquelle est la bonne\n\n\n\n\nEn haut : votre version\nEn bas : celle provenant du d√©p√¥t distant\n\nclass Voiture:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n    def __init__(self, nom, couleur, vitesse_max):\n        self.couleur = \"noir\"\n=======\n    def __init__(self, nom, couleur, marque):\n        self.couleur = \"blanc\"\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a57ae9120dbf97dbab78f82db81f5fc8f48f3821\n\n\nPour r√©soudre ce conflit, 3 possibilit√©s :\n\nvous choisissez votre code\nvous choisissez celui d‚ÄôAlice\nvous choisissez un mix des 2\n\nEnsuite, vous validez, cr√©ez un commit et poussez le code (git add ., puis git commit -m \"&lt;message&gt;\" et git push)"
  },
  {
    "objectID": "doc/presentation.html#concepts",
    "href": "doc/presentation.html#concepts",
    "title": "Introduction √† Git",
    "section": "Concepts",
    "text": "Concepts\n\nClonage d‚Äôun d√©p√¥t\nConcept de commit\nCommandes Git Bash\ntxt"
  },
  {
    "objectID": "doc/presentation.html#git-quest-ce-que-cest",
    "href": "doc/presentation.html#git-quest-ce-que-cest",
    "title": "Introduction √† Git",
    "section": "Git, qu‚Äôest ce que c‚Äôest ?",
    "text": "Git, qu‚Äôest ce que c‚Äôest ?\nGit est un syst√®me de contr√¥le de version distribu√©, largement utilis√© dans le d√©veloppement logiciel pour suivre les modifications apport√©es aux fichiers source. Il permet aux d√©veloppeurs de travailler efficacement en √©quipe, de g√©rer les diff√©rentes versions du code, de collaborer sur un m√™me projet et de maintenir un historique complet des modifications. Git facilite le d√©veloppement collaboratif, tout en offrant performance, flexibilit√© et fiabilit√©.\n\nGit\n\nLogiciel de gestion de versions\nOpen source, gratuit, tr√®s tr√®s tr√®s utilis√© et pas qu‚Äôen informatique\ncr√©√© par Linus Torvalds, cr√©ateur √©galement du noyau Linux\n\nGit Bash\n\nTerminal pour √©crire des commandes git\nPossible d‚Äôouvrir via le menu D√©marrer, mais aussi inclus dans Visual Studio Code\n\nGitHub / GitLab\n\nplateforme de d√©veloppement collaboratif bas√©e sur Git\nh√©berge des d√©p√¥ts Git\nPropose d‚Äôautres fonctionnalit√©s (CICD, wiki, gestion des incidents‚Ä¶)"
  },
  {
    "objectID": "doc/presentation.html#git-√ßa-sert-√†-quoi",
    "href": "doc/presentation.html#git-√ßa-sert-√†-quoi",
    "title": "Introduction √† Git",
    "section": "Git, √ßa sert √† quoi ?",
    "text": "Git, √ßa sert √† quoi ?\n\nGit permet de suivre les modifications apport√©es aux fichiers et de g√©rer efficacement les diff√©rentes versions\nGit enregistre un historique complet de toutes les modifications, ce qui permet de retracer l‚Äô√©volution du projet, d‚Äôidentifier les changements sp√©cifiques et de revenir √† des versions ant√©rieures si n√©cessaire\nGit facilite la collaboration entre les membres d‚Äôune √©quipe en permettant √† plusieurs personnes de travailler simultan√©ment sur le m√™me projet\n\nGit va aider √† synchroniser ces d√©p√¥ts avec les commandes suivantes :\n\ngit clone : cr√©er une copie du d√©p√¥t commun sur son poste\ngit status : voir o√π l‚Äôon en est\ngit add : ajouter de nouveaux fichiers dans le d√©p√¥t\ngit commit : cr√©er un point de sauvegarde\ngit pull : r√©cup√©rer les √©ventuelles modifications du d√©p√¥t distant pour mettre √† jour son d√©p√¥t local\ngit push : partager ses mises √† jour locale sur le d√©p√¥t distant"
  },
  {
    "objectID": "doc/presentation.html#les-principales-commandes",
    "href": "doc/presentation.html#les-principales-commandes",
    "title": "Introduction √† Git",
    "section": "Les principales commandes",
    "text": "Les principales commandes\n\ngit clone\ngit clone est une commande de Git utilis√©e pour cr√©er une copie locale compl√®te d‚Äôun d√©p√¥t distant. Elle t√©l√©charge tous les fichiers et l‚Äôhistorique de version du d√©p√¥t distant vers votre syst√®me local dans un nouveau r√©pertoire.\nExemples :\n\ngit clone https://github.com:&lt;propietaire_depot&gt;/&lt;nom_du_depot&gt;.git\ngit clone git@github.com:ludo2ne/Git-tuto.git\ngit clone https://github.com/ludo2ne/Git-tuto.git\n\nIl y a deux principaux protocoles pour cloner un d√©pot git : ssh et https. Sans rentrer dans les d√©tails, l‚Äôutilisation suivante est pr√©conis√©e :\n\nssh : si vous souhaitez modifier le code et le partager (n√©c√©ssite d‚Äôavoir param√©tr√© une cl√© ssh)\nhttps : si vous voulez simplement avoir une copie locale du code sans partager vos modifications\n\n\n\ngit status\ngit status affiche l‚Äô√©tat actuel du r√©pertoire de travail et de l‚Äôindex. Elle montre :\n\nles fichiers modifi√©s pr√™t √† rentrer dans le prochain commit (*Changes to be committed)\nles autres fichiers modifi√©s (Changes not staged for commit)\nles fichiers non suivis (Untracked files)\n\nCette commande est √† utiliser sans mod√©ration pour voir l‚Äô√©tat du d√©p√¥t !\n\n\ngit add\ngit add est utilis√©e pour ajouter des fichiers √† l‚Äôindex, c‚Äôest √† dire des fichiers que vous souhaitez versionner.\nAutrement dit, si vous faites git add soleil.txt, vous dites √† git qu‚Äôil faut ajouter ce fichier au d√©p√¥t et le versionner.\ngit add . permet d‚Äôajouter tous les fichiers non suivis √† l‚Äôindex\n\n\ngit commit\ngit commit -m \"mon_message\" est utilis√©e pour cr√©er un point de sauvegarde.\nIl est conseill√© d‚Äô√©crire un message court, clair et compr√©hensible.\n\n\ngit pull\ngit pull r√©cup√®re les derni√®res modifications du d√©p√¥t distant et met √† jour votre d√©p√¥t local.\n\n\ngit push\ngit push envoie les modifications locales vers le d√©p√¥t distant.\n\n\n\n\n\n\nImportant\n\n\n\nPour pouvoir pousser, il est n√©cessaire :\n\nd‚Äôavoir au pr√©alable cr√©√© au minimum un commit\nque votre d√©p√¥t soit √† jour (pas de retard de version par rapport au d√©p√¥t distant)"
  },
  {
    "objectID": "doc/presentation.html#exemples",
    "href": "doc/presentation.html#exemples",
    "title": "Introduction √† Git",
    "section": "Exemples",
    "text": "Exemples\n\nExemple 1\n\nSi sur le d√©p√¥t distant, le fichier soleil.txt a √©t√© cr√©√© par une autre personne\nLa commande git pull permet de mettre √† jour son d√©p√¥t local\nLe fichier soleil.txt apparait sur votre d√©p√¥t local\n\n\n\nExemple 2\n\nEn local, vous avez cr√©√© le fichier temple.py et modifi√© le fichier soleil.txt\nFaites git add . pour dire √† Git que vous souhaitez valider vos modifications\nCr√©ez un point de sauvegarde avec la commande git commit -m \"message de mise √† jour\"\nPuis, la commande git push permet de partager cette nouvelle version sur le d√©p√¥t distant\nSur le d√©p√¥t distant, les 2 fichiers seront cr√©√©s ou mis √† jour\n\nPour g√©rer les versions, Git utilise des points de sauvegarde appel√©s commits. Grace √† cela, il est possible de consulter les versions ant√©rieures des fichiers."
  },
  {
    "objectID": "doc/presentation.html#les-erreurs-courantes",
    "href": "doc/presentation.html#les-erreurs-courantes",
    "title": "Introduction √† Git",
    "section": "Les erreurs courantes",
    "text": "Les erreurs courantes\n\nfichier disparu\nSi vous venez de faire un git push et que votre fichier n‚Äôapparait pas sur le d√©p√¥t distant, c‚Äôest probablement parce que vous avez oubli√© de l‚Äôajouter √† l‚Äôindex avec git add &lt;mon_fichier&gt;.\nAutre possibilit√© : votre fichier est ignor√© par git car il fait parti du .gitignore\n\n\ngit push rejected\n! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs\nhint: Updates were rejected because the remote contains work that you do not\nhint: have locally. This is usually caused by another repository pushing to\nhint: the same ref. If you want to integrate the remote changes, use\nhint: 'git pull' before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nLe message d‚Äôerreur est assez explicite. Le d√©p√¥t distant a √©t√© modifi√© et votre d√©p√¥t local n‚Äôest donc plus √† jour.\nVous devez commencer par mettre √† jour votre d√©p√¥t local avec git pull avant de pousser votre code"
  },
  {
    "objectID": "doc/presentation.html#bibliographie",
    "href": "doc/presentation.html#bibliographie",
    "title": "Introduction √† Git",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nGit : un √©l√©ment essentiel au quotidien, Python pour la datascience, Lino Galiana\nFormation Git du Lab INSEE\nBonnes pratiques Git\nGitFlow\nD√©veloppement bas√© sur le tronc\n\n\n\n\nFigure¬†1: Source : ThinkR"
  }
]
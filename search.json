[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tuto Git",
    "section": "",
    "text": "Une pr√©sentation de Git\n\nQu‚Äôest ce que Git ?\n√Ä quoi √ßa sert ?\nQuels sont les avantages de Git ?\n\nUn TP pour d√©couvrir Git\n\nCommandes Unix\nGit Bash\nParam√©trage de Git\nCr√©er un d√©p√¥t\nCommandes principales\n\n\nPour aller plus loin :\n\nLes branches\nGitFlow\nIng√©ration continue\nOpen Source"
  },
  {
    "objectID": "index.html#contenu",
    "href": "index.html#contenu",
    "title": "Tuto Git",
    "section": "",
    "text": "Une pr√©sentation de Git\n\nQu‚Äôest ce que Git ?\n√Ä quoi √ßa sert ?\nQuels sont les avantages de Git ?\n\nUn TP pour d√©couvrir Git\n\nCommandes Unix\nGit Bash\nParam√©trage de Git\nCr√©er un d√©p√¥t\nCommandes principales\n\n\nPour aller plus loin :\n\nLes branches\nGitFlow\nIng√©ration continue\nOpen Source"
  },
  {
    "objectID": "doc/gitflow.html",
    "href": "doc/gitflow.html",
    "title": "Gitflow",
    "section": "",
    "text": "üöß\nWorkflow Gitflow\nvs\nD√©veloppement bas√© sur le tronc"
  },
  {
    "objectID": "doc/tp-ensai.html",
    "href": "doc/tp-ensai.html",
    "title": "Git TP",
    "section": "",
    "text": "Note\n\n\n\nLes consignes de ce TP sont donn√©es pour une utilisation de GitHub.\nIl est possible de r√©aliser ce TP avec GitLab dont l‚Äôinterface est tr√®s ressemblante.\n‚ö†Ô∏è Il y a tout de m√™me quelques diff√©rences, par exemple : GitHub Repository = GitLab Projet"
  },
  {
    "objectID": "doc/tp-ensai.html#√†-faire-√†-la-maison",
    "href": "doc/tp-ensai.html#√†-faire-√†-la-maison",
    "title": "Git TP",
    "section": "√Ä faire √† la maison",
    "text": "√Ä faire √† la maison\n\nLire l‚Äôintroduction\nCr√©er un compte sur GitHub\n\nGitHub &gt; Sign up\nou avec ce lien direct\n\n\n\n\n\n\n\n\nTipAjoutez un mail perso\n\n\n\nLors de la cr√©ation de compte, si vous utilisez votre adresse mail ENSAI, nous vous conseillons d‚Äôajouter un mail personnel :\n\nGitHub &gt; Settings ‚öôÔ∏è &gt; Email (lien direct)\n\nComme vous ne serez pas √©tudiant toute votre vie, cela vous √©vitera de perdre votre acc√®s par la suite."
  },
  {
    "objectID": "doc/tp-ensai.html#introduction",
    "href": "doc/tp-ensai.html#introduction",
    "title": "Git TP",
    "section": "Introduction",
    "text": "Introduction\nGit est un formidable outil de versionnage de fichiers qui va vous permettre de conserver efficacement l‚Äôhistorique de votre code aussi bien si vous travaillez seul mais √©galement quand vous travaillez √† plusieurs.\nCet historique est conserv√© dans ce que l‚Äôon appelle un d√©p√¥t git.\nSa conception d√©centralis√©e fait qu‚Äôil est quasi impossible de perdre une donn√©e d√©finitivement avec git. En particulier, la perte totale d‚Äôun ordinateur h√©bergeant votre code ne repr√©sentera qu‚Äôune perte minime de code si vous utilisez git correctement.\nEn outre, de nombreux outils de CI/CD (Continuous Int√©gration / Continuous Deployment) qui rendent possible l‚Äôautomatisation de l‚Äôint√©gration et du d√©ploiement de votre code s‚Äôappuient sur un d√©p√¥t git.\n\nConcepts Cl√©s\nComme tout logiciel, git demande un peu d‚Äôapprentissage, et de la pratique.\nPour commencer, nous aurons besoin de certains concepts essentiels pour une utilisation efficace. Par sa conception d√©centralis√©e, un d√©p√¥t git peut exister en plusieurs endroits en m√™me temps :\n\nsur notre machine\nsur chaque machine des membre du projet\nou sur un serveur h√©bergeant le projet\n\nNous parlerons de la copie distante (remote en anglais) du d√©p√¥t dans le cas du serveur distant. En g√©n√©ral, une seule copie distante est utilis√©e, mais par sa nature d√©centralis√©e, plusieurs copies distantes sont possibles (possibilit√© non incluse dans ce TP).\nLa copie sur notre machine est la copie locale (local en anglais). Il s‚Äôagit de toutes les informations du d√©p√¥t concernant l‚Äôhistorique de ses fichiers, et les m√©tadonn√©es du d√©p√¥t. Une distinction subtile est alors faite entre la copie locale et la copie de travail (working copy en anglais) : nos modifications sur les fichiers du d√©p√¥t n‚Äôint√©grerons la copie locale qu‚Äô√† notre demande explicite. Cette int√©gration sera alors effectu√©e par l‚Äôajout d‚Äôune entr√©e √† l‚Äôhistorique du d√©p√¥t.\n\n\nProgramme\nDans ce TP, nous allons cr√©er un d√©p√¥t distant et deux d√©p√¥t locaux. Ensuite nous allons les faire √©voluer et les synchroniser.\n\n\n\n\n\nflowchart\n    github[(Remote)]\n    dev1[(Local 1)]\n    dev2[(Local 2)]\n    \n    github &lt;--&gt; dev1\n    github &lt;--&gt; dev2\n\n\n\n\n\n\nPour utiliser git, donc pour g√©rer un d√©p√¥t, nous avons acc√®s √† de nombreuses commandes. Pour ce TP de d√©couverte, les commandes suivantes suffiront :\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ngit clone &lt;url&gt;\nCr√©er un d√©p√¥t local sur son poste\n\n\ngit status\nVoir o√π l‚Äôon en est\n\n\ngit add &lt;file&gt;\nAjouter pour le prochain commit\n\n\ngit commit -m \"&lt;msg&gt;\"\nCr√©er un point de sauvegarde\n\n\ngit pull\nd√©p√¥t local ‚û°Ô∏è d√©p√¥t distant\n\n\ngit push\nd√©p√¥t local ‚¨ÖÔ∏è d√©p√¥t distant"
  },
  {
    "objectID": "doc/tp-ensai.html#environnement-de-travail",
    "href": "doc/tp-ensai.html#environnement-de-travail",
    "title": "Git TP",
    "section": "1 Environnement de travail",
    "text": "1 Environnement de travail\nLes commandes seront saisies dans un terminal Git Bash.\nVous allez utiliser un service Vscode-python du datalab. Celui-ci inclus Git Bash.\n\nConnectez-vous √† un datalab\n\nhttps://onyxia.lab.groupe-genes.fr/\nhttps://datalab.sspcloud.fr/ (create an account using firstname.lastname@eleve.ensai.fr)\n\n\nDurant ce TP, vous allez transf√©rer du code entre votre d√©p√¥t local (service VSCode) et votre d√©p√¥t distant (sur GitHub). Pour valider ces transfert un processus d‚Äôauthentification est naturellement requis.\n\n1.1 G√©n√©ration d‚Äôun Token\n\n\n\n\n\n\nNoteCe que vous allez faire\n\n\n\nCe param√©trage n‚Äôest √† faire qu‚Äôune seule fois, jusqu‚Äô√† expiration du jeton.\n\nG√©n√©rer un jeton sur GitHub\nD√©clarer ce jeton sur le datalab\n\nAinsi, √† chaque fois que vous lancerez un service du datalab :\n\nLe jeton sera inject√© dans une variable d‚Äôenvironnement\nvous pourrez donc le r√©cup√©rer et l‚Äôutiliser pour communiquer avec GitHub de mani√®re s√©curis√©e\n\n\n\n\nConnectez-vous √† votre compte GitHub\nAllez sur ce lien : Personal Access Token\n\npour cr√©er un nouveau token classic\nNote: for ENSAI datalabs\nExpiration: 30/06/2026\ncochez repo and workflow\nGenerate token\n\nCopiez le token (ghp_xxxxxxxxxx)\n\n\n\n\n\n\n\nCaution\n\n\n\nAttention sa valeur ne sera affich√©e qu‚Äôune seule fois. En cas de perte, il faut le supprimer et en recr√©er un nouveau.\n\n\nNous allons maintenant d√©clarer ce jeton sur votre compte du datalab.\n\n\n1.2 D√©claration du Token au Datalab\n\nAllez dans Mon Compte, puis onglet Git\nCollez le token\n\nGr√¢ce √† ce jeton, vous pouvez maintenant communiquer avec vos d√©p√¥ts GitHub depuis n‚Äôimporte quel service du datalab.\nAujourd‚Äôhui nous allons utiliser un service VSCode. Ce logiciel sera utilis√© pour la majorit√© des cours d‚Äôinformatique de l‚ÄôENSAI.\nC‚Äôest un IDE (Integrated Development Environment) i.e.¬†une application qui offre des outils complets pour le d√©veloppement logiciel (√©diteur de Code, compilateur / interpr√©teur, gestionnaire de projet, terminal Int√©gr√©, nombreuses extensions‚Ä¶)\n\nLancez, puis ouvrez un service Vscode-python\n\n\n\n\n\n\n\nImportant√† la fin du TP\n\n\n\nN‚Äôoubliez pas de supprimer votre service !\nRappel sur le principe des datalabs :\n\nDes ressources sont √† disposition de tous\nUn service lanc√© = des ressources r√©serv√©es (cpu, ram, Go‚Ä¶)\n\nUne fois votre travail termin√© :\n\nsauvegardez votre code : envoi au remote avec git\nexportez vos r√©sultats : par exemple en utilisant le stockage S3\nlib√©rez ces ressources : supprimez vos service\n\n\n\n\nOuvrez un terminal\n\n3 petits traits horizontaux &gt; Terminal &gt; New\nou CTRL + √π"
  },
  {
    "objectID": "doc/tp-ensai.html#git-bash-et-unix",
    "href": "doc/tp-ensai.html#git-bash-et-unix",
    "title": "Git TP",
    "section": "2 Git Bash et Unix",
    "text": "2 Git Bash et Unix\nAvant de nous lancer avec git, prenons quelques minutes pour d√©couvrir le terminal Git Bash et les principales commandes Unix.\nEn tant qu‚Äôing√©nieur, cela vous sera sans doute utile un jour.\nPour vous aider, voici la liste des commandes principales.\n\n2.1 Un terminal ?\nUn terminal est une interface texte qui permet de donner des commandes √† l‚Äôordinateur.\nC‚Äôest une alternative √† la souris pour naviguer, cr√©er des fichiers, lancer des programmes.\nGit Bash est un terminal qui :\n\n√©mule un environnement type Linux/Unix\ninclus les commandes Git\n\n\n\n\n\n\n\nTip\n\n\n\nLe terminal, c‚Äôest sobre, c‚Äôest rapide, c‚Äôest efficace.\nLe terminal reste un outil tr√®s utilis√© en informatique, m√™me √† l‚Äô√®re du tout clic-bouton. Il permet d‚Äôaller droit au but sans passer par des menus parfois longs et compliqu√©s.\nRapide et l√©ger, il s‚Äôadapte aussi bien aux petites t√¢ches qu‚Äôaux op√©rations plus techniques.\nLes d√©veloppeurs et administrateurs l‚Äôutilisent au quotidien pour automatiser et gagner du temps.\n\n\n\n\n2.2 D√©mystifions la b√™te\n\nDans le terminal, vous avez :\n\nun prompt (username, host, folder)\n\nvous √™tes connect√© avec l‚Äôutilisateur onyxia sur la machine virutelle vscode-python-345194-0\nvous √™tes positionn√© dans le dossier ~/work (~ est le dossier personnel de l‚Äôutilisateur)\nil se termine par un $\n\n√† c√¥t√©, vous pouvez √©crire une commande\nen dessous, vous avez le r√©sultat de la commande\n√† droite, vous avez vos terminaux (c‚Äôest possible d‚Äôen ouvrir plusieurs)\n\n\n\n2.3 Premi√®res commandes\nCommen√ßons par quelques commandes simples :\n\nAffichez le r√©pertoire courant\nPositionnez-vous dans le dossier parent\nListez les fichiers et dossiers\nRetournez dans le dossier work\nCr√©ez deux dossiers nomm√©s clone1 et clone2\n\n\n\n2.4 Fichiers\nFaisons maintenant quelques manipulations sur des fichiers :\n\nCr√©ez un fichier a.txt contenant le r√©sultat de la commande env\n\nenv : liste des variables d‚Äôenvironnement\nenv &gt; a.txt\n\nCr√©ez une copie de ce fichier que vous nommerez b.txt\nListez les fichiers du dossier courant\nRenommez a.txt en c.txt\nAffichez le contenu du fichier b.txt\nFiltrez le contenu du fichier b.txt pour n‚Äôafficher que les lignes contenant GIT\n\ncat b.txt | grep GIT\n\n\nVous devriez retrouver ici votre token. Les variables d‚Äôenvironnement sont un syst√®me cl√©-valeur, pour r√©cup√©rer votre jeton :\n\necho $GIT_PERSONAL_ACCESS_TOKEN\n\n\n\n\n\n\n\nTipRaccourcis tr√®s utiles\n\n\n\n\nLes fl√®ches ‚¨ÜÔ∏è et ‚¨áÔ∏è pour naviguer dans l‚Äôhistorique des derni√®res commandes et √©viter de retaper 10 fois la m√™me commande\nTAB pour l‚Äôautocompl√©tion\n\nTapez cat b, puis appuyez sur la touche TAB\nIl n‚Äôy a qu‚Äôun seul fichier commen√ßant par b donc l‚Äôautocompl√©tion s‚Äôeffectue\nLa touche TAB se situe √† gauche du clavier dessous ¬≤ et dessus üîí"
  },
  {
    "objectID": "doc/tp-ensai.html#d√©p√¥ts-git",
    "href": "doc/tp-ensai.html#d√©p√¥ts-git",
    "title": "Git TP",
    "section": "3 D√©p√¥ts Git",
    "text": "3 D√©p√¥ts Git\nPassons maintenant au th√®me central de ce TP : Git et la synchronisation des d√©p√¥ts.\nAvant de se lancer, ex√©cutez ces deux commandes qui vous √©viterons peut-√™tre d‚Äô√™tre bloqu√© par la suite :\n\ngit config --global core.editor \"code-server --wait\"\ngit config --global core.mergeoptions --no-edit\n\nCommen√ßons par cr√©er un remote sur GitHub.\n\n3.1 Cr√©ez un d√©p√¥t distant\n\nCr√©ez un nouveau Repository sur GitHub\n\nGitHub &gt; Repositories &gt; New\nRepository name : tp-git\nVisibility Level : Private\nCochez Add a README file\nAdd .gitignore : Python\nChoose a license : MIT Licence\nCliquez sur Create Repository\n\n\nVotre remote est maintenant cr√©√©.\n\n\n\n\n\n\nImportant\n\n\n\nDans le cadre de ce TP, il est interdit d‚Äô√©diter des fichiers directement sur GitHub. Ce n‚Äôest pas une bonne pratique.\nToutes les modifications doivent √™tre faites sur votre clone local et ensuite envoy√©es vers GitHub.\n\n\n\n\n3.2 Priv√©, public ?\nVous avez d√©clar√© votre d√©p√¥t Priv√©. C‚Äôest adapt√© dans ce cas, car nous sommes dans le cadre d‚Äôun exercice o√π l‚Äôid√©e n‚Äôest pas de faire du code propre mais de pratiquer.\n√Ä l‚Äôinverse, n‚Äôh√©sitez pas √† d√©clarer public vos travaux aboutis, non confidentiels.\n\n\n\n\n\n\n\n\nCrit√®re\nD√©p√¥t Public\nD√©p√¥t Priv√©\n\n\n\n\nVisibilit√©\nTout le monde peut voir\nUniquement les personnes invit√©es\n\n\nCollaboration externe\nOuvertes (issues, forks, PR)\nRestreinte √† l‚Äô√©quipe\n\n\nConfidentialit√©\nAucune, tout est visible\nS√©curis√©, acc√®s contr√¥l√©\n\n\nUsage typique\nProjets Open Source, propres, aboutis\nTravaux priv√©s, sandbox\n\n\n\n\n\n\n\n\n\nNoteInvitations\n\n\n\nQue le d√©p√¥t soit public ou priv√©, vous devez faire parti des collaborateurs pour y contribuer. D√©p√¥t public signifie que tout le monde peut le voir mais pas le modifier directement.\nPour autoriser des personnes √† √©crire sur votre d√©p√¥t vous devez les inviter :\n\nSur la page du repo &gt; Settings &gt; Collaborators &gt; Add people\n\n\n\n\n\n3.3 Cr√©ez un d√©p√¥t local\nVous allez maintenant cr√©er une copie locale du remote en le clonant.\nSur la page GitHub de votre repo :\n\nCliquez sur Code\nCopiez la ligne Clone with HTTPS\n\nVous obtenez une url de ce type : https://github.com/&lt;username&gt;/tp-git.git\n\nModifiez-l√† pour y int√©grer votre token avant github.com\n\nhttps://$GIT_PERSONAL_ACCESS_TOKEN@github.com/&lt;username&gt;/tp-git.git\n\n\nDans le terminal Git Bash de VSCode :\n\nPositionnez-vous dans le dossier clone1\nCr√©ez votre clone\n\ngit clone &lt;url ci-dessus&gt;\n\nListez les fichiers et dossiers du r√©pertoire courant\n\nNormalement, le dossier tp-git est apparu\nC‚Äôest le clone du repo que vous venez de cr√©er\n\nEntrez dans ce dossier\n\nVous √™tes maintenant dans un repo git, vous pouvez donc ex√©cuter des commandes git !\n\nV√©rifiez sur quel d√©p√¥t distant votre clone est branch√©\n\ngit remote -v\nVous devez voir ici votre token et l‚Äôurl du remote\n\nListez le contenu\nComparez √† ce que vous avez sur GitHub : https://github.com/&lt;username&gt;/tp-git"
  },
  {
    "objectID": "doc/tp-ensai.html#premiers-pas",
    "href": "doc/tp-ensai.html#premiers-pas",
    "title": "Git TP",
    "section": "4 Premiers pas",
    "text": "4 Premiers pas\nDans ce d√©p√¥t local, vous allez commencer par cr√©er de nouveaux dossiers et fichiers sur votre d√©p√¥t local.\n\nCr√©ez un dossier src\nDans ce dossier, cr√©ez un fichier voiture.py\n\ntouch src/voiture.py\n\nOuvrez ce fichier, collez ce code et enregistrez\n\n\n\nvoiture.py\n\nclass Voiture:\n    \"\"\"Classe repr√©sentant une voiture.\n    \n    Attributes\n    ----------\n    nom : str\n        le nom de la voiture.\n    couleur : str\n        la couleur de la voiture.\n    vitesse : int\n        la vitesse de la voiture (initalis√©e √† 0).\n    \"\"\"\n    def __init__(self, nom, couleur):\n        \"\"\"Constructeur\"\"\"\n        self.nom = nom\n        self.couleur = couleur\n        self.vitesse = 0\n    \n    def __str__(self):\n      return f\"La voiture {self.nom} de couleur {self.couleur} roule √† {self.vitesse} km/h.\"  \n\nVous venez de cr√©ez quelques nouveaux √©l√©ments sur votre clone, envoyons-les maintenant au remote.\n\n4.1 Add, Commit et Push\n\n\n\n\n\n\nImportant\n\n\n\nC‚Äôest l‚Äôenchainement de commandes qu‚Äôil faut connaitre ! (avec une pinc√©e de status si besoin)\n\n\nAvant de commencer, v√©rifiez dans votre terminal que vous √™tes bien positionn√© √† la racine de votre d√©p√¥t i.e.¬†votre dossier courant est tp-git.\nDans le terminal Git Bash, ex√©cutez les commandes suivantes :\n\ngit status\n\ndiff√©rences entre la version de travail du code et le commit le plus r√©cent\nle dossier src apparait dans Untracked files\ncela signifie que Git a rep√©r√© ce dossier mais qu‚Äôil ne le versionnera pas\n\ngit add src\n\npour faire reconnaitre ce dossier et le placer la zone de transit\nce dossier et ses fichiers seront versionn√©s dans le prochain commit\n\ngit status\n\nChanges to be committed : new file: src/voiture.py\nle fichier est maintenant reconnu par Git\n\n\nNous allons maintenant cr√©er un point de sauvegarde :\n\ngit commit -m \"Cr√©ation classe voiture\"\n\nentre les guillemets, mettez un message court et explicite. Ce message est obligatoire !\n\ngit status\n\nYour branch is ahead of ‚Äòorigin/main‚Äô by 1 commit\ni.e.¬†votre d√©p√¥t local est en avance d‚Äôun commit par rapport au remote\n\n\nEnfin, nous souhaitons envoyer notre commit vers le remote.\n\ngit push\n\npousse vos commits vers le d√©p√¥t distant.\n‚ö†Ô∏è si vous avez modifi√© des fichiers qui ne sont pas dans un commit, ces modifications n‚Äôapparaitront pas sur le d√©p√¥t distant\n\n\nAllez sur la page GitHub de votre repo et v√©rifiez que vos fichiers sont bien arriv√©s.\n\n\n\n\n\n\nWarning√áa ne marche pas\n\n\n\nVous avez tout bien fait mais votre fichier voiture.py n‚Äôest pas √† jour sur GitHub. üòï\n\nest-ce que votre fichier voiture.py a bien √©t√© enregistr√© ?\n\nsinon recommencez (Add, Commit, Pull et Push). üò©\n\nEst-ce que vous √™tes bien connect√© au remote avec votre token ?\n\ngit remote -v pour v√©rifier\ngit remote set-url origin https://$GIT_PERSONAL_ACCESS_TOKEN@github.com/&lt;username&gt;/tp-git.git\n\n\n\n\nPour r√©sumer voil√† ce que vous avez fait :\n\n\n\n\n\n\nsequenceDiagram\n    Workspace -&gt;&gt; Staging index: add\n    Staging index -&gt;&gt; Local repository: commit\n    Local repository -&gt;&gt; Remote repository: push\n    Remote repository -&gt;&gt; Workspace: pull\n\n\n\n\n\n\n\nRetournez sur VSCode :\n\nAjoutez √† la fin du fichier voiture.py ce code et enregistrez\n\n\n\nvoiture.py\n\n    def accelere(self, increment) -&gt; None:\n        \"\"\"Augmente la vitesse de la voiture.\n        L'incr√©ment maximal est de 10 km/h.\n        La Vitesse maximale est de 130 km/h.\n\n        Parameters\n        ----------\n        increment : int\n            la valeur de l'acc√©l√©ration demand√©e (limit√© √† 10)\n        \"\"\"\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\nDans le terminal Git Bash :\n\ngit status\n\nle fichier voiture.py a √©t√© modifi√©\n\ngit diff pour voir les diff√©rence depuis le dernier commit\n\nq pour quitter\n\ngit add . pour ajouter toutes les modifications de tous les fichiers au prochain commit\nComme pr√©c√©demment, faites un commit\n\n\n\n4.2 Historique du d√©p√¥t\nPour acc√©der √† l‚Äôhistorique d‚Äôun repo :\n\nSur GitHub, vous pouvez consulter l‚Äôhistorique du d√©p√¥t distant\n\nen cliquant sur Commit (en dessous du bouton Code)\nhistorique d‚Äôun fichier en ouvrant ce fichier et en cliquant sur History\n\nSur votre d√©p√¥t local avec git log\n\nce n‚Äôest pas ais√©ment lisible\nheureusement il est possible d‚Äôam√©liorer cette commande\n\n\n\n\n\n\n\n\nTipPour avoir un r√©sultat plus agr√©able\n\n\n\n\nPretty logAlors ?Alias\n\n\ngit log --pretty=format:'%C(yellow)%h %C(green)%ad %C(blue)%an%C(green)%d %Creset%s' --date=relative\n\nchaque ligne repr√©sente un commit\nla premi√®re colonne correspond au num√©ro court de commit\nvous remarquez un d√©calage entre HEAD et origin/HEAD (entre d√©p√¥t local et distant)\n\nHEAD : pointeur qui repr√©sente la version actuelle du code dans votre espace de travail\nmain (ou master) : nom de la branche principale par d√©faut\norigin : d√©signe le d√©p√¥t distant\n\nq pour quitter\n\n\n\n\n\n\nCe n‚Äôest pas √©vident de se souvenir de commandes aussi longues.\nUne solution est de cr√©er un alias :\n\nCr√©er par exemple l‚Äôalias blog (beautiful log)\n\ngit config --global alias.blog \"log --pretty=format:'%C(yellow)%h %C(green)%ad %C(blue)%an%C(green)%d %Creset%s' --date=relative\"\n\nMaintenant git blog suffit pour lancer la m√™me commande\n\n\n\n\n\n\n\nFaites un push pour envoyer votre commit vers le d√©p√¥t distant\nRegardez de nouveau votre historique\n\nles 2 d√©p√¥ts sont de nouveau synchronis√©s\n\n\n\n\n4.3 Exercice d‚Äôapplication\nC‚Äôest le moment d‚Äôappliquer ce que nous venons de voir, √† vous :\n\nCr√©ez un fichier src/test_voiture.py avec ce code\n\n\n\ntest_voiture.py\n\nfrom voiture import Voiture\n\nclass TestVoiture:\n\n    def test_accelere_incremente_vitesse():\n        # GIVEN\n        v = Voiture(\"4L\", \"verte\")\n        \n        # WHEN\n        v.accelere(5)\n        \n        # THEN\n        assert v.vitesse == 5\n\n    def test_accelere_limite_increment():\n        # GIVEN\n        v = Voiture(\"4L\", \"verte\")\n        \n        # WHEN\n        v.accelere(20)\n        \n        # THEN\n        assert v.vitesse == 10\n\n\nEnvoyez le sur la copie distante de votre projet GitHub\nCr√©ez un fichier requirements.txt avec le contenu suivant\n\nc‚Äôest le nom standard du fichier qui liste les packages python n√©cessaires au projet\n\n\n\n\nrequirements.txt\n\npylint\npytest\n\n\nEnvoyez le sur la copie distante de votre projet GitHub\nAffichez votre historique\n\n\n\n4.4 Le fichier .gitignore\n\n\n\n\n\n\nNote\n\n\n\nCertains fichiers ont vocation √† rester seulement sur votre d√©p√¥t local, par exemple :\n\nfichiers de donn√©es\nfichiers contenant des mots de passe\nfichiers de logs\n\n\n\nGr√¢ce au .gitignore, vous pouvez dire √† Git d‚Äôignorer certains fichiers.\n\nCr√©er un dossier data √† la racine de votre d√©p√¥t\nDans ce dossier, cr√©er un fichier joueuses.csv avec ce contenu\n\n\n\njoueuses.csv\n\nid_joueuse,nom,prenom,date_naissance,pays\n1,Sebag,Marie,1986-10-15,France\n2,Polgar,Judit,1976-07-23,Hongrie\n3,Hou,Yifan,1994-02-27,Chine\n4,Kosteniuk,Alexandra,1984-04-23,Suisse\n5,Ju,Wenjun,1991-01-31,Chine\n\n\nRegardez l‚Äô√©tat du d√©p√¥t\n\nle dossier data apparait dans les Untracked files\n\nOuvrez le fichier .gitignore\n√Ä la fin ajoutez une ligne avec data/\nRegardez l‚Äô√©tat du d√©p√¥t\n\nle dossier data n‚Äôapparait plus, car maintenant Git ignore ce dossier et son contenu\nil est bien pr√©sent dans votre d√©p√¥t local mais il n‚Äôarrivera donc jamais sur le d√©p√¥t distant\n\n\nAutre exemple : lors du projet info de 2e ann√©e, votre application python se connectera √† une base de donn√©es. Or les infos de connexions √† cette bdd ne devront pas atterrir sur GitHub !"
  },
  {
    "objectID": "doc/tp-ensai.html#simulation-de-travail-en-groupe",
    "href": "doc/tp-ensai.html#simulation-de-travail-en-groupe",
    "title": "Git TP",
    "section": "5 Simulation de travail en groupe",
    "text": "5 Simulation de travail en groupe\nPour les questions suivantes, vous allez avoir besoin de 2 d√©p√¥ts locaux branch√©s sur un m√™me d√©p√¥t distant. Il y a 2 possibilit√©s :\n\nsoit vous travaillez en b√Ænome (vous avez chacun votre d√©p√¥t local)\nsoit vous fa√Ætes seul (mais vous g√©rez 2 d√©p√¥ts locaux diff√©rents)\n\n\n5.1 Mise en place des clones\n\n\n\n\n\n\nNoteSi vous travaillez √† 2\n\n\n\nUn des deux membres va cr√©er un d√©p√¥t local √† partir du d√©p√¥t distant de l‚Äôautre.\n\nüê∏ fournit √† üê± l‚Äôadresse https de son repo\nüê∏ donne acc√®s √† üê± √† son repo\n\npage GitHub du repo &gt; Settings &gt; Collaborators\nAdd people\n\nüê± clone le d√©p√¥t distant\n\ncd /home/onyxia/work/clone2\ngit clone https://$GIT_PERSONAL_ACCESS_TOKEN@github.com/&lt;username_frog&gt;/tp-git.git\ncd tp-git pour entrer dans le d√©p√¥t Git\n\n\n\n\n\n\n\n\n\n\nNoteSi vous fa√Ætes seul\n\n\n\n\n\n\nOuvrez un nouveau terminal\ncd /home/onyxia/work/clone2\nClonez √† nouveau votre d√©p√¥t distant\n\nn‚Äôoubliez pas d‚Äôinclure votre token\n\npuis cd tp-git pour entrer dans le d√©p√¥t Git\n\nVous allez ainsi avoir deux clones dans votre service VSCode. Une autre alternative pour l‚Äôexercice serait de lancer un autre service VSCode-python et d‚Äôy cr√©er un clone.\nüí° Pour ne pas vous-y perdre, n‚Äôh√©sitez pas √† renommer vos dossiers et vos terminaux.\n\n\n\n\n\n5.2 Synchronisation des d√©p√¥ts\nIci, un membre va coder et l‚Äôautre va devoir r√©cup√©rer son code.\n\nüê∏ cr√©e un fichier src/moto.py avec le code suivant dans son d√©p√¥t local :\n\n\n\nmoto.py\n\nclass Moto:\n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n        \n    def accelere(self, increment):\n        if increment &gt; 15:\n            increment = 15\n        self.vitesse = min(150, self.vitesse + increment)\n\n\nüê∏ envoie ce fichier vers le d√©p√¥t distant : add, commit et push\nüê± fait ensuite git pull\n\nil r√©cup√©re le fichier moto.py dans son d√©p√¥t local\n\nInversez les r√¥les (optionnel)\n\nüê± cr√©e un fichier velo.py et le pousse\nüê∏ le r√©cup√®re\n\n\nNous allons maintenant illustrer le fait que votre d√©p√¥t local doit √™tre imp√©rativement √† jour pour pousser du code.\n\n\n5.3 Coder en √©quipe\nMaintenant les deux membres vont coder en m√™me temps mais sur des fichiers diff√©rents.\n\nAttention : 1, 2, 3, partez üèÅ\n\n\nüê± cr√©e le fichier src/trottinette.py en s‚Äôinspirant de moto.py\nüê∏ cr√©e un dossier doc et √† l‚Äôint√©rieur le fichier state-diag.md avec ce code\n\n\n\nstate-diag.md\n\n```mermaid\nstateDiagram\n    login : Se connecter\n    menu_joueur : Menu Joueur\n    logon : Cr√©er un compte      \n    [*] --&gt; Accueil      \n    Accueil --&gt; login\n    login --&gt; menu_joueur      \n    Accueil --&gt; logon      \n    Accueil --&gt; quitter\n    quitter --&gt; [*]\n```\n\n\nüê∏ envoie son code vers le d√©p√¥t distant, ensuite üê± fait de m√™me\n\ngit add .\ngit commit -m \"&lt;compl√©tez&gt;\"\ngit push\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nPour üê∏ qui a pouss√© son code en premier ‚û°Ô∏è tout s‚Äôest bien pass√©\nPour üê±, il a du recevoir ce genre de message lors du push\n! [rejected]        main -&gt; dev (fetch first)\nerror: failed to push some refs to 'git@github.com:ludo2ne/tp-git.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n\n\nSi vous lisez le message, c‚Äôest assez clair :\n\nvotre d√©p√¥t local est en retard de version par rapport au d√©p√¥t distant\nvous devez donc mettre √† jour votre d√©p√¥t local avant de pousser\nil faut commencer par pull\n\nNous allons ajouter l‚Äôoption rebase pour placer les commits locaux ‚Äúpar-dessus‚Äù ceux du remote pour obtenir un historique lin√©aire, clair et facile √† suivre, tout en √©vitant les commits de fusion superflus.\n\nüê± commence par git pull --rebase\nüê± fait enfin git push\n\nMaintenant c‚Äôest üê∏ qui a son d√©p√¥t local en retard.\n\nüê∏ peut faire un simple pull car il n‚Äôa pas de commits locaux\n\nExercice d‚Äôapplication :\n\nüê± modifie et pousse le fichier voiture.py\nüê∏ modifie et pousse le fichier moto.py\nSynchronisez vos d√©p√¥ts pour avoir tous la derni√®re version\n\n\n\n5.4 Un premier conflit\nPour le moment vous avez travaill√© sur des fichiers diff√©rents, donc git arrive √† g√©rer la situation.\nMaintenant, que se passe-t-il si vous modifiez tous les deux le m√™me fichier ?\nVous allez tous les 2 travailler sur le fichier voiture.py. Dans la m√©thode accelere() :\n\nüê± remplace 130 par 150\nüê± commit et pousse son code (add, commit, push)\nDe son c√¥t√©, üê∏ remplace 130 par 110\nüê∏ commit et pousse son code (add, commit, push)\n\nSi vous avez bien compris, vous savez que le push ne va pas fonctionner.\n\nüê∏ doit commencer par mettre √† jour son d√©p√¥t local : git pull\n\nEt l√† c‚Äôest le conflit‚Ä¶\n\n\nremote: Enumerating objects: 7, done.\nremote: Counting objects: 100% (7/7), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 2), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (4/4), 1015 bytes | 8.00 KiB/s, done.\nFrom github.com:ludo2ne/tp-git\n   c27c708..05380ea  main       -&gt; origin/main\nAuto-merging src/voiture.py\nCONFLICT (content): Merge conflict in src/voiture.py\nAutomatic merge failed; fix conflicts and then commit the result.\nGit vous pr√©vient qu‚Äôil n‚Äôest pas arriv√© √† fusionner les commits automatiquement\nUn conflit est g√©n√©r√© quand les m√™mes lignes d‚Äôun fichier sont modifi√©s par 2 commits de mani√®re diff√©rente. Il doit √™tre g√©r√© sur un d√©p√¥t local.\nVotre code ressemble √† cela d√©sormais √† :\n    def accelere(self, increment) -&gt; None:\n        if increment &gt; 10:\n            increment = 10\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n        self.vitesse = min(110, self.vitesse + increment)\n=======\n        self.vitesse = min(150, self.vitesse + increment)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05380ea70dbd5d4e49371af8da7c0ac1df13a010\n\nLa premi√®re partie (entre &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD et =======) correspond au code en que vous aviez dans votre copie de travail\nLa seconde partie est le code provenant du d√©p√¥t distant\n\nPlusieurs choix s‚Äôoffrent √† vous :\n\nImposer votre version (110)\nAccepter la version de üê± (150)\nChoisir une toute autre version (par exemple 120)\n\nR√©solvons ce conflit :\n\nüê∏ conserve uniquement la ligne avec 110\n\net supprime toutes les autres lignes de &lt;&lt;&lt;&lt;&lt;&lt;&lt; √† &gt;&gt;&gt;&gt;&gt;&gt;&gt;\nautre possibilit√© offerte par VSCode, cliquer sur Accept Current Change\n\nüê∏ sauvegarde le fichier\nüê∏ commit et pousse son code (add, commit -m ‚Äúresolve merge‚Äù, push)\nüê± fait un pull pour mettre √† jour son d√©p√¥t local\n\n\n\n\n\n\n\nImportant\n\n\n\nAvoir un conflit, ce n‚Äôest pas grave !\nAvoir un conflit, ce n‚Äôest pas grave !\nAvoir un conflit, ce n‚Äôest pas grave !\nAvoir un conflit, ce n‚Äôest pas grave !\nAvoir un conflit, ce n‚Äôest pas grave !\nConflit ‚â† Erreur\nCela arrive simplement quand Git rencontre deux versions et il n‚Äôa pas de üîÆ, ni de üé≤ pour choisir laquelle est la bonne.\n\n\n\n\n\n\n\n\nTip√âviter les conflits\n\n\n\n\nEssayez de ne pas coder en m√™me temps sur les m√™mes fichiers\nFaites des pull et push r√©guliers\n\nPlus le code de votre d√©p√¥t local sera ‚Äúproche‚Äù de celui du d√©p√¥t distant, moins vous en aurez.\nEn effet, si vous codez pendant 5 jours sans jamais pousser votre code, vous prenez le risque que d‚Äôautres personnes modifient les m√™mes fichiers et poussent avant leur code.\n\n\n\n\n5.5 Exercice d‚Äôapplication\nDans le constructeur de la classe Voiture :\n\nüê± ajoute un attribut vitesse_max qui vaut par d√©faut 130\n\n\nvoiture.py\n\n    def __init__(self, nom, couleur, vitesse_max=130):\n      \"\"\"Constructeur\"\"\"\n      self.nom = nom\n      self.couleur = couleur\n      self.vitesse = 0\n      self.vitesse_max = vitesse_max\n\nüê∏ ajoute un attribut carburant\n\n\nvoiture.py\n\n    def __init__(self, nom, couleur, carburant):\n      \"\"\"Constructeur\"\"\"\n      self.nom = nom\n      self.couleur = couleur\n      self.vitesse = 0\n      self.carburant = carburant\n\nSynchronisez vos d√©p√¥ts et r√©solvez les conflits"
  },
  {
    "objectID": "doc/tp-ensai.html#ci",
    "href": "doc/tp-ensai.html#ci",
    "title": "Git TP",
    "section": "6 CI",
    "text": "6 CI\nL‚Äôint√©gration continue permet d‚Äôautomatiser certaines t√¢ches lorsque l‚Äôon pousse du code vers un remote, par exemple :\n\ncompiler le projet ou g√©n√©rer un paquet\nlancer les tests unitaires avec pytest\nv√©rifier la qualit√© du code\n\nIl existe √©galement le D√©ploiement Continu (CD) qui va installer automatiquement le programme sur un serveur.\nIl est possible de cr√©er des pipelines automatis√©s pour mettre en place du CI/CD.\n\n6.1 Notre premier pipeline\nNous allons cr√©er un pipeline qui va ex√©cuter sur une machine virtuelle vierge :\n\ninstaller ubuntu\ninstaller un environnement python\ninstaller les packages python n√©cessaires (requirements.txt)\n\net ensuite :\n\nlancer les tests unitaires\nlancer pylint, un outil pour √©valuer la qualit√© du code\n\nLa fonctionnalit√© GitHub qui permet de faire cela se nomme GitHub actions. GitLab a un √©quivalent.\n\n\n.github/workflows/ci.yml\n\nname: pipeline\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.13\"]\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Unit Tests with pytest\n      run: |\n        pytest\n\n    - name: Analysing the code with pylint\n      run: |\n        pylint --output-format=colorized --disable=C0114,C0411,C0415,W0718 $(git ls-files '*.py') --fail-under=7.5\n\n\nCr√©ez un dossier .github puis dans celui-ci un dossier workflows\n\nc‚Äôest important de respecter ces noms pr√©cis\n\nDans worlflows, cr√©ez un fichier ci.yml et collez le code ci-dessus\nAvec git : add, commit et push\n\nLors d‚Äôun push, cela va maintenant d√©clencher un pipeline sur GitHub.\n\nSur la page du repo GitHub, allez dans l‚Äôonglet Action"
  },
  {
    "objectID": "doc/tp-ensai.html#git-sur-la-vm-ensai",
    "href": "doc/tp-ensai.html#git-sur-la-vm-ensai",
    "title": "Git TP",
    "section": "Git sur la VM ENSAI",
    "text": "Git sur la VM ENSAI\n\nOptionnel\n\nSi vous souhaitez g√©rer des d√©p√¥ts locaux sur votre VM ENSAI, vous pouvez utiliser le param√©trage ci-dessous.\nLa communication avec GitHub se fera avec le protocole ssh\n\nConfiguration\n\n\nsetup-git.sh\n\ngit config --global user.name \"&lt;Prenom Nom&gt;\"\ngit config --global user.email &lt;prenom.nom&gt;@eleve.ensai.fr\ngit config --global credential.helper store\ngit config --global core.mergeoptions --no-edit\ngit config --global core.editor \"code -w\"\n\n\n\nCr√©ation d‚Äôune cl√© SSH\nPour permettre de faire dialoguer notre d√©p√¥t local avec le d√©p√¥t distant de GitHub, vous utiliserez le protocole SSH. Pour cela, vous allez :\n\ng√©n√©rer une paire de cl√©s (publique/priv√©e) sur notre machine\nd√©clarer votre cl√© publique √† GitHub\n\n\n\n\n\n\n\nWarning\n\n\n\nCe param√®trage SSH est r√©alis√© au niveau de la machine.\nSi par exemple, vous souhaitez utiliser Git sur votre ordinateur personnel, il faudra faire √©galement ce param√©trage.\n\n\nDans Git Bash :\n\nCr√©ez un dossier /c/Users/id????.ssh pour stocker votre cl√© ssh\n\nmkdir -p ~/.ssh\n\nCr√©ez une cl√© SSH\n\nssh-keygen -t rsa -b 4096 -N '' -q -f ~/.ssh/id_rsa\n\nCopiez le contenu de la cl√© publique\n\ncat ~/.ssh/id_rsa.pub | clip\nc‚Äôest comme si vous copiez le contenu du fichier id_rsa.pub\n\n\nD√©clarez votre cl√© publique √† GitHub, pour pouvoir ensuite faire communiquer d√©p√¥ts locaux avec les d√©p√¥ts distants :\n\nGitHub &gt; cliquez sur votre avatar &gt; Settings &gt; SSH and GPG keys\n\nlien direct\n\nCliquez sur New SSH key\n\nTitle : VM ENSAI\nKey : Collez votre cl√© publique\nAdd SSH key\n\n\n\n\n\n\n\n\nNoteSSH : Comment √ßa marche ?\n\n\n\n\n\nSSH (Secure Shell) est un protocole permettant de se connecter √† un autre ordinateur sur un r√©seau de mani√®re s√©curis√©e.\nSSH chiffre toutes les informations √©chang√©es afin de prot√©ger les donn√©es.\nSSH utilise un m√©canisme de cl√©s cryptographiques pour authentifier les ordinateurs et les utilisateurs, garantissant que la connexion est effectu√©e avec le bon serveur et sans intervention malveillante :\n\nCl√© priv√©e : C‚Äôest comme la cl√© de votre maison. Vous la gardez en s√©curit√© avec vous et ne la partagez avec personne. Cette cl√© reste sur votre ordinateur et sert √† prouver votre identit√©.\nCl√© publique : Elle serait comme votre adresse postale. Vous pouvez la partager avec d‚Äôautres. Dans SSH, vous placez votre cl√© publique sur les serveurs ou les ordinateurs auxquels vous souhaitez vous connecter.\n\nCes deux cl√©s sont li√©es. Un message chiffr√© par la cl√© publique n‚Äôest d√©chiffrable que par celui qui poss√©de la cl√© priv√©e. Lorsque vous chiffrez un message avec votre cl√© priv√©e, vous prouvez √† tous votre identit√© car chacun peut d√©chiffrer ce message avec la cl√© publique."
  },
  {
    "objectID": "doc/glossaire.html",
    "href": "doc/glossaire.html",
    "title": "Glossaire",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/glossaire.html#les-bases",
    "href": "doc/glossaire.html#les-bases",
    "title": "Glossaire",
    "section": "1 Les bases",
    "text": "1 Les bases\n\n\n\n\n\n\n\n\nTerme\nSynonymes\nSignification\n\n\n\n\nGit\nOutil de versionnage\nLogiciel qui g√®re les versions et l‚Äôhistorique du code\n\n\nGitHub\nPlateforme Git\nService web pour h√©berger et collaborer sur des d√©p√¥ts Git\n\n\nD√©p√¥t\nRepository, Repo\nDossier contenant un projet Git (code + historique)\n\n\nRemote\nD√©p√¥t distant\nD√©p√¥t h√©berg√©e sur un serveur (GitHub, GitLab‚Ä¶)\n\n\nLocal\nD√©p√¥t local, Clone\nCopie d‚Äôun Remote sur ordinateur, ton service\n\n\nCommit\nPoint de sauvegarde\n√âtat du projet √† un instant donn√©\n\n\nPush\nEnvoyer\nTransmettre les commits locaux vers le d√©p√¥t remote\n\n\nPull\nR√©cup√©rer\nRamener les commits du remote vers le local et les fusionner"
  },
  {
    "objectID": "doc/glossaire.html#autres",
    "href": "doc/glossaire.html#autres",
    "title": "Glossaire",
    "section": "2 Autres",
    "text": "2 Autres\n\n\n\n\n\n\n\n\nTerme\nSynonymes\nSignification\n\n\n\n\nBranche\nBranch\nLigne parall√®le de d√©veloppement dans un d√©p√¥t\n\n\nMerge\nFusion\nAction de combiner une branche dans une autre\n\n\nFork\nCopier un d√©p√¥t externe\nCr√©er une copie d‚Äôun d√©p√¥t sur son propre compte GitHub\n\n\nIssue\nTicket\nOutil pour signaler un bug, une t√¢che ou une discussion\n\n\nPull Request\nPR, Merge Request\nProposition d‚Äôint√©grer des changements d‚Äôune branche vers une autre"
  },
  {
    "objectID": "doc/presentation-slides.html#introduction",
    "href": "doc/presentation-slides.html#introduction",
    "title": "Introduction √† Git",
    "section": "Introduction",
    "text": "Introduction\n\nOutil indispensable\nPas d‚Äô√©valuation imm√©diate\n\nmais utilis√© toute la scolarit√© et vie pro\n\n\n\n\nPr√©sentation perso en 1min\n√âvalu√© en Compl√©ments d‚Äôinfo 2A\nSuivi d‚Äôun TP\n‚ö†Ô∏è valable pour tous les TP\n\nn‚Äôallez pas trop vite\nsuivez pr√©cis√©ment les consignes"
  },
  {
    "objectID": "doc/presentation-slides.html#introduction-1",
    "href": "doc/presentation-slides.html#introduction-1",
    "title": "Introduction √† Git",
    "section": "Introduction",
    "text": "Introduction\nVous faites parti d‚Äôune √©quipe de 5 personnes qui doit coder une application de jeux de cartes.\nüòï Comment mettre en commun votre code ?\n\nVous d√©veloppez chacun de votre cot√© et √† la fin, vous mettez tout en commun\nVous envoyez vos programmes par mail\nVous cr√©ez un dossier commun\n\nüòÖ En cas d‚Äôerreur, comment revenir en arri√®re ?"
  },
  {
    "objectID": "doc/presentation-slides.html#au-programme",
    "href": "doc/presentation-slides.html#au-programme",
    "title": "Introduction √† Git",
    "section": "Au programme",
    "text": "Au programme\n\nüìå Versionner son code\nüíæ Historique des modifications\nüë∑ Travail en √©quipe"
  },
  {
    "objectID": "doc/presentation-slides.html#pourquoi-versionner",
    "href": "doc/presentation-slides.html#pourquoi-versionner",
    "title": "Introduction √† Git",
    "section": "Pourquoi versionner ?",
    "text": "Pourquoi versionner ?\n\nQuelle est la bonne version ?\nComment faire pour revenir en arri√®re ?\nQui a √©crit ce code ? Quand ?\n\n\n\nles questions que l‚Äôon peut se poser en projet\nMais qui a √©crit cette merde ???\n\nah ben c‚Äôest moi‚Ä¶"
  },
  {
    "objectID": "doc/presentation-slides.html#la-solution",
    "href": "doc/presentation-slides.html#la-solution",
    "title": "Introduction √† Git",
    "section": "La solution",
    "text": "La solution\n\n\n\nLa solution, tous en choeur, c‚Äôest ‚Ä¶"
  },
  {
    "objectID": "doc/presentation-slides.html#git",
    "href": "doc/presentation-slides.html#git",
    "title": "Introduction √† Git",
    "section": "Git",
    "text": "Git\n\n\n\ngit : connard en argot britannique"
  },
  {
    "objectID": "doc/presentation-slides.html#git-bash",
    "href": "doc/presentation-slides.html#git-bash",
    "title": "Introduction √† Git",
    "section": "Git Bash",
    "text": "Git Bash\n\nTerminal de commande\nPlusieurs mani√®res de lancer (Menu Windows, clic droit, inclus dans VSCode)\n\n\n\nConseil : lors de l‚Äôinstallation de Git, choisissez le terminal Unix\n\n1ere ligne : prompt (username, machine, r√©pertoire actuel)\n2e ligne (commence par $) : commande\n3e ligne : r√©sultat de la commande"
  },
  {
    "objectID": "doc/presentation-slides.html#versionner-son-code",
    "href": "doc/presentation-slides.html#versionner-son-code",
    "title": "Introduction √† Git",
    "section": "Versionner son code",
    "text": "Versionner son code\n\n\nAu d√©but j‚Äôai parl√© de versionner\nComment faire avec Git"
  },
  {
    "objectID": "doc/presentation-slides.html#travailler-en-√©quipe",
    "href": "doc/presentation-slides.html#travailler-en-√©quipe",
    "title": "Introduction √† Git",
    "section": "Travailler en √©quipe",
    "text": "Travailler en √©quipe"
  },
  {
    "objectID": "doc/presentation-slides.html#etat-du-d√©p√¥t-local",
    "href": "doc/presentation-slides.html#etat-du-d√©p√¥t-local",
    "title": "Introduction √† Git",
    "section": "Etat du d√©p√¥t local",
    "text": "Etat du d√©p√¥t local\nEst-ce qu‚Äôil y a des fichiers :\n\nnon suivis ? Untracked files\npr√™ts √† √™tre commit√©s ? Changes to be committed\nmodifi√©s non ajout√©s √† l‚Äôindex ? Changes not staged for commit\n\n\n\n\n\n\n\nImportant\n\n\nLa commande git status permet de r√©pondre √† ces questions.\nElle peut √™tre utilis√©e n‚Äôimporte quand, sans mod√©ration !"
  },
  {
    "objectID": "doc/presentation-slides.html#cloner-un-d√©p√¥t",
    "href": "doc/presentation-slides.html#cloner-un-d√©p√¥t",
    "title": "Introduction √† Git",
    "section": "Cloner un d√©p√¥t",
    "text": "Cloner un d√©p√¥t"
  },
  {
    "objectID": "doc/presentation-slides.html#commandes-principales",
    "href": "doc/presentation-slides.html#commandes-principales",
    "title": "Introduction √† Git",
    "section": "Commandes principales",
    "text": "Commandes principales\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ngit clone &lt;adr&gt;\nCr√©er un d√©p√¥t local sur son poste\n\n\ngit status\nVoir o√π l‚Äôon en est\n\n\ngit add &lt;file&gt;\nAjouter pour le prochain commit\n\n\ngit commit -m \"&lt;msg&gt;\"\nCr√©er un point de sauvegarde\n\n\ngit pull\nd√©p√¥t local ‚û°Ô∏è d√©p√¥t distant\n\n\ngit push\nd√©p√¥t local ‚¨ÖÔ∏è d√©p√¥t distant\n\n\n\n\nclone : bouton vert code sur GitHub, GitLab"
  },
  {
    "objectID": "doc/presentation-slides.html#la-routine-git",
    "href": "doc/presentation-slides.html#la-routine-git",
    "title": "Introduction √† Git",
    "section": "La routine Git",
    "text": "La routine Git\n\nje commence par git pull pour mettre √† jour mon d√©p√¥t local\nje code\nj‚Äôai fini, je teste mon code, √ßa marche üéâ\ngit status pour voir l‚Äô√©tat du d√©p√¥t\ngit add &lt;filename&gt; pour ajouter mes fichiers au prochain commit\ngit commit -m \"blabla\" pour cr√©er un point de sauvegarde\ngit pull pour voir si personne n‚Äôa pouss√© depuis mon dernier pull\nsi besoin, je r√©souds les conflits\nje pousse mon code git push\n\n\n\npull : des fois qu‚Äôun camarade ait cod√© la nuit"
  },
  {
    "objectID": "doc/presentation-slides.html#d√©mo",
    "href": "doc/presentation-slides.html#d√©mo",
    "title": "Introduction √† Git",
    "section": "D√©mo",
    "text": "D√©mo\n\n\naller sur GitHub, cloner\ncr√©er un fichier, status\nreset, status\nmodifier un fichier, status\ncommit\nmodifier sur github\npush"
  },
  {
    "objectID": "doc/presentation-slides.html#travailler-dans-le-cloud",
    "href": "doc/presentation-slides.html#travailler-dans-le-cloud",
    "title": "Introduction √† Git",
    "section": "Travailler dans le cloud",
    "text": "Travailler dans le cloud\n\nAutre mani√®re de travailler\nServices non perennes\nSauvegarder votre code\n\n\n\nvous ne travaillerez pas toujours en local\nmais parfois sur des services √† la demande\nex : besoin de puissance de calcul"
  },
  {
    "objectID": "doc/presentation-slides.html#les-branches",
    "href": "doc/presentation-slides.html#les-branches",
    "title": "Introduction √† Git",
    "section": "Les branches",
    "text": "Les branches\nImaginez que vous souhaitez ajouter une nouvelle fonctionnalit√© √† votre code.\nSeulement vous n‚Äô√™tes pas encore s√ªr que :\n\ncette fonctionnalit√© sera vraiment utile üòê\nqu‚Äôelle ne va pas tout casser üò∞\n\n\n\n\n\n\n\nNote\n\n\n\nsi c‚Äôest tout petit, vous pouvez dev en local en faire un reset au cas o√π\nsinon utilisez une branche"
  },
  {
    "objectID": "doc/presentation-slides.html#bibliographie",
    "href": "doc/presentation-slides.html#bibliographie",
    "title": "Introduction √† Git",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nGit : un √©l√©ment essentiel au quotidien, Python pour la datascience, Lino Galiana\nFormation Git du Lab INSEE\nFormation Git du SSM Agriculture\nGitFlow\nD√©veloppement bas√© sur le tronc"
  },
  {
    "objectID": "doc/presentation.html",
    "href": "doc/presentation.html",
    "title": "Introduction √† Git",
    "section": "",
    "text": "Outil indispensable\nPas d‚Äô√©valuation imm√©diate\n\nmais utilis√© toute la scolarit√© et vie pro\n\n\n\n\nPr√©sentation perso en 1min\n√âvalu√© en Compl√©ments d‚Äôinfo 2A\nSuivi d‚Äôun TP\n‚ö†Ô∏è valable pour tous les TP\n\nn‚Äôallez pas trop vite\nsuivez pr√©cis√©ment les consignes"
  },
  {
    "objectID": "doc/presentation.html#introduction",
    "href": "doc/presentation.html#introduction",
    "title": "Introduction √† Git",
    "section": "",
    "text": "Outil indispensable\nPas d‚Äô√©valuation imm√©diate\n\nmais utilis√© toute la scolarit√© et vie pro\n\n\n\n\nPr√©sentation perso en 1min\n√âvalu√© en Compl√©ments d‚Äôinfo 2A\nSuivi d‚Äôun TP\n‚ö†Ô∏è valable pour tous les TP\n\nn‚Äôallez pas trop vite\nsuivez pr√©cis√©ment les consignes"
  },
  {
    "objectID": "doc/presentation.html#introduction-1",
    "href": "doc/presentation.html#introduction-1",
    "title": "Introduction √† Git",
    "section": "Introduction",
    "text": "Introduction\nVous faites parti d‚Äôune √©quipe de 5 personnes qui doit coder une application de jeux de cartes.\nüòï Comment mettre en commun votre code ?\n\nVous d√©veloppez chacun de votre cot√© et √† la fin, vous mettez tout en commun\nVous envoyez vos programmes par mail\nVous cr√©ez un dossier commun\n\nüòÖ En cas d‚Äôerreur, comment revenir en arri√®re ?"
  },
  {
    "objectID": "doc/presentation.html#au-programme",
    "href": "doc/presentation.html#au-programme",
    "title": "Introduction √† Git",
    "section": "Au programme",
    "text": "Au programme\n\nüìå Versionner son code\nüíæ Historique des modifications\nüë∑ Travail en √©quipe"
  },
  {
    "objectID": "doc/presentation.html#pourquoi-versionner",
    "href": "doc/presentation.html#pourquoi-versionner",
    "title": "Introduction √† Git",
    "section": "Pourquoi versionner ?",
    "text": "Pourquoi versionner ?\n\nQuelle est la bonne version ?\nComment faire pour revenir en arri√®re ?\nQui a √©crit ce code ? Quand ?\n\n\n\nles questions que l‚Äôon peut se poser en projet\nMais qui a √©crit cette merde ???\n\nah ben c‚Äôest moi‚Ä¶\n\n\n\n\nPour connaitre la v√©ritable derni√®re version\n\n\nimaginons que vous partagiez un dossier commun\nou encore que ce fichier soit dans des mails\nversion v0, v1, v2\n\nm√™me si vous √™tes bien intentionn√©\n√ßa finira par d√©raper\n\n\n\n\nPas bienBienObjectif\n\n\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ old\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport.txt\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_new.txt\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_v1.0.txt\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport_v1.2.txt\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_old.txt\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ Rapport_2022.05.15.txt\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport_2022.05.15_new.txt\nüòï Quelle est la bonne version du fichier ?\n\n\nüòä Un seul fichier + l‚Äôhistorique des modifications\n‚îú‚îÄ‚îÄ‚îÄProjet info\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄLivrables\n‚îÇ     ‚îî‚îÄ‚îÄ‚îÄRapport.txt\n\nDate         Heure   Auteur      Message commit\n----         -----   ------      --------------\n2022.05.29   23h58   bianca      \"Version finale\"\n2022.05.29   23h40   archibald   \"j'avais oubli√© l'intro\"\n2022.05.29   21h32   tryphon     \"ajout partie 2\"\n2022.05.29   20h25   bianca      \"v1.1\"\n2022.05.29   20h12   tryphon     \"Cr√©ation du rapport\"\n\n\n\n\n\n\n\n\nFigure¬†1: Source : ThinkR\n\n\n\n\n\n\n\n\nAncien code comment√©\nVous souhaitez passer de R-base √† ggplot2 pour votre graphique.\n\nMais vous vous dites que c‚Äôest mieux de garder l‚Äôancien code au cas o√π‚Ä¶\n\n\nPas bienBien\n\n\n\n\nanalyse.R\n\nlibrary(ggplot2)\n\ndata &lt;- data.frame(x = seq(-4, 4, length=100))\ndata$y &lt;- dnorm(data$x)\n\n# plot(data$x, data$y, type=\"l\", lwd=2, col=\"blue\",\n#      main=\"Densit√© de la loi normale centr√©e r√©duite\",\n#      xlab=\"x\", ylab=\"Densit√©\")\n# abline(h=0, col=\"gray\")\n\nggplot(data, aes(x = x, y = y)) +\n  geom_line(color = \"blue\", size = 1) +\n  ggtitle(\"Densit√© de la loi normale centr√©e r√©duite\") +\n  xlab(\"x\") +\n  ylab(\"Densit√©\") +\n  theme_minimal()\n\n\n\n\n\nanalyse.R - Commit 05016ab - Date 2024.06.02 - Author tryphon\n\ndata$y &lt;- dnorm(data$x)\n\nplot(data$x, data$y, type=\"l\", lwd=2, col=\"blue\",\n     main=\"Densit√© de la loi normale centr√©e r√©duite\",\n     xlab=\"x\", ylab=\"Densit√©\")\nabline(h=0, col=\"gray\")\n\n\n\n\nanalyse.R - Commit f97f766 - Date 2024.06.04 - Author bianca\n\nlibrary(ggplot2)\n\ndata &lt;- data.frame(x = seq(-4, 4, length=100))\ndata$y &lt;- dnorm(data$x)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_line(color = \"blue\", size = 1) +\n  ggtitle(\"Densit√© de la loi normale centr√©e r√©duite\") +\n  xlab(\"x\") +\n  ylab(\"Densit√©\") +\n  theme_minimal()"
  },
  {
    "objectID": "doc/presentation.html#la-solution",
    "href": "doc/presentation.html#la-solution",
    "title": "Introduction √† Git",
    "section": "La solution",
    "text": "La solution\n\n\n\nLa solution, tous en choeur, c‚Äôest ‚Ä¶"
  },
  {
    "objectID": "doc/presentation.html#git",
    "href": "doc/presentation.html#git",
    "title": "Introduction √† Git",
    "section": "Git",
    "text": "Git\n\n\n\n\n\ngit : connard en argot britannique\n\n\n\nHistorique\n\nCr√©√© par Linus Torvalds en 2005\nPour g√©rer le d√©veloppement du noyau Linux\nLe standard incontournable de la gestion de versions\nAnciens outils : CVS, SVN\n\n\n\nStandard : produit qui s‚Äôest impos√© par l‚Äôusage (ex : Moteur de recherche Google, TCP/IP)\n\npeu causer des probl√®mes de monopole‚Ä¶\n\n\n\n\n\nLogiciel\n\nLogiciel Libre, Open source\nGratuit\nD√©centralis√©\n\n\n\n\n\n\n\nNote\n\n\n\nüò® Git s‚Äôutilise majoritairement en ligne de commande dans un terminal Git Bash.\nüòÖ Pas de panique, quelques commandes suffisent pour travailler avec Git.\nIl existe aussi des interfaces graphiques mais elles sont souvent imparfaites et sources d‚Äôerreur.\n\n\n\n\nLogiciel libre\n\ncode source est ouvert et disponible\npermettant √† quiconque de l‚Äôutiliser, le modifier, et le distribuer librement\ndiff√©rent de gratuit\nl√©g√©rement diff√©rent de Open source\n\nOpen Source : avantages pratiques et collaboratifs\nLibre : libert√©s et les droits √©thiques des utilisateurs\n\n\nD√©centralis√©\n\nchaque utilisateur dispose d‚Äôune copie compl√®te de l‚Äôhistorique de tout le projet\n\n\n\n\n\nK√©sako\n\nGit\n\nLogiciel de gestion de versions\n\nGit Bash\n\nTerminal pour √©crire des commandes git\n\nGitHub / GitLab\n\nPlateforme de d√©veloppement collaboratif\nH√©berge des d√©p√¥ts Git\nPropose d‚Äôautres fonctionnalit√©s (CI/CD, wiki, gestion des incidents‚Ä¶)\n\n\n\n\nGitHub rachet√© par Microsoft en 2018\nGitLab, Libre, possible d‚Äôavoir son propre GitLab interne"
  },
  {
    "objectID": "doc/presentation.html#git-bash",
    "href": "doc/presentation.html#git-bash",
    "title": "Introduction √† Git",
    "section": "Git Bash",
    "text": "Git Bash\n\nTerminal de commande\nPlusieurs mani√®res de lancer (Menu Windows, clic droit, inclus dans VSCode)\n\n\n\nConseil : lors de l‚Äôinstallation de Git, choisissez le terminal Unix\n\n1ere ligne : prompt (username, machine, r√©pertoire actuel)\n2e ligne (commence par $) : commande\n3e ligne : r√©sultat de la commande\n\n\n\nCommandes Unix\n\nCommandesSignification\n\n\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\nls (ou ll)\nListe le contenu d‚Äôun r√©pertoire\n\n\npwd\nAffiche le r√©pertoire courant\n\n\ncd &lt;directory&gt;\nChange le r√©pertoire de travail courant\n\n\nmv &lt;src_file&gt; &lt;dest_file&gt;\nD√©place des fichiers ou des r√©pertoires\n\n\ncp &lt;src_file&gt; &lt;dest_file&gt;\nCopie un fichier ou un r√©pertoire\n\n\nmkdir &lt;directory&gt;\nCr√©e un nouveau r√©pertoire\n\n\nrm &lt;file_or_dir&gt;\nSupprime des fichiers ou des r√©pertoires\n\n\ntouch &lt;filename&gt;\nCr√©e un nouveau fichier vide\n\n\ncat &lt;filename&gt;\nAffiche le contenu d‚Äôun fichier\n\n\ngrep &lt;text&gt; &lt;filename&gt;\nRechercher dans un fichier\n\n\n\n\n\n\n\n\n\n\n\n\nCommande\nSignification\n\n\n\n\nls (ou ll)\nlist\n\n\npwd\nprint working directory\n\n\ncd &lt;directory&gt;\nchange directory\n\n\nmv &lt;src_file&gt; &lt;dest_file&gt;\nmove\n\n\ncp &lt;src_file&gt; &lt;dest_file&gt;\ncopy\n\n\nmkdir &lt;directory&gt;\nmake directory\n\n\nrm &lt;file_or_dir&gt;\nremove\n\n\ntouch &lt;filename&gt;\n\n\n\ncat &lt;filename&gt;\nconcatenate\n\n\ngrep &lt;text&gt; &lt;filename&gt;\nglobal regular expression print\n\n\n\n\n\n\n\n\nce qui est entre &lt; ‚Ä¶ &gt; est √† remplacer\nll : ls -l\ncd : change directory\npwd : print working directory\nmkdir : make directory\npour √©diter un fichier : vi, nano\nman \n\nAttention avec les commandes rm, kill\n\n\n\nCommandes Unix - Exemples\nPour chaque commande, de nombreuses options sont disponibles\nls *.py              # liste tous les fichiers python du r√©pertoire courant\nls *.py &gt; a.txt      # cr√©e un fichier a.txt contenant le r√©sultat de la commande\ncd ..                # se positionne dans le r√©pertoire parent\ncd ../projet/src     # remonter dans le dossier parent puis aller dans projet puis src\ncp /p/image.jpg .    # copie le fichier image.jpg du disque P dans le dossier courant\n./setup.sh           # lance le programme setup.sh du r√©pertoire courant\n\n\n\n\n\n\nTip\n\n\n\n\n. : repr√©sente le dossier courant\n.. : repr√©sente le dossier parent\n~ : r√©pertoire personnel de l‚Äôutilisateur (echo $HOME)\n\n\n\n\nr√©pertoire = dossier\nLa ligne de commande reste tr√®s utilis√©e :\n\nrapide, efficace\nautomatisation\n\nexemple : renommer 1000 fichiers d‚Äôun dossier\n\n\n\n\n\nCopier-Coller\n\n\n\n\n\n\nWarning\n\n\n\n\nCTRL + C et CTRL + V ne fonctionnent pas toujours !\nCTRL + C : stopper un processus (tr√®s utile)\n\n\n\n2 possibilit√©s pour coller du texte :\n\nClic droit\nMAJ + INSERT"
  },
  {
    "objectID": "doc/presentation.html#versionner-son-code",
    "href": "doc/presentation.html#versionner-son-code",
    "title": "Introduction √† Git",
    "section": "Versionner son code",
    "text": "Versionner son code\n\n\nAu d√©but j‚Äôai parl√© de versionner\nComment faire avec Git\n\n\n\nQue versionne-t-on ?\n\n‚úÖ des fichiers de type texte (l√©gers)\n‚úÖ du code source\n‚ùå fichiers de donn√©es\n‚ùå mots de passe\n‚ùå outputs : logs, .pdf, .doc\n\n\n\nun d√©p√¥t doit rester mince\nquelques Mo max\npossible de mettre du doc ou pdf\n\nmais git ne sait comparer que du txt, csv, md\ntout ce qui peut s‚Äôouvrir avec notepad\n\n\n\n\n\nWorkflow\n\n\n\n\n\n\nsequenceDiagram\n    Workspace -&gt;&gt; Staging index: add\n    Staging index -&gt;&gt; Local repository: commit\n    Local repository -&gt;&gt; Remote repository: push\n    Remote repository -&gt;&gt; Workspace: pull\n\n\n\n\n\n\n\n\n\n√ßa fait un peu peur, pas intuitif au d√©but\nc‚Äôest un peu plus complexe que d‚Äôavoir simplement local et remote\nworkspace : tous les fichiers de votre dossier\nstaging : fichier reconnus par git\nlocal : sauvegardes du d√©p√¥t local\n\n\n\n\nCr√©er un commit\n2 √©tapes pour cr√©er une nouvelle version :\n\ngit add &lt;filename&gt;\n\najouter le fichier √† l‚Äôindex (i.e.¬†dire √† Git de suivre ce fichier)\ngit add . : pour ajouter tous les fichiers\n\ngit commit -m \"&lt;mon message&gt;\"\n\n\n\ngit utilise la sauvegarde incr√©mentale\nil ne garde que les modifs apport√©es depuis le dernier commit\n\nhttps://talks.freelancerepublik.com/git-commandes-indispensables-developpeurs/\n\n\n\nExemple\n\nv0Je codev1Sch√©ma\n\n\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ src\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ main.py\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ doc\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport.txt\nVotre d√©p√¥t avant de commencer √† coder.\n\n\n‚îú‚îÄ‚îÄ‚îÄ Projet info\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ src\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ main.py               &lt;- fichier modifi√©\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄ velo.py               &lt;- nouveau fichier\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ doc\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ Rapport.txt\nVous avez :\n\nmodifi√© un fichier\ncr√©√© un nouveau fichier\n\n\n\nVous ajoutez les fichiers cr√©√©s ou modifi√©s √† l‚Äôindex :\n\ngit add .\n\nVous cr√©ez un point de sauvegarde\n\ngit commit -m \"feat: ajout de l'utilisation de velo\"\n\n\n\n\n\nvous venez de cr√©er un nouveau commit\nil est possible de consulter les commits pr√©c√©dents\n\ngit checkout &lt;commit_number&gt;\n\n\n\n\n\n\n\ngit checkout &lt;commit_number&gt; : les fichiers de votre d√©p√¥t sont alors dans l‚Äô√©tat o√π ils √©taient √† ce commit\n\n\n\nMessage du commit\nüòî Ce n‚Äôest pas toujours √©vident de trouver un message court et explicite.\n\n\n\n\n\n\nTip\n\n\n\nUtilisez un pr√©fixe √† votre message selon le pattern &lt;type&gt;: &lt;sujet&gt;:\n\ndoc: mise √† jour documentaire\nfeat: nouvelle fonctionnalit√©\nfix: correction\nrefactor: mise au propre du code\nrevert: retour arri√®re\ntest: Modification des tests\n\n\n\n\nSuffixe WIP\n\n\n\nRetour arri√®re\nSi finalement, vous n‚Äôavez pas envie de ¬´ commiter ¬ª vos modifications ?\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ngit restore &lt;file&gt;\nAnnuler les modifications locales non index√©es du fichier\n\n\ngit reset &lt;file&gt;\nDesindexer un fichier\n\n\ngit reset --hard\nRevenir √† l‚Äô√©tat du dernier commit,  perdant toutes les modifications locales\n\n\ngit stash\nSauvegarder et remettre le working directory √† l‚Äô√©tat du dernier commit\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nAttention avec les commandes contenant les mots force, hard‚Ä¶\n\n\n\n\nIgnorer des fichiers\n\n\n\n\n\n\nTipLe fichier .gitignore\n\n\n\n.gitignore est un fichier pr√©sent √† la racine du d√©p√¥t permettant de dire √† Git quels fichiers il doit ignorer. Par exemple, s‚Äôil contient :\n\n*.csv ‚û°Ô∏è tous les fichiers csv seront ignor√©s par Git\ndata/ ‚û°Ô∏è le dossier data et son contenu sera ignor√©\n\nCela est utile, pour exclure par exemple du d√©p√¥t Git :\n\ndes fichiers contenant des mots de passe, des jetons d‚Äôacc√®s‚Ä¶\ndes fichiers volumineux de donn√©es qui n‚Äôont pas vocation √† √™tre versionn√©s\ndes fichiers de log\n\n\n\n\n\nEn info, il y a souvent plein de fichiers de config\n‚ö†Ô∏è Mots de passe ‚û°Ô∏è git garde tout l‚Äôhistorique\nNext\n\nc‚Äô√©tait pour la partie ‚Äúgestion du d√©p√¥t local‚Äù\nensuite regardons comment communiquer avec le d√©p√¥t distant"
  },
  {
    "objectID": "doc/presentation.html#travailler-en-√©quipe",
    "href": "doc/presentation.html#travailler-en-√©quipe",
    "title": "Introduction √† Git",
    "section": "Travailler en √©quipe",
    "text": "Travailler en √©quipe\n\nD√©p√¥t local et d√©p√¥t distant\n\n1 d√©p√¥t distant\n\nappel√© aussi remote\nh√©berg√© sur une forge (GitHub, GitLab, Bitbucket‚Ä¶)\n\nn d√©p√¥ts locaux\n\nclone sur votre machine\ngit permet la synchronisation des d√©p√¥ts\n\n\n\n\n\n\n\n\nNoteRemarque\n\n\n\nIl est tout √† fait possible d‚Äôavoir plusieurs clones du m√™me d√©p√¥t sur son poste.\n\n\n\n\navoir un acc√®s internet / r√©seau local pour communiquer avec remote\nc‚Äô√©tait pas n√©cessaire pour faire des add / commit\n\nCommencer dessin avec :\n\nun remote v0\n2 clones de Bob et Alice en v0\n\n\n\n\nD√©p√¥t local et d√©p√¥t distant\n\n\n\n\n\n\nImportant\n\n\n\nChaque d√©p√¥t est une copie int√©grale du projet.\n\n\n\n\n\n\n\nflowchart LR\n    github[(D√©p√¥t distant)]\n    dev1[(D√©p√¥t local 1)]\n    dev2[(D√©p√¥t local 2)]\n    dev3[(D√©p√¥t local 3)]\n    dev4[(D√©p√¥t local 4)]\n    \n    github &lt;--&gt; dev1\n    github &lt;--&gt; dev2\n    dev3 &lt;--&gt; github\n    dev4 &lt;--&gt; github\n\n\n\n\n\n\n\n\nSi vous perdez un d√©p√¥t, il suffit de repartir d‚Äôun autre\n\n\n\n\nCommuniquer avec le d√©p√¥t distant\n\ngit pull : mettre √† jour son d√©p√¥t local √† partir du d√©p√¥t distant\ngit push : envoyer ses commits locaux sur le d√©p√¥t distant\n\n\n\n\n\n\n\nImportant\n\n\n\nIl est important de pousser et puller r√©guli√©rement son code pour garder son d√©p√¥t √† jour.\n\n\n\n\nsinon vos versions vont diverger\n\nIMPORTANT :\n\nVous faites toujours vos actions sur un d√©p√¥t local\nVous ne modifiez jamais le d√©p√¥t distant\n\n\n\n\ngit push\nD√©p√¥t local ‚û°Ô∏è D√©p√¥t distant\n\nPour pouvoir pousser son code, il est n√©cessaire :\n\nd‚Äôavoir au pr√©alable cr√©√© au minimum un commit\nque votre d√©p√¥t local soit √† jour\n\npas de retard de version par rapport au d√©p√¥t distant\nsi ce n‚Äôest pas le cas, il faut commencer par git pull\n\n\n\nVous pouvez push plusieurs commits\n\n\n\ngit push - si votre d√©p√¥t local n‚Äôest pas √† jour\n! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs\nhint: Updates were rejected because the remote contains work that you do not\nhint: have locally. This is usually caused by another repository pushing to\nhint: the same ref. If you want to integrate the remote changes, use\nhint: 'git pull' before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nLe message est assez explicite.\n\n\ngit push - fichier disparu\n\nVous venez de faire un git push\nMais votre fichier n‚Äôapparait pas sur le d√©p√¥t distant‚Ä¶\nProbablement parce que vous avez oubli√© de l‚Äôajouter √† l‚Äôindex avec git add &lt;mon_fichier&gt;\n\nAutre possibilit√© : votre fichier est ignor√© par git car il fait parti du .gitignore\n\n√ßa arrive quand vous voulez aller trop vite\n\n\n\ngit pull\nD√©p√¥t local ‚¨ÖÔ∏è D√©p√¥t distant\n\nMise √† jour de votre d√©p√¥t local\nS‚Äôil y a eu des modifications sur le d√©p√¥t distant\n\n\nUn pull se fait g√©n√©ralement apr√®s un commit.\n\n\n\ngit pull - conflit\nQue se passe-t-il si :\n\nAlice a modifi√© un fichier et pouss√© sa modification sur le d√©p√¥t distant\nVous avez √©galement modifi√© le m√™me fichier et vous faites un git pull pour mettre √† jour votre d√©p√¥t √† partir du d√©p√¥t distant\n\nüò® Un conflit ! Git ne sait pas choisir quelle est la bonne version entre la votre et celle d‚ÄôAlice.\n\n\ngit pull - conflit\nüòÖ Pas de panique ! Pour r√©soudre le conflit, il faut simplement :\n\nmodifier le fichier en question pour garder la bonne version\ngit add puis git commit pour valider la r√©solution du conflit\n\n\n\nconflit ‚â† erreur\n√ßa arrive\n\n\n\n\n2 versions s‚Äôopposent\n\n\nc‚Äôest un exemple, il peut y avoir d‚Äôautres types\ngit est assez bon pour merge (m√™me si 2 modifs sur m√™me fichier)\nmais en cas de doute, il ne peut pas choisir\n\n\n\nVersion d‚ÄôorigineVersion d‚ÄôAliceVotre version\n\n\n\n\nvelo.py\n\nclass Velo:\n    def __init__(self, couleur):\n        self.couleur = \"bleu\"\n\n\n\n\n\nvelo.py\n\nclass Velo:\n    def __init__(self, couleur):\n        self.couleur = \"blanc\"\n\n\n\n\n\nvelo.py\n\nclass Velo:\n    def __init__(self, couleur):\n        self.couleur = \"noir\"\n\n\n\n\n\n\nR√©soudre un conflit\n\n\nContexte\n\nPermier arriv√©, premier servi\nLe conflit (apr√®s votre pull)\n\nConflit\n\nGit n‚Äôest pas un juge\nVSCode : accept incoming/current/both change\n\nR√©solution\n\nsupprimez les &lt;&lt;&lt;&lt;&lt;&lt;&lt; et ======= ‚û°Ô∏è pas du python\nsi vous relancez votre programme comme √ßa, il va pas aimer\n\n\nLe conflit se r√©soud sur son d√©p√¥t local !\n\n\nContexteLe conflitR√©solution\n\n\n\nAlice a pouss√© son code avant vous\nVous fa√Ætes donc un git pull\n\nEn effet, vous devez imp√©rativement mettre √† jour votre d√©p√¥t local avant de pousser votre code\n\n2 versions s‚Äôopposent sur votre d√©p√¥t local\n\nself.couleur = \"noir\" vs self.couleur = \"blanc\"\n\nGit n‚Äôest pas capable de choisir laquelle est la bonne\n\n\n\n\nEn haut : votre version\nEn bas : celle provenant du d√©p√¥t distant\n\nclass Velo:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n    def __init__(self, nom, couleur, vitesse_max):\n        self.couleur = \"noir\"\n=======\n    def __init__(self, nom, couleur, marque):\n        self.couleur = \"blanc\"\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a57ae9120dbf97dbab78f82db81f5fc8f48f3821\n\n\nPour r√©soudre ce conflit, 3 possibilit√©s :\n\nvous choisissez votre code\nvous choisissez celui d‚ÄôAlice\nvous choisissez un mix des 2\n\nEnsuite, vous validez, cr√©ez un commit et poussez le code (git add ., puis git commit -m \"&lt;message&gt;\" et git push)."
  },
  {
    "objectID": "doc/presentation.html#etat-du-d√©p√¥t-local",
    "href": "doc/presentation.html#etat-du-d√©p√¥t-local",
    "title": "Introduction √† Git",
    "section": "Etat du d√©p√¥t local",
    "text": "Etat du d√©p√¥t local\nEst-ce qu‚Äôil y a des fichiers :\n\nnon suivis ? Untracked files\npr√™ts √† √™tre commit√©s ? Changes to be committed\nmodifi√©s non ajout√©s √† l‚Äôindex ? Changes not staged for commit\n\n\n\n\n\n\n\nImportant\n\n\n\nLa commande git status permet de r√©pondre √† ces questions.\nElle peut √™tre utilis√©e n‚Äôimporte quand, sans mod√©ration !\n\n\n\ngit status\n\n\nEst-ce que votre d√©p√¥t local est en avance de n commit par rapport au d√©p√¥t distant ?"
  },
  {
    "objectID": "doc/presentation.html#cloner-un-d√©p√¥t",
    "href": "doc/presentation.html#cloner-un-d√©p√¥t",
    "title": "Introduction √† Git",
    "section": "Cloner un d√©p√¥t",
    "text": "Cloner un d√©p√¥t\n\ngit clone\n\nAllez sur la page du d√©p√¥t distant (GitHub, GitLab‚Ä¶)\nCliquez sur le bouton Code\nCopiez l‚Äôadresse https ou ssh du d√©p√¥t distant\ngit clone &lt;adresse_depot&gt;\nexemples :\n\ngit clone https://github.com/ludo2ne/Git-tuto.git (https)\ngit clone git@github.com:ludo2ne/Git-tuto.git (ssh)\n\n\n\n\nCr√©er sans cloner\n\n\n\n\n\n\nNoteRemarque\n\n\n\nIl est possible de cr√©er un d√©p√¥t local sans cloner un d√©p√¥t distant (git init).\nEt √©ventuellement ensuite de le brancher √† un d√©p√¥t distant.\nCependant ce cas d‚Äôutilisation est assez marginal.\n\n\n\n\nhttps ou ssh ?\n2 protocoles diff√©rents pour communiquer avec le d√©p√¥t distant.\n\nhttpsssh\n\n\n√Ä utiliser si vous voulez simplement avoir une copie locale du code sans partager vos modifications.\n\nPlus simple, pas besoin de configuration\nN√©cessite un token si vous voulez pousser du code\nRequiert des saisies r√©p√©t√©es du token\n\n\n\n√Ä utiliser si vous travaillez en projet.\n\nConfiguration initiale des cl√©s SSH\nPlus pratique pour des interactions fr√©quentes\nPas de saisie de mot de passe apr√®s configuration\n\n\n\n\n\n\nssh :\n\ncl√© publique / cl√© priv√©e -&gt; config machine\npush and pull\n\nhttps :\n\ntoken donn√© par github\npull only"
  },
  {
    "objectID": "doc/presentation.html#commandes-principales",
    "href": "doc/presentation.html#commandes-principales",
    "title": "Introduction √† Git",
    "section": "Commandes principales",
    "text": "Commandes principales\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ngit clone &lt;adr&gt;\nCr√©er un d√©p√¥t local sur son poste\n\n\ngit status\nVoir o√π l‚Äôon en est\n\n\ngit add &lt;file&gt;\nAjouter pour le prochain commit\n\n\ngit commit -m \"&lt;msg&gt;\"\nCr√©er un point de sauvegarde\n\n\ngit pull\nd√©p√¥t local ‚û°Ô∏è d√©p√¥t distant\n\n\ngit push\nd√©p√¥t local ‚¨ÖÔ∏è d√©p√¥t distant\n\n\n\n\nclone : bouton vert code sur GitHub, GitLab\n\n\nAutres commandes\n\ngit diff : diff√©rence avec le dernier commit\n\ngit diff &lt;filename&gt;\n\ngit checkout &lt;commit_number&gt; : passer √† un commit sp√©cifique\ngit log : historique des commits\n\ngit log --all --decorate --oneline --graph"
  },
  {
    "objectID": "doc/presentation.html#la-routine-git",
    "href": "doc/presentation.html#la-routine-git",
    "title": "Introduction √† Git",
    "section": "La routine Git",
    "text": "La routine Git\n\nje commence par git pull pour mettre √† jour mon d√©p√¥t local\nje code\nj‚Äôai fini, je teste mon code, √ßa marche üéâ\ngit status pour voir l‚Äô√©tat du d√©p√¥t\ngit add &lt;filename&gt; pour ajouter mes fichiers au prochain commit\ngit commit -m \"blabla\" pour cr√©er un point de sauvegarde\ngit pull pour voir si personne n‚Äôa pouss√© depuis mon dernier pull\nsi besoin, je r√©souds les conflits\nje pousse mon code git push\n\n\n\npull : des fois qu‚Äôun camarade ait cod√© la nuit"
  },
  {
    "objectID": "doc/presentation.html#d√©mo",
    "href": "doc/presentation.html#d√©mo",
    "title": "Introduction √† Git",
    "section": "D√©mo",
    "text": "D√©mo\n\n\naller sur GitHub, cloner\ncr√©er un fichier, status\nreset, status\nmodifier un fichier, status\ncommit\nmodifier sur github\npush"
  },
  {
    "objectID": "doc/presentation.html#travailler-dans-le-cloud",
    "href": "doc/presentation.html#travailler-dans-le-cloud",
    "title": "Introduction √† Git",
    "section": "Travailler dans le cloud",
    "text": "Travailler dans le cloud\n\nAutre mani√®re de travailler\nServices non perennes\nSauvegarder votre code\n\n\n\nvous ne travaillerez pas toujours en local\nmais parfois sur des services √† la demande\nex : besoin de puissance de calcul"
  },
  {
    "objectID": "doc/presentation.html#les-branches",
    "href": "doc/presentation.html#les-branches",
    "title": "Introduction √† Git",
    "section": "Les branches",
    "text": "Les branches\nImaginez que vous souhaitez ajouter une nouvelle fonctionnalit√© √† votre code.\nSeulement vous n‚Äô√™tes pas encore s√ªr que :\n\ncette fonctionnalit√© sera vraiment utile üòê\nqu‚Äôelle ne va pas tout casser üò∞\n\n\n\n\n\n\n\nNote\n\n\n\n\nsi c‚Äôest tout petit, vous pouvez dev en local en faire un reset au cas o√π\nsinon utilisez une branche\n\n\n\n\nLes branches\nVous aimeriez pouvoir :\n\ntester votre nouveau code\nde mani√®re isol√©e\nsans polluer le d√©p√¥t\n\n\n\n\n\n\n\nNote\n\n\n\nLa branche principale se nomme g√©n√©ralement main ou master.\n\n\n\n\nLa solution\n\nCr√©ez une branche\nD√©veloppez sur cette branche (add, commit, push‚Ä¶)\nSelon vos conclusions\n\nfusionnez votre branche avec le tronc\nsupprimez votre branche\n\n\n\n√ßa vous permet de coder de mani√®re isol√©e\n\n\n\nCommandes li√©es aux branches\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ngit branch -a\nLister toutes les branches\n\n\ngit switch &lt;branch&gt;\nChanger de branche\n\n\ngit switch -c &lt;branch&gt;\nCr√©er et changer de branche\n\n\ngit merge &lt;branch&gt;\nFusionner &lt;branch&gt; dans la branche actuelle\n\n\ngit branch -d &lt;branch&gt;\nSupprimer la branche\n\n\ngit push origin &lt;branch&gt;\nPousser la branche vers le d√©p√¥t distant"
  },
  {
    "objectID": "doc/presentation.html#bibliographie",
    "href": "doc/presentation.html#bibliographie",
    "title": "Introduction √† Git",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nGit : un √©l√©ment essentiel au quotidien, Python pour la datascience, Lino Galiana\nFormation Git du Lab INSEE\nFormation Git du SSM Agriculture\nGitFlow\nD√©veloppement bas√© sur le tronc"
  },
  {
    "objectID": "doc/tp-old.html",
    "href": "doc/tp-old.html",
    "title": "Git TP",
    "section": "",
    "text": "Pr√©senter les fonctionnalit√©s de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nR√©soudre un conflit\nbonus : retour en arri√®re, branches‚Ä¶"
  },
  {
    "objectID": "doc/tp-old.html#objectifs",
    "href": "doc/tp-old.html#objectifs",
    "title": "Git TP",
    "section": "",
    "text": "Pr√©senter les fonctionnalit√©s de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nR√©soudre un conflit\nbonus : retour en arri√®re, branches‚Ä¶"
  },
  {
    "objectID": "doc/tp-old.html#cr√©er-un-projet",
    "href": "doc/tp-old.html#cr√©er-un-projet",
    "title": "Git TP",
    "section": "1 Cr√©er un projet",
    "text": "1 Cr√©er un projet\n‚ÑπÔ∏è Ce projet permettra d‚Äôh√©berger le d√©p√¥t distant\n\nse connecter √† GitHub\nEn haut √† gauche, cliquez sur l‚Äôicone GitHub, puis sur New\n\nou directement : Create a new repository\n\nRepository name : git-tp\nPublic\nAdd a README file\nAdd .gitignore (python)\nCreate Project\n\n\n1.1 Le fichier .gitignore\n\n\n\n\n\n\nTip\n\n\n\n.gitignore est un fichier pr√©sent √† la racine du d√©p√¥t permettant de dire √† Git quels fichiers il faut ignorer. Par exemple :\n\nsi .gitignore contient *.csv\net sur votre d√©p√¥t local, vous avez un fichier resultats.csv\nGit fera comme si ce fichier n‚Äôexiste pas\nAinsi, ce fichier ne sera jamais pouss√© vers le d√©p√¥t distant\n\n\n\n\n\n1.2 Inviter d‚Äôautres membres\nVous venez de cr√©er un projet public donc visible par tous. Cependant, vous √™tes seul √† pouvoir modifier ce projet. Pour autoriser d‚Äôautres personnes √† √©crire sur ce projet (par exemple lors du projet info), il faut donner les droits en √©criture.\nSur la page de votre d√©p√¥t, allez dans :\n\nSettings &gt; Collaborators\nAdd people\n\nCependant ce n‚Äôest pas n√©cessaire dans le cadre de ce TP, vous pouvez donc passer √† la suite."
  },
  {
    "objectID": "doc/tp-old.html#cloner-le-projet",
    "href": "doc/tp-old.html#cloner-le-projet",
    "title": "Git TP",
    "section": "2 Cloner le projet",
    "text": "2 Cloner le projet\n\n\n\n\n\n\nNote\n\n\n\nLe but de cette √©tape est de cr√©er votre d√©p√¥t local en faisant un clone du d√©p√¥t distant\n\n\n\nOuvrir Visual Studio Code\nOuvrir un Terminal\nOuvrir un Terminal Git Bash\n\nEn haut √† droite du terminal, √† cot√© du +, cliquer sur la fl√®che vers le bas ÀÖ\n\nCr√©er le dossier ci-dessous s‚Äôil n‚Äôexiste pas d√©j√†\n\nmkdir /p/Cours/Python\n\nSe positionner dans ce dossier\n\ncd /p/Cours/Python\n\nCloner le projet\n\ngit clone git@github.com:???????/git-tp.git\n\nRemplacer les ?????? par votre nom d‚Äôutilisateur GitHub\nOu sinon sur la page GitHub du projet\n\ncliquer sur Clone\ncopier la ligne qui commence par git@github...\n\n\nAre you sure you want to continue connecting (yes/no)?\n\ntaper yes puis ENTREE\n\nVotre d√©p√¥t local est maintenant cr√©√©\n\nOuvrir ce d√©p√¥t dans l‚Äôexplorateur VSCode\n\nFile &gt; Open Folder\ngit-tp\n\nR√©-ouvrir le terminal Git Bash\n\nSi ce n‚Äôest pas le cas, se positionner dans le dossier suivant :\n\ncd /p/Cours/Python/git-tp\"\n\nun (main) apparait dans le terminal, cela signifie bien que vous √™tes dans un d√©p√¥t Git"
  },
  {
    "objectID": "doc/tp-old.html#ajouter-un-nouveau-fichier",
    "href": "doc/tp-old.html#ajouter-un-nouveau-fichier",
    "title": "Git TP",
    "section": "3 Ajouter un nouveau fichier",
    "text": "3 Ajouter un nouveau fichier\n\n\n\n\n\n\nNote\n\n\n\nNous allons ici voir comment :\n\najouter/modifier des fichiers dans le d√©p√¥t local\nenvoyer ces mises √† jour au d√©p√¥t distant\n\n\n\nDans le dossier git-tp, cr√©er un fichier voiture.py contenant le code suivant :\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\nDans le terminal Git Bash, ex√©cuter les commandes suivantes :\ngit status\n\nLe fichier apparait dans les Untracked files\nCela siginifie que Git a rep√©r√© ce fichier mais pour le moment il ne le versionnera pas\n\ngit add voiture.py\n\npour dire √† Git de suivre ce fichier\n\ngit status\n\nmaintenant le fichier est reconnu par Git\n\ngit commit -m \"creation classe voiture\"\n\npour cr√©er un point de sauvegarde\nEntre les \" \", mettre un message court et explicite\n\ngit status\n\nYour branch is ahead of ‚Äòorigin/main‚Äô by 1 commit\nCe qui signifie que votre d√©p√¥t local est en avance d‚Äôun commit par rapport au d√©p√¥t distant\n\ngit pull\n\nAlready up to date\nPour v√©rifier que le d√©p√¥t distant n‚Äôa pas √©t√© mis √† jour\n\ngit push\n\nV√©rifier qu‚Äôil n‚Äôy a pas d‚Äôerreur\nPour mettre √† jour le d√©p√¥t distant avec mes modifications locales\n\n\n\n\n\n\n\n\nTipCombiner les commandes add et commit\n\n\n\nDans le cas d‚Äôun nouveau fichier, il faut imp√©rativement encha√Æner les deux commandes suivantes pour que Git suive ce fichier :\n\ngit add mon_fichier.py\ngit commit -m \"Creation mon_fichier\"\n\nSi le fichier existait d√©j√†, il est possible de combiner les deux commandes :\n\nen ajoutant au commit un a qui signifie add\ngit commit -am \"Modification mon_fichier\"\n\n\n\nüí° Si vous cr√©ez, non pas un mais plusieurs fichiers, vous pouvez utiliser la commande suivante pour tous les faire suivre par Git : git add .\n\n\n\n\n\n\nImportant\n\n\n\nIl est fortement recommand√© de cr√©er des commits tr√®s fr√©quement, par exemple\n\nVous venez de modifier une fonction\nTestez pour v√©rifier que votre code fonctionne bien\nCr√©ez un commit\nSi jamais par la suite vous ‚Äúcassez tout‚Äù et que plus rien ne marche, il est facile de revenir au dernier commit"
  },
  {
    "objectID": "doc/tp-old.html#g√©rer-un-conflit",
    "href": "doc/tp-old.html#g√©rer-un-conflit",
    "title": "Git TP",
    "section": "4 G√©rer un conflit",
    "text": "4 G√©rer un conflit\n\nDans le monde merveilleux de Git, tout se passe bien quand chacun travaille sur des fichiers diff√©rents. Lorsque deux personnes ont modifi√© le m√™me fichier, √ßa peut se compliquer.\nAu moment de la synchronisation des d√©p√¥ts, Git va tenter de faire un auto-merge. Celui-ci fonctionnera bien si par exemple l‚Äôune des deux personnes a modifi√© le d√©but du fichier et l‚Äôautre la fin.\nPar contre, si les modifications concernent le m√™me endroit, Git ne peut pas d√©cider seul quelle est la bonne version et demande √† l‚Äôutilisateur de choisir quelles lignes il souhaite conserver.\n\nNous allons cr√©er artificiellement un conflit, c‚Äôest √† dire faire comme si 2 personnes avaient modifi√© le m√™me fichier. Ce cas de figure arrivera in√©vitablement lorsque vous travaillerez √† plusieurs sur un projet.\n\n\n\n\n\n\nImportant\n\n\n\nIl faut bien avoir en t√™te qu‚Äôun conflit :\n\nce n‚Äôest pas grave\nce n‚Äôest pas une erreur\nvous n‚Äôavez pas tout cass√©\nüò± il ne faut pas paniquer, simplement savoir comment le r√©soudre\n\n\n\n\nDans GitHub, cliquer sur le fichier voiture.py\nPuis sur la petite fl√®che apr√®s Open in web IDE et Edit\nCliquer sur Edit\n\nRemplacer √† la derni√®re ligne 130 par 110\nCommit changes\nLe fichier a √©t√© modifi√© sur le d√©p√¥t distant\n\nDans VSCode, √©diter le fichier voiture.py\n\nRemplacer √† la derni√®re ligne 130 par 150 et enregistrer\ngit status\n\nle fichier voiture.py est √† l‚Äô√©tat modifi√©\n\ngit commit -am \"Modif vitesse max\"\nLe fichier a √©t√© modifi√© sur le d√©p√¥t local\n\ngit push\n\n‚ö†Ô∏è Error : petit pi√®ge, il faut toujours faire un pull avant de tenter un push\nLe d√©p√¥t distant a √©t√© modifi√©\nJe dois d‚Äôabord r√©cup√©rer ces modifications sur mon d√©p√¥t local (pull)\nEnsuite seulement je pourrai mettre √† jour le d√©p√¥t distant (push)\n\ngit pull\n\nüö® Conflict - Automatic merge failed\nSur les 2 d√©p√¥ts, la m√™me ligne a √©t√© modifi√©e\n\nAinsi dans le cas pr√©sent, Git ne peut pas savoir quelle version choisir\n\ndans le terminal Git est au statut (main|MERGING)\n\ngit status\n\nboth modified: voiture.py\n\nDans VSCode, ouvrir le fichier voiture.py, on voit s‚Äôafficher :\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n        self.vitesse = min(150, self.vitesse + increment)\n******=\n        self.vitesse = min(110, self.vitesse + increment)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; d29aa04e48e16d3648fd4ae9796b4a035e176f1c\n\nMaintenant il faut choisir quelle ligne on garde\n\nCelle du dessus est la notre (d√©p√¥t local)\nCelle du dessous est celle telle qu‚Äôelle a √©t√© modifi√©e sur le d√©p√¥t distant\n\nSupprimer la ligne avec le 110, ainsi que les lignes avec &lt;&lt;&lt;&lt;&lt;, ****= et &gt;&gt;&gt;&gt;&gt;\n\nOu cliquer simplement sur le bouton VSCode Accept Current Change\nEnregistrer\n\nüí° En th√©orie, √† cet instant, il faut tester de nouveau que le programme fonctionne bien, cependant ce n‚Äôest pas l‚Äôobjet de ce TP\ngit commit -am \"Resolve merge\"\n\ncela cr√©e un nouveau point de sauvegarde pour valider le merge\ndans le terminal Git repasse au statut (main)\n\ngit status\ngit push\n\ncette fois ci, c‚Äôest ok, les modifications faites sur le d√©p√¥t local sont pouss√©es vers le d√©p√¥t distant\n\nüéâ F√©licitations, vous venez de r√©soudre votre 1er conflit\n\nc‚Äô√©tait pas compliqu√©, hein ?\n\n\n\nLes parties 3 et 4 sont de tr√®s loin les plus importantes. Pour utiliser efficacement Git, il faut imp√©rativement avoir bien compris comment utiliser les 5 commandes principales (status, add, commit ,pull, push) et savoir r√©soudre des conflits.\nLa suite permet d‚Äôaller un peu plus loin si vous commencez √† √™tre √† l‚Äôaise."
  },
  {
    "objectID": "doc/tp-old.html#revenir-en-arri√®re",
    "href": "doc/tp-old.html#revenir-en-arri√®re",
    "title": "Git TP",
    "section": "5 Revenir en arri√®re",
    "text": "5 Revenir en arri√®re\n‚ÑπÔ∏è L‚Äôint√©r√™t de versionner est d‚Äôavoir la possibilit√© de revenir en arri√®re si besoin !\nSoyons clair, revenir en arri√®re n‚Äôest pas une action anodine et n√©cessite parfois une certaine ma√Ætrise de Git. Nous nous contenterons donc ici de quelques outils de base.\n\n\n5.1 Revenir au dernier commit\nComme souvent avec Git, il y a plusieurs mani√®res de faire, ici nous utiliserons la commande stash\n\nCr√©er un fichier vehicule.py\nModifier le fichier voiture.py\n\npar exemple en ajoutant toto sur la derni√®re ligne\n\ngit stash -u\n\nLe fichier vehicule.py a √©t√© supprim√©\nLe fichier voiture.py est revenu √† l‚Äô√©tat du dernier commit\n\nil est possible de retrouver les fichiers qui ont √©t√© ‚Äústash√©s‚Äù (voir commandes stash et pop)\n\n\n\n\n5.2 Consulter l‚Äôhistorique d‚Äôun fichier\n\n5.2.1 Dans GitHub, aller sur le fichier voiture.py\n\nCliquer sur History\nCela affiche la liste des commits qui ont mis √† jour ce fichier\n\n\n\n5.2.2 Dans Git Bash\n\ngit log voiture.py\n\nCela affiche a peu pr√®s la m√™me chose que dans GitHub\n\nFaire ENTREE pour continuer √† d√©filer\nFaire q comme quit pour sortir\n\nMais ce n‚Äôest pas tr√®s lisible, voire tr√®s moche\nHeureusement la commande git log propose de nombreuses options\n\ngit log affiche une liste de commit\n\nPour la suite, nous ne limeterons pas aux commits impactant le fichier voiture.py mais nous afficherons tous les commits\nvous pouvez ajouter √† la fin de chaque commande le nom d‚Äôun fichier pour se restreindre aux commits sur ce fichier\n\ngit log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\n\nC‚Äôest joli, non ?\nMais un peu p√©nible √† retenir, et long √† √©crire\nC‚Äôest ici que l‚Äôon pr√©sente les alias\n\nVoici deux commandes pour cr√©er les alias nomm√©s arbitrairement bb et cc :\n\ngit config --global alias.bb \"log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\"\ngit config --global alias.cc \"log --all --decorate --oneline --graph\"\nces 2 alias sont √† cr√©er une seule fois\n√©ventuellement vous pouvez en cr√©er d‚Äôautres, ou les modifier\n\nMaintenant essayez git bb et git cc\n\nC‚Äôest de toute beaut√© !\n\n\n\n\n\n\n5.3 Comparer 2 versions d‚Äôun fichier\n\nNoter le num√©ro d‚Äôun commit o√π vous avez modifi√© voiture.py\n\ngit bb voiture.py\nen jaune sur 7 caract√®res alphanum√©riques\nne choisissez pas le plus r√©cent, sinon il n‚Äôy aura aucune diff√©rence\n\ngit diff 7539cf7 voiture.py\n\nremplacer 7539cf7 par votre num√©ro de commit\nvous voyez les diff√©rences la version actuelle et une ancienne version\n\ngit diff\n\npour lister toutes les modifications effectu√©es depuis le dernier commit\ngit diff voiture.py : pour se limiter aux modifications effectu√©e sur ce fichier\n\n\n\n\n\n5.4 Retour vers le pass√©\n\nToujours avec le num√©ro d‚Äôun ancien commit\ngit checkout 7539cf7\n\nHEAD is now 7539cf7\nHEAD est un mot que l‚Äôon retrouve souvent dans Git\n\non peut le traduire par ‚Äút√™te de lecture‚Äù\n\nAu bout de la ligne de commande, ne s‚Äôaffiche plus (main) mais ((7539cf7...))\nVous voici revenu au code tel qu‚Äôil √©tait √† l‚Äô√©poque de ce commit\n\ngit checkout main pour revenir au pr√©sent\n\n\n\n\n5.5 Annuler un commit\n\nEn fait non, on ne verra pas comment annuler un commit, ni sur le d√©p√¥t local, ni sur le d√©p√¥t distant. C‚Äôest possible mais √† vos risques et p√©rils.\nPr√©f√©rez la m√©thode un peu archa√Øque qui consiste √† retourner dans le pass√© pour copier ce qui fonctionnait bien avant.\nEt pour vous faciliter la vie, faites des commits r√©guliers et ne modifiez pas 50 fichiers dans un commit.\n\n\n\n\n\n\n\nTip\n\n\n\nSi √† un moment vous avez peur de faire une b√©tise et de perdre tout votre code (par exemple si une commande Git ne se passe pas comme vous l‚Äôaviez pr√©vu), il est tout a fait possible de copier votre d√©p√¥t. Votre d√©p√¥t local est un dossier, allez dans l‚Äôexplorateur windows, faites CTRL + C CTRL + V et voila vous avez une copie que vous pouvez garder de cot√© au cas o√π √ßa tourne mal.\n\n\nEt surtout n‚Äôh√©sitez pas √† demander de l‚Äôaide !"
  },
  {
    "objectID": "doc/tp-old.html#fonctionnalit√©s-de-github",
    "href": "doc/tp-old.html#fonctionnalit√©s-de-github",
    "title": "Git TP",
    "section": "6 Fonctionnalit√©s de GitHub",
    "text": "6 Fonctionnalit√©s de GitHub\nGitHub n‚Äôest pas seulement un d√©p√¥t distant, il y a de nombreuses fonctionnalit√©s interessantes.\n\nIssues : Pour lister et suivre les incidents ou les √©volutions du programme\nWiki : Pour cr√©er facilement des pages de documentation en langage markdown\nCI/CD (Continuous Integration/Continuous Delivery) : Cela permet lorsque l‚Äôon met √† jour le d√©p√¥t distant de lancer des t√¢ches automatis√©es, par exemple pour : tester le code, √©valuer la qualit√© du code, d√©ployer le code sur une machine de production ou de d√©veloppement‚Ä¶"
  },
  {
    "objectID": "doc/tp-old.html#un-petit-exo-dapplication",
    "href": "doc/tp-old.html#un-petit-exo-dapplication",
    "title": "Git TP",
    "section": "7 Un petit exo d‚Äôapplication",
    "text": "7 Un petit exo d‚Äôapplication\n\nRevenez dans VSCode, ouvrez un terminal Git Bash et positionnez votre terminal dans le dossier P:\\Cours\\Python\\git-tp comme cela a √©t√© fait au d√©but de la partie 2.\nDans VSCode, sur le constructeur de la classe voiture, mettre la valeur par d√©faut de couleur √† verte : def __init__(self, nom, couleur=verte)\nDans GitHub, faites la m√™me modification sur la classe voiture mais en mettant cette fois-ci la couleur jaune\nCr√©ez un nouveau fichier velo.py en copiant le contenu du fichier voiture.py\nModifier la m√©thode accelere() de velo.py pour avoir une vitesse maximale de 80\nCr√©er un point de sauvegarde sur votre d√©p√¥t local (add et commit)\nSynchronisez vos d√©p√¥ts et r√©solvez les conflits (pull et push)"
  },
  {
    "objectID": "doc/open-source.html",
    "href": "doc/open-source.html",
    "title": "Open source",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/open-source.html#contribuer-√†-un-projet-open-source",
    "href": "doc/open-source.html#contribuer-√†-un-projet-open-source",
    "title": "Open source",
    "section": "1 Contribuer √† un projet Open Source",
    "text": "1 Contribuer √† un projet Open Source\n\nFaire un fork du projet\nCloner en local votre fork\nCr√©er une branche (IMPORTANT pour √©viter les conflits)\n\nCorriger sur cette branche\nPousser la branche\n\nCreer une pull request\n\ndepuis mon d√©pot/ma branche\nvers le d√©pot original/master\nMessage\n\n\nPour mettre √† jour son fork :\n\ngit remote add upstream https://d√©pot_original\ngit remote -v\ngit fecth upstream pour r√©cup√©rer les branches du upstream\ngit branch -a\ngit merge upstream/master pour fusionner upstream/master vers ma propre branche master"
  },
  {
    "objectID": "doc/branches.html",
    "href": "doc/branches.html",
    "title": "Les branches",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/branches.html#a-quoi-sert-une-branche",
    "href": "doc/branches.html#a-quoi-sert-une-branche",
    "title": "Les branches",
    "section": "1 A quoi sert une branche ?",
    "text": "1 A quoi sert une branche ?\nImaginez vous avez votre code qui fonctionne bien mais qui est tout moche (avec des duplications‚Ä¶). Comme vous √™tes s√©rieux, vous voulez faire tout bien comme il faut et mettre tout au propre.\nVous faites vos corrections, faites de commits, et puis √† un moment vous en avez marre car plus rien ne fonctionne. Vous avez envie de retourner en arri√®re, ce qui est possible avec ce que l‚Äôon a vu pr√©c√©demment mais pas trivial ni tr√®s propre.\nSi vous connaissiez les branches voici ce que vous auriez fait :\n\ncr√©er une branche nomm√©e ‚Äúrefonte‚Äù\nD√©velopper, Commiter sur cette branche\nSi √† la fin ce que vous avez fait sur cette branche vous plait alors fusion de cette branche avec la branche principale main\nSinon vous pouvez simplement supprimer cette branche\n\nEn gros une branche permet de coder et/ou tester une nouvelle fonctionnalit√© sans polluer la branche principale."
  },
  {
    "objectID": "doc/branches.html#un-petit-exemple-pour-y-voir-plus-clair",
    "href": "doc/branches.html#un-petit-exemple-pour-y-voir-plus-clair",
    "title": "Les branches",
    "section": "2 Un petit exemple pour y voir plus clair",
    "text": "2 Un petit exemple pour y voir plus clair\n\nimaginons que vous voulez ajouter une classe trottinette, mais vous n‚Äô√™tes pas encore s√ªr, alors vous testez sur une branche\ngit switch -c trottinette\n\ncr√©ation d‚Äôune branche trottinette\nSwitched to a new branch ‚Äòtrottinette‚Äô\n\net comme l‚Äôindique le message, avec cette commande vous √™tes directement positionn√© sur cette branche\n\n\nCr√©ez un fichier trottinette.py\nModifiez la vitesse de voiture √† 210 parce que vous √™tes un malade\nadd puis commit\ngit push pour partager sur le d√©p√¥t distant\n\nGit dit que cette branche n‚Äôest pas connue sur le d√©p√¥t distant\nMais comme il est sympa, il donne la commande pour la cr√©er\ngit push --set-upstream origin trottinette\n\nEnsuite revenons sur la branche principale main\n\ngit switch main\n\nModifiez la vitesse maximale de voiture √† 90 parce qu‚Äôen fait vous √™tes tr√®s prudent puis commit\nMaintenant, apr√®s m√ªre r√©flexion, vous vous dites que la trottinette c‚Äôest trop bien et qu‚Äôil faut l‚Äôint√©grer √† la branche main\nVous avec envie de fusionner directement les branches trottinette et main\n\ngit merge trottinette\nSeulement il y a un conflit et c‚Äôest fait expr√©s\nIl a √©t√© dit plus haut que la branche main doit rester le plus propre possible, ainsi on va √©viter de la polluer avec des commits de gestion de conflit. Les conflits doivent √™tre r√©gl√© sur les autres branches\nAnnulons ce merge\n\ngit merge --abort\n\n\nVoici comment nous allons proc√©der pour faire cela proprement\n\nOn retourne sur la branche trottinette\n\ngit switch trottinette\n\nNous allons faire la fusion sur cette branche\n\ngit merge main\nnous r√©solvons le conflit puis commit\n\nMaintenant que les 2 branches sont synchronis√©es, retournons sur la branche main\n\ngit switch main\ngit merge --squash trottinette\n\ncette fois-ci pas de conflits car ils ont √©t√© r√©solu juste avant\n\ngit commit -am \"ajout fonctionnalit√© trottinette\"\n\nL‚Äôoption --squash permet de ne pas polluer le main avec tous les commits r√©alis√©s sur la branche trottinette. Si par la suite vous utilisez GitHub ou GitHub cette option se retrouve directement dans les merge ou les pull requests."
  }
]
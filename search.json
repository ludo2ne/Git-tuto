[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tuto Git",
    "section": "",
    "text": "Une présentation de Git\n\nQu’est ce que Git ?\nÀ quoi ça sert ?\nQuels sont les avantages de Git ?\n\nInstaller et paramètrer Git\nUn TP pour découvrir Git"
  },
  {
    "objectID": "index.html#contenu",
    "href": "index.html#contenu",
    "title": "Tuto Git",
    "section": "",
    "text": "Une présentation de Git\n\nQu’est ce que Git ?\nÀ quoi ça sert ?\nQuels sont les avantages de Git ?\n\nInstaller et paramètrer Git\nUn TP pour découvrir Git"
  },
  {
    "objectID": "doc/presentation.html",
    "href": "doc/presentation.html",
    "title": "Présentation de Git",
    "section": "",
    "text": "Git est un système de contrôle de version distribué, largement utilisé dans le développement logiciel pour suivre les modifications apportées aux fichiers source. Il permet aux développeurs de travailler efficacement en équipe, de gérer les différentes versions du code, de collaborer sur un même projet et de maintenir un historique complet des modifications. Git facilite le développement collaboratif, tout en offrant performance, flexibilité et fiabilité.\n\nGit\n\nLogiciel de gestion de versions\nOpen source, gratuit, très très très utilisé et pas qu’en informatique\ncréé par Linus Torvalds, créateur également du noyau Linux\n\nGit Bash\n\nTerminal pour écrire des commandes git\nPossible d’ouvrir via le menu Démarrer, mais aussi inclus dans Visual Studio Code\n\nGitHub / GitLab\n\nplateforme de développement collaboratif basée sur Git\nhéberge des dépôts Git\nPropose d’autres fonctionnalités (CICD, wiki, gestion des incidents…)"
  },
  {
    "objectID": "doc/presentation.html#git-quest-ce-que-cest",
    "href": "doc/presentation.html#git-quest-ce-que-cest",
    "title": "Présentation de Git",
    "section": "",
    "text": "Git est un système de contrôle de version distribué, largement utilisé dans le développement logiciel pour suivre les modifications apportées aux fichiers source. Il permet aux développeurs de travailler efficacement en équipe, de gérer les différentes versions du code, de collaborer sur un même projet et de maintenir un historique complet des modifications. Git facilite le développement collaboratif, tout en offrant performance, flexibilité et fiabilité.\n\nGit\n\nLogiciel de gestion de versions\nOpen source, gratuit, très très très utilisé et pas qu’en informatique\ncréé par Linus Torvalds, créateur également du noyau Linux\n\nGit Bash\n\nTerminal pour écrire des commandes git\nPossible d’ouvrir via le menu Démarrer, mais aussi inclus dans Visual Studio Code\n\nGitHub / GitLab\n\nplateforme de développement collaboratif basée sur Git\nhéberge des dépôts Git\nPropose d’autres fonctionnalités (CICD, wiki, gestion des incidents…)"
  },
  {
    "objectID": "doc/presentation.html#git-ça-sert-à-quoi",
    "href": "doc/presentation.html#git-ça-sert-à-quoi",
    "title": "Présentation de Git",
    "section": "2 Git, ça sert à quoi ?",
    "text": "2 Git, ça sert à quoi ?\n\nGit permet de suivre les modifications apportées aux fichiers et de gérer efficacement les différentes versions\nGit enregistre un historique complet de toutes les modifications, ce qui permet de retracer l’évolution du projet, d’identifier les changements spécifiques et de revenir à des versions antérieures si nécessaire\nGit facilite la collaboration entre les membres d’une équipe en permettant à plusieurs personnes de travailler simultanément sur le même projet\n\n\n\n\n\n\n\nFigure 1: Source : ThinkR\n\n\n\n\n2.1 Sans Git\n├─── Projet info\n│   ├─── old\n│   │   ├─── Rapport.doc\n│   │   ├─── Rapport_new.doc\n│   │   ├─── Rapport_v1.0.doc\n│   │   └─── Rapport_v1.2.doc\n│   ├─── Rapport_old.doc\n│   ├─── Rapport_2022.05.15.doc\n│   └─── Rapport_2022.05.15_new.doc\n😕 Quelle est la bonne version du fichier ?\n\n\n2.2 Avec Git\n😊 Un seul fichier + l’historique des modifications\n├───Projet info\n│   └───Livrables\n│     └───Rapport.doc\n\nDate         Heure   Auteur      Message commit\n----         -----   ------      --------------\n2022.05.29   23h58   bianca      \"Version finale\"\n2022.05.29   23h40   archibald   \"j'avais oublié l'intro\"\n2022.05.29   21h32   tryphon     \"ajout partie 2\"\n2022.05.29   20h25   bianca      \"v1.1\"\n2022.05.29   20h12   tryphon     \"Création du rapport\""
  },
  {
    "objectID": "doc/presentation.html#principe-général-de-git",
    "href": "doc/presentation.html#principe-général-de-git",
    "title": "Présentation de Git",
    "section": "3 Principe général de Git",
    "text": "3 Principe général de Git\n\n\n\n\n\nflowchart LR\n    github[(Dépot commun)]\n    dev1[(Dépot local 1)]\n    dev2[(Dépot local 2)]\n    dev3[(Dépot local 3)]\n    dev4[(Dépot local 4)]\n    \n    github &lt;--&gt; dev1\n    github &lt;--&gt; dev2\n    dev3 &lt;--&gt; github\n    dev4 &lt;--&gt; github\n\n\n\n\n\n\nGit est distribué, cela signifie que chaque dépôt est une copie complète du projet.\nAvec Git, vous allez avoir plusieurs dépôts de fichiers :\n\nun dépôt commun (dépôt distant)\nun dépôt par contributeur (dépôts locaux)\n\nRemarque : il est tout à fait possible d’avoir plusieurs clones du même dépôt sur son poste\n\n\nGit va aider à synchroniser ces dépôts avec les commandes suivantes :\n\ngit clone : créer une copie du dépôt commun sur son poste\ngit status : voir où l’on en est\ngit add : ajouter de nouveaux fichiers dans le dépôt\ngit commit : créer un point de sauvegarde\ngit pull : récupérer les éventuelles modifications du dépôt distant pour mettre à jour son dépôt local\ngit push : partager ses mises à jour locale sur le dépôt distant"
  },
  {
    "objectID": "doc/presentation.html#les-principales-commandes",
    "href": "doc/presentation.html#les-principales-commandes",
    "title": "Présentation de Git",
    "section": "4 Les principales commandes",
    "text": "4 Les principales commandes\n\n\n\n\n\n\nNote\n\n\n\n😨 Git s’utilise très majoritairement en ligne de commande dans un terminal Git Bash.\n😅 Pas de panique, quelques commandes simples suffisent largement pour travailler avec Git.\nIl existe aussi des interfaces graphiques mais elles sont souvent imparfaites et sources d’erreur.\n\n\n\n4.1 git clone\ngit clone est une commande de Git utilisée pour créer une copie locale complète d’un dépôt distant. Elle télécharge tous les fichiers et l’historique de version du dépôt distant vers votre système local dans un nouveau répertoire.\nExemples :\n\ngit clone https://github.com:&lt;propietaire_depot&gt;/&lt;nom_du_depot&gt;.git\ngit clone git@github.com:ludo2ne/Git-tuto.git\ngit clone https://github.com/ludo2ne/Git-tuto.git\n\nIl y a deux principaux protocoles pour cloner un dépot git : ssh et https. Sans rentrer dans les détails, l’utilisation suivante est préconisée :\n\nssh : si vous souhaitez modifier le code et le partager (nécéssite d’avoir paramétré une clé ssh)\nhttps : si vous voulez simplement avoir une copie locale du code sans partager vos modifications\n\n\n\n4.2 git status\ngit status affiche l’état actuel du répertoire de travail et de l’index. Elle montre :\n\nles fichiers modifiés prêt à rentrer dans le prochain commit (*Changes to be committed)\nles autres fichiers modifiés (Changes not staged for commit)\nles fichiers non suivis (Untracked files)\n\nCette commande est à utiliser sans modération pour voir l’état du dépôt !\n\n\n4.3 git add\ngit add est utilisée pour ajouter des fichiers à l’index, c’est à dire des fichiers que vous souhaitez versionner.\nAutrement dit, si vous faites git add soleil.txt, vous dites à git qu’il faut ajouter ce fichier au dépôt et le versionner.\ngit add . permet d’ajouter tous les fichiers non suivis à l’index\n\n\n\n\n\n\nLe fichier .gitignore\n\n\n\n.gitignore est un fichier présent à la racine du dépôt permettant de dire à Git quels fichiers il doit ignorer. Par exemple :\n\nsi .gitignore contient *.csv ➡️ tous les fichiers csv seront ignorés par Git\nsi .gitignore contient data/ ➡️ le dossier data et son contenu sera ignoré\n\nCela est utile, pour exclure par exemple du dépôt Git :\n\ndes fichiers contenant des mots de passe, des jetons d’accès…\ndes fichiers de données volumineux qui n’ont pas vocation à être versionnés\ndes fichiers de log\n\n\n\n\n\n4.4 git commit\ngit commit -m \"mon_message\" est utilisée pour créer un point de sauvegarde.\nIl est conseillé d’écrire un message court, clair et compréhensible.\n\n\n4.5 git pull\ngit pull récupère les dernières modifications du dépôt distant et met à jour votre dépôt local.\n\n\n\n\n\n\nLes conflits\n\n\n\nQue se passe-t-il si :\n\nAlice a modifié un fichier et poussé sa modification sur le dépôt distant\nVous avez également modifié le même fichier et vous faites un git pull pour mettre à jour votre dépôt à partir du dépôt distant\n\n😨 Un conflit ! Git ne sait pas choisir quelle est la bonne version entre la votre et celle d’Alice.\n😅 Pas de panique ! Pour résoudre le conflit, il faut simplement :\n\nmodifier le fichier en question pour garder la bonne version\ngit add puis git commit pour valider la résolution du conflit\n\n\n\n\n\n4.6 git push\ngit push envoie les modifications locales vers le dépôt distant.\n\n\n\n\n\n\nImportant\n\n\n\nPour pouvoir pousser, il est nécessaire :\n\nd’avoir au préalable créé au minimum un commit\nque votre dépôt soit à jour (pas de retard de version par rapport au dépôt distant)"
  },
  {
    "objectID": "doc/presentation.html#exemples",
    "href": "doc/presentation.html#exemples",
    "title": "Présentation de Git",
    "section": "5 Exemples",
    "text": "5 Exemples\n\n5.1 Exemple 1\n\nSi sur le dépôt distant, le fichier soleil.txt a été créé par une autre personne\nLa commande git pull permet de mettre à jour son dépôt local\nLe fichier soleil.txt apparait sur votre dépôt local\n\n\n\n5.2 Exemple 2\n\nEn local, vous avez créé le fichier temple.py et modifié le fichier soleil.txt\nFaites git add . pour dire à Git que vous souhaitez valider vos modifications\nCréez un point de sauvegarde avec la commande git commit -m \"message de mise à jour\"\nPuis, la commande git push permet de partager cette nouvelle version sur le dépôt distant\nSur le dépôt distant, les 2 fichiers seront créés ou mis à jour\n\nPour gérer les versions, Git utilise des points de sauvegarde appelés commits. Grace à cela, il est possible de consulter les versions antérieures des fichiers."
  },
  {
    "objectID": "doc/presentation.html#les-erreurs-courantes",
    "href": "doc/presentation.html#les-erreurs-courantes",
    "title": "Présentation de Git",
    "section": "6 Les erreurs courantes",
    "text": "6 Les erreurs courantes\n\n6.1 fichier disparu\nSi vous venez de faire un git push et que votre fichier n’apparait pas sur le dépôt distant, c’est probablement parce que vous avez oublié de l’ajouter à l’index avec git add &lt;mon_fichier&gt;.\nAutre possibilité : votre fichier est ignoré par git car il fait parti du .gitignore\n\n\n6.2 git push rejected\n! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs\nhint: Updates were rejected because the remote contains work that you do not\nhint: have locally. This is usually caused by another repository pushing to\nhint: the same ref. If you want to integrate the remote changes, use\nhint: 'git pull' before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nLe message d’erreur est assez explicite. Le dépôt distant a été modifié et votre dépôt local n’est donc plus à jour.\nVous devez commencer par mettre à jour votre dépôt local avec git pull avant de pousser votre code"
  },
  {
    "objectID": "doc/presentation.html#ressources",
    "href": "doc/presentation.html#ressources",
    "title": "Présentation de Git",
    "section": "Ressources",
    "text": "Ressources\n\nFormation Git du Lab INSEE\nBonnes pratiques Git\nGitFlow\nDéveloppement basé sur le tronc\nhttps://pythonds.linogaliana.fr/content/git/exogit.html\n\n\n\n\nFigure 1: Source : ThinkR"
  },
  {
    "objectID": "doc/tp-ensai.html",
    "href": "doc/tp-ensai.html",
    "title": "Git TP ENSAI",
    "section": "",
    "text": "Créez un dossier P:/Cours1A/Git\nAllez sur Moodle &gt; Outils bureautiques pour le statisticien &gt;\nOnglet TP - Git\nTéléchargez\n\nle sujet\nle zip Tp git\nSetup windows"
  },
  {
    "objectID": "doc/tp-ensai.html#paramétrage",
    "href": "doc/tp-ensai.html#paramétrage",
    "title": "Git TP ENSAI",
    "section": "1 Paramétrage",
    "text": "1 Paramétrage\n\nCréer un compte sur GitLab\nsur la VM, double cliquez sur le fichier setup_windows.bat et suivez les instructions\nAjoutez votre clé ssh\n\nEdit profile &gt; SSH Keys\nAdd new key\nDans le cadre Key, clic droit &gt; Coller\nCliquez sur Add key"
  },
  {
    "objectID": "doc/tp-ensai.html#créer-un-projet-gitlab",
    "href": "doc/tp-ensai.html#créer-un-projet-gitlab",
    "title": "Git TP ENSAI",
    "section": "2 Créer un projet GitLab",
    "text": "2 Créer un projet GitLab\n\nSur GitLab &gt; New project &gt; Create blank project\n\ndécochez README\nCreate project"
  },
  {
    "objectID": "doc/tp-ensai.html#créer-son-dépôt-local",
    "href": "doc/tp-ensai.html#créer-son-dépôt-local",
    "title": "Git TP ENSAI",
    "section": "3 Créer son dépôt local",
    "text": "3 Créer son dépôt local\n\nOuvrez VSCode &gt; Open Folder &gt; Dossier P:/Cours1A/Git\nOuvrez un terminal Git Bash\n\ngit init --initial-branch=main pour déclarer le dossier courant comme dépôt local Git\ngit remote add origin git@gitlab.com:&lt;username&gt;/TP_initiation_git.git pour lier votre dépôt local au dépôt distant\n\nen modifiant username par votre nom d’utilisateur GitLab\n\ngit status : pour voir l’état du dépôt\n\nNormalement vous voyez des fichiers Untracked files ie non versionnés par Git\n\ngit add . : ajouter tous les fichiers du dossier à la liste des fichiers suivis par Git\ngit status : pour voir l’état du dépôt\ngit commit -m \"Initial commit\" : créer un point de sauvegarde\ngit push -u origin main : pousser les modification depuis le dépôt local vers le dépôt distant\n\nSi vous actualisez la page GitLab de votre projet, vous devez voir les fichiers"
  },
  {
    "objectID": "doc/tp-ensai.html#hands-on-1",
    "href": "doc/tp-ensai.html#hands-on-1",
    "title": "Git TP ENSAI",
    "section": "4 Hands on 1",
    "text": "4 Hands on 1\nsuivez le sujet"
  },
  {
    "objectID": "doc/tp-ensai.html#code-à-coller",
    "href": "doc/tp-ensai.html#code-à-coller",
    "title": "Git TP ENSAI",
    "section": "Code à coller",
    "text": "Code à coller\n\n\nvoiture.py\n\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\n\n\nfibonacci.py\n\ndef fibonacci(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(fibonacci(i))\n\n\n\npuissance_rec.py\n\ndef puissance_rec(nombre, puissance):\n    if not puissance:\n        return 1\n    elif not puissance % 2:\n        return puissance_rec(nombre, int(puissance / 2)) \\\n            * puissance_rec(nombre, int(puissance / 2))\n    else:\n        return nombre * puissance_rec(nombre, puissance - 1)\n\n\n\nmoto.py\n\nclass Moto:\n    def ______init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 15:\n            increment = 15\n        self.vitesse = min(150, self.vitesse + increment)\n\n\n\nexo1.R\n\na &lt;- c(10,5,3,2) \na[2] \na[3] \na[2:3]\n\n\n\nexo2.R\n\nb &lt;- c(11,6,4,3) \nb[2] \nb[3] \nb[2:3]"
  },
  {
    "objectID": "doc/open-source.html",
    "href": "doc/open-source.html",
    "title": "Open source",
    "section": "",
    "text": "Faire un fork du projet\nCloner en local votre fork\nCréer une branche (IMPORTANT pour éviter les conflits)\n\nCorriger sur cette branche\nPousser la branche\n\nCreer une pull request\n\ndepuis mon dépot/ma branche\nvers le dépot original/master\nMessage\n\n\nPour mettre à jour son fork - git remote add upstream https://dépot_original - git remote -v - git fecth upstream pour récupérer les branches du upstream - git branch -a - git merge upstream/master pour fusionner upstream/master vers ma propre branche master\nPour plus d’infos : https://grafikart.fr/tutoriels/fork-pull-request-591"
  },
  {
    "objectID": "doc/open-source.html#contribuer-à-un-projet-open-source",
    "href": "doc/open-source.html#contribuer-à-un-projet-open-source",
    "title": "Open source",
    "section": "",
    "text": "Faire un fork du projet\nCloner en local votre fork\nCréer une branche (IMPORTANT pour éviter les conflits)\n\nCorriger sur cette branche\nPousser la branche\n\nCreer une pull request\n\ndepuis mon dépot/ma branche\nvers le dépot original/master\nMessage\n\n\nPour mettre à jour son fork - git remote add upstream https://dépot_original - git remote -v - git fecth upstream pour récupérer les branches du upstream - git branch -a - git merge upstream/master pour fusionner upstream/master vers ma propre branche master\nPour plus d’infos : https://grafikart.fr/tutoriels/fork-pull-request-591"
  },
  {
    "objectID": "doc/open-source.html#nommer-ses-commits",
    "href": "doc/open-source.html#nommer-ses-commits",
    "title": "Open source",
    "section": "2 Nommer ses commits",
    "text": "2 Nommer ses commits\n: \nType définit le type de commit\n\nbuild: Système de build (example : gulp, webpack, npm)\nci: Intégration continue (example scopes: Travis, Circle, BrowserStack, SauceLabs)\ndocs: Documentation\nfeat: Ajout d’une fonctionnalité\nfix: Correction de bogue\nperf: Amélioration des performances\nrefactor: Changement du code qui ne change rien au fonctionnement\ntest: Modification des tests"
  },
  {
    "objectID": "doc/parametrage.html",
    "href": "doc/parametrage.html",
    "title": "Paramétrer Git",
    "section": "",
    "text": "🚧"
  },
  {
    "objectID": "doc/parametrage.html#objectifs",
    "href": "doc/parametrage.html#objectifs",
    "title": "Paramétrer Git",
    "section": "Objectifs",
    "text": "Objectifs\n\nInstaller Git\nConfigurer Git\nCréer un compte GitHub"
  },
  {
    "objectID": "doc/parametrage.html#installer-git",
    "href": "doc/parametrage.html#installer-git",
    "title": "Paramétrer Git",
    "section": "1 Installer Git",
    "text": "1 Installer Git\n\nSuivez les instructions pour installer Git"
  },
  {
    "objectID": "doc/parametrage.html#paramètrer-git",
    "href": "doc/parametrage.html#paramètrer-git",
    "title": "Paramétrer Git",
    "section": "2 Paramètrer Git",
    "text": "2 Paramètrer Git\n\n\n\n\n\n\nNote\n\n\n\nLe paramètrage de Git n’est pas très drôle et peut faire un peu peur.\nMais pas de panique, c’est à faire une et une seule fois sur votre machine !\n\n\n\n2.1 Configuration Git Bash\nGit Bash est un Terminal où l’on peut écrire des commandes git.\nOuvrir Git Bash et entrer une à une les commandes suivantes\ngit config --global user.name \"Prenom Nom\"\ngit config --global user.email prenom.nom@eleve.ensai.fr\ngit config -l\nLa dernière commande permet de vérifier que les 2 attributs user.name et user.email sont bien renseignés\n\n\n2.2 Clé SSH\nAfin de pouvoir faire des mises à jour sur le dépôt distant, il faut que votre machine (locale) soit reconnue. Vous devez donc fournir une clé d’authentification à GitLab.\nToujours dans Git Bash, lancer une à une ces 2 commandes. La première commande permet de générer une clé publique SSH. La seconde permet de récupérer la valeur de cette clé.\nssh-keygen -t rsa -b 4096 -C \"prenom.nom@eleve.ensai.fr\"\n\n## tapez ENTREE à chaque question\n\n## Récupérez le contenu de la clé avec la commande\ncat $HOME/.ssh/id_rsa.pub          # cat /c/Users/idxxxx/.ssh/id_rsa.pub\n\nLa commande cat renvoie tout le contenu de ce fichier\n\nEn cas d’échec, vous pouvez aller dans le dossier caché C:/Users/idxxxx/.ssh/ et ouvrir avec Notepad le fichier id_rsa.pub\nsi vous ne trouvez toujours pas le fichier id_rsa.pub, retournez voir le résultat de la commande ssh-keygen, il est écrit dans quel dossier la clé a été générée\n\nSélectionner ce contenu et le copier dans notepad pour la prochaine étape\n\n\nCréez une copie de votre clé\nIl arrive que le dossier C:/Users/idxxxx/.ssh soit supprimé.\nIl est interessant d’avoir une copie de cette clé pour la restaurer si besoin.\n\ncp -r $HOME/.ssh /p pour copier le dossier dans le disque P:\n\n\n\n\n\n2.3 Créer un compte sur GitHub\nSur GitHub, vous pourrez héberger votre projet. GitHub fera office de dépôt distant.\nD’autres alternatives existent avec des fonctionnalités similaires : GitLab, Bitbucket…\n\nGitHub\n\n\n\n2.4 Déclarer votre clé publique SSH à GitHub\n\nDans GitHub, aller dans Paramètres, puis SSH and GPG Keys\n\nNew SSH key\ndonnez un titre et coller dans Key le résultat de l’étape 2\n\n\n🎊 Bravo le paramètrage est terminé\n\n\n2.5 En cas d’erreurs\n\nThe authenticity of host xxx can’t be established\nThe authenticity of host 'github.com (140.82.121.4)' can't be established.  \nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.    \n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nVérifiez que le dossier C:/users/idxxxx/.ssh existe et contient les fichiers id_rsa et id_rsa.pub. Si oui passer à l’étape 2.\n\nSi non, recopiez votre clé dans C:/users/idxxxx/.ssh à partir de la sauvegarde que vous avez faite dans P:/.ssh lors de la création de la clé. Pour automatiser ceci, vous pouvez créer un script restore_ssh.bat sur le bureau contenant le code ci-dessous :\nset \"source=P:\\.ssh\"\nset \"destination=%HOME%\\.ssh\"\nxcopy /E /H /I /Y \"%source%\" \"%destination%\"\npause\n\nVérifiez que la clé id_rsa.pub est bien déclarée dans GitLab ou GitHub. Si le problème persiste, regénérez une nouvelle clé ssh et déclarez là dans GitHub ou GitLab."
  },
  {
    "objectID": "doc/tp.html",
    "href": "doc/tp.html",
    "title": "Git TP",
    "section": "",
    "text": "Présenter les fonctionnalités de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nRésoudre un conflit\nbonus : retour en arrière, branches…"
  },
  {
    "objectID": "doc/tp.html#objectifs",
    "href": "doc/tp.html#objectifs",
    "title": "Git TP",
    "section": "",
    "text": "Présenter les fonctionnalités de base de Git\nManipuler les 5 commandes principales (status, add, commit, pull, push)\nRésoudre un conflit\nbonus : retour en arrière, branches…"
  },
  {
    "objectID": "doc/tp.html#créer-un-projet",
    "href": "doc/tp.html#créer-un-projet",
    "title": "Git TP",
    "section": "1 Créer un projet",
    "text": "1 Créer un projet\nℹ️ Ce projet permettra d’héberger le dépôt distant\n\nse connecter à GitHub\nEn haut à gauche, cliquez sur l’icone GitHub, puis sur New\n\nou directement : Create a new repository\n\nRepository name : git-tp\nPublic\nAdd a README file\nAdd .gitignore (python)\nCreate Project\n\n\n1.1 Le fichier .gitignore\n\n\n\n\n\n\nTip\n\n\n\n.gitignore est un fichier présent à la racine du dépôt permettant de dire à Git quels fichiers il faut ignorer. Par exemple :\n\nsi .gitignore contient *.csv\net sur votre dépôt local, vous avez un fichier resultats.csv\nGit fera comme si ce fichier n’existe pas\nAinsi, ce fichier ne sera jamais poussé vers le dépôt distant\n\n\n\n\n\n1.2 Inviter d’autres membres\nVous venez de créer un projet public donc visible par tous. Cependant, vous êtes seul à pouvoir modifier ce projet. Pour autoriser d’autres personnes à écrire sur ce projet (par exemple lors du projet info), il faut donner les droits en écriture.\nSur la page de votre dépôt, allez dans :\n\nSettings &gt; Collaborators\nAdd people\n\nCependant ce n’est pas nécessaire dans le cadre de ce TP, vous pouvez donc passer à la suite."
  },
  {
    "objectID": "doc/tp.html#cloner-le-projet",
    "href": "doc/tp.html#cloner-le-projet",
    "title": "Git TP",
    "section": "2 Cloner le projet",
    "text": "2 Cloner le projet\n\n\n\n\n\n\nNote\n\n\n\nLe but de cette étape est de créer votre dépôt local en faisant un clone du dépôt distant\n\n\n\nOuvrir Visual Studio Code\nOuvrir un Terminal\nOuvrir un Terminal Git Bash\n\nEn haut à droite du terminal, à coté du +, cliquer sur la flèche vers le bas ˅\n\nCréer le dossier ci-dessous s’il n’existe pas déjà\n\nmkdir /p/Cours/Python\n\nSe positionner dans ce dossier\n\ncd /p/Cours/Python\n\nCloner le projet\n\ngit clone git@github.com:???????/git-tp.git\n\nRemplacer les ?????? par votre nom d’utilisateur GitHub\nOu sinon sur la page GitHub du projet\n\ncliquer sur Clone\ncopier la ligne qui commence par git@github...\n\n\nAre you sure you want to continue connecting (yes/no)?\n\ntaper yes puis ENTREE\n\nVotre dépôt local est maintenant créé\n\nOuvrir ce dépôt dans l’explorateur VSCode\n\nFile &gt; Open Folder\ngit-tp\n\nRé-ouvrir le terminal Git Bash\n\nSi ce n’est pas le cas, se positionner dans le dossier suivant :\n\ncd /p/Cours/Python/git-tp\"\n\nun (main) apparait dans le terminal, cela signifie bien que vous êtes dans un dépôt Git"
  },
  {
    "objectID": "doc/tp.html#ajouter-un-nouveau-fichier",
    "href": "doc/tp.html#ajouter-un-nouveau-fichier",
    "title": "Git TP",
    "section": "3 Ajouter un nouveau fichier",
    "text": "3 Ajouter un nouveau fichier\n\n\n\n\n\n\nNote\n\n\n\nNous allons ici voir comment :\n\najouter/modifier des fichiers dans le dépôt local\nenvoyer ces mises à jour au dépôt distant\n\n\n\nDans le dossier git-tp, créer un fichier voiture.py contenant le code suivant :\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\nDans le terminal Git Bash, exécuter les commandes suivantes :\ngit status\n\nLe fichier apparait dans les Untracked files\nCela siginifie que Git a repéré ce fichier mais pour le moment il ne le versionnera pas\n\ngit add voiture.py\n\npour dire à Git de suivre ce fichier\n\ngit status\n\nmaintenant le fichier est reconnu par Git\n\ngit commit -m \"creation classe voiture\"\n\npour créer un point de sauvegarde\nEntre les \" \", mettre un message court et explicite\n\ngit status\n\nYour branch is ahead of ‘origin/main’ by 1 commit\nCe qui signifie que votre dépôt local est en avance d’un commit par rapport au dépôt distant\n\ngit pull\n\nAlready up to date\nPour vérifier que le dépôt distant n’a pas été mis à jour\n\ngit push\n\nVérifier qu’il n’y a pas d’erreur\nPour mettre à jour le dépôt distant avec mes modifications locales\n\n\n\n\n\n\n\n\nCombiner les commandes add et commit\n\n\n\nDans le cas d’un nouveau fichier, il faut impérativement enchaîner les deux commandes suivantes pour que Git suive ce fichier :\n\ngit add mon_fichier.py\ngit commit -m \"Creation mon_fichier\"\n\nSi le fichier existait déjà, il est possible de combiner les deux commandes :\n\nen ajoutant au commit un a qui signifie add\ngit commit -am \"Modification mon_fichier\"\n\n\n\n💡 Si vous créez, non pas un mais plusieurs fichiers, vous pouvez utiliser la commande suivante pour tous les faire suivre par Git : git add .\n\n\n\n\n\n\nImportant\n\n\n\nIl est fortement recommandé de créer des commits très fréquement, par exemple\n\nVous venez de modifier une fonction\nTestez pour vérifier que votre code fonctionne bien\nCréez un commit\nSi jamais par la suite vous “cassez tout” et que plus rien ne marche, il est facile de revenir au dernier commit"
  },
  {
    "objectID": "doc/tp.html#gérer-un-conflit",
    "href": "doc/tp.html#gérer-un-conflit",
    "title": "Git TP",
    "section": "4 Gérer un conflit",
    "text": "4 Gérer un conflit\n\nDans le monde merveilleux de Git, tout se passe bien quand chacun travaille sur des fichiers différents. Lorsque deux personnes ont modifié le même fichier, ça peut se compliquer.\nAu moment de la synchronisation des dépôts, Git va tenter de faire un auto-merge. Celui-ci fonctionnera bien si par exemple l’une des deux personnes a modifié le début du fichier et l’autre la fin.\nPar contre, si les modifications concernent le même endroit, Git ne peut pas décider seul quelle est la bonne version et demande à l’utilisateur de choisir quelles lignes il souhaite conserver.\n\nNous allons créer artificiellement un conflit, c’est à dire faire comme si 2 personnes avaient modifié le même fichier. Ce cas de figure arrivera inévitablement lorsque vous travaillerez à plusieurs sur un projet.\n\n\n\n\n\n\nImportant\n\n\n\nIl faut bien avoir en tête qu’un conflit :\n\nce n’est pas grave\nce n’est pas une erreur\nvous n’avez pas tout cassé\n😱 il ne faut pas paniquer, simplement savoir comment le résoudre\n\n\n\n\nDans GitHub, cliquer sur le fichier voiture.py\nPuis sur la petite flèche après Open in web IDE et Edit\nCliquer sur Edit\n\nRemplacer à la dernière ligne 130 par 110\nCommit changes\nLe fichier a été modifié sur le dépôt distant\n\nDans VSCode, éditer le fichier voiture.py\n\nRemplacer à la dernière ligne 130 par 150 et enregistrer\ngit status\n\nle fichier voiture.py est à l’état modifié\n\ngit commit -am \"Modif vitesse max\"\nLe fichier a été modifié sur le dépôt local\n\ngit push\n\n⚠️ Error : petit piège, il faut toujours faire un pull avant de tenter un push\nLe dépôt distant a été modifié\nJe dois d’abord récupérer ces modifications sur mon dépôt local (pull)\nEnsuite seulement je pourrai mettre à jour le dépôt distant (push)\n\ngit pull\n\n🚨 Conflict - Automatic merge failed\nSur les 2 dépôts, la même ligne a été modifiée\n\nAinsi dans le cas présent, Git ne peut pas savoir quelle version choisir\n\ndans le terminal Git est au statut (main|MERGING)\n\ngit status\n\nboth modified: voiture.py\n\nDans VSCode, ouvrir le fichier voiture.py, on voit s’afficher :\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n        self.vitesse = min(150, self.vitesse + increment)\n******=\n        self.vitesse = min(110, self.vitesse + increment)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; d29aa04e48e16d3648fd4ae9796b4a035e176f1c\n\nMaintenant il faut choisir quelle ligne on garde\n\nCelle du dessus est la notre (dépôt local)\nCelle du dessous est celle telle qu’elle a été modifiée sur le dépôt distant\n\nSupprimer la ligne avec le 110, ainsi que les lignes avec &lt;&lt;&lt;&lt;&lt;, ****= et &gt;&gt;&gt;&gt;&gt;\n\nOu cliquer simplement sur le bouton VSCode Accept Current Change\nEnregistrer\n\n💡 En théorie, à cet instant, il faut tester de nouveau que le programme fonctionne bien, cependant ce n’est pas l’objet de ce TP\ngit commit -am \"Resolve merge\"\n\ncela crée un nouveau point de sauvegarde pour valider le merge\ndans le terminal Git repasse au statut (main)\n\ngit status\ngit push\n\ncette fois ci, c’est ok, les modifications faites sur le dépôt local sont poussées vers le dépôt distant\n\n🎉 Félicitations, vous venez de résoudre votre 1er conflit\n\nc’était pas compliqué, hein ?\n\n\n\nLes parties 3 et 4 sont de très loin les plus importantes. Pour utiliser efficacement Git, il faut impérativement avoir bien compris comment utiliser les 5 commandes principales (status, add, commit ,pull, push) et savoir résoudre des conflits.\nLa suite permet d’aller un peu plus loin si vous commencez à être à l’aise."
  },
  {
    "objectID": "doc/tp.html#revenir-en-arrière",
    "href": "doc/tp.html#revenir-en-arrière",
    "title": "Git TP",
    "section": "5 Revenir en arrière",
    "text": "5 Revenir en arrière\nℹ️ L’intérêt de versionner est d’avoir la possibilité de revenir en arrière si besoin !\nSoyons clair, revenir en arrière n’est pas une action anodine et nécessite parfois une certaine maîtrise de Git. Nous nous contenterons donc ici de quelques outils de base.\n\n\n5.1 Revenir au dernier commit\nComme souvent avec Git, il y a plusieurs manières de faire, ici nous utiliserons la commande stash\n\nCréer un fichier vehicule.py\nModifier le fichier voiture.py\n\npar exemple en ajoutant toto sur la dernière ligne\n\ngit stash -u\n\nLe fichier vehicule.py a été supprimé\nLe fichier voiture.py est revenu à l’état du dernier commit\n\nil est possible de retrouver les fichiers qui ont été “stashés” (voir commandes stash et pop)\n\n\n\n\n5.2 Consulter l’historique d’un fichier\n\n5.2.1 Dans GitHub, aller sur le fichier voiture.py\n\nCliquer sur History\nCela affiche la liste des commits qui ont mis à jour ce fichier\n\n\n\n5.2.2 Dans Git Bash\n\ngit log voiture.py\n\nCela affiche a peu près la même chose que dans GitHub\n\nFaire ENTREE pour continuer à défiler\nFaire q comme quit pour sortir\n\nMais ce n’est pas très lisible, voire très moche\nHeureusement la commande git log propose de nombreuses options\n\ngit log affiche une liste de commit\n\nPour la suite, nous ne limeterons pas aux commits impactant le fichier voiture.py mais nous afficherons tous les commits\nvous pouvez ajouter à la fin de chaque commande le nom d’un fichier pour se restreindre aux commits sur ce fichier\n\ngit log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\n\nC’est joli, non ?\nMais un peu pénible à retenir, et long à écrire\nC’est ici que l’on présente les alias\n\nVoici deux commandes pour créer les alias nommés arbitrairement bb et cc :\n\ngit config --global alias.bb \"log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\"\ngit config --global alias.cc \"log --all --decorate --oneline --graph\"\nces 2 alias sont à créer une seule fois\néventuellement vous pouvez en créer d’autres, ou les modifier\n\nMaintenant essayez git bb et git cc\n\nC’est de toute beauté !\n\n\n\n\n\n\n5.3 Comparer 2 versions d’un fichier\n\nNoter le numéro d’un commit où vous avez modifié voiture.py\n\ngit bb voiture.py\nen jaune sur 7 caractères alphanumériques\nne choisissez pas le plus récent, sinon il n’y aura aucune différence\n\ngit diff 7539cf7 voiture.py\n\nremplacer 7539cf7 par votre numéro de commit\nvous voyez les différences la version actuelle et une ancienne version\n\ngit diff\n\npour lister toutes les modifications effectuées depuis le dernier commit\ngit diff voiture.py : pour se limiter aux modifications effectuée sur ce fichier\n\n\n\n\n\n5.4 Retour vers le passé\n\nToujours avec le numéro d’un ancien commit\ngit checkout 7539cf7\n\nHEAD is now 7539cf7\nHEAD est un mot que l’on retrouve souvent dans Git\n\non peut le traduire par “tête de lecture”\n\nAu bout de la ligne de commande, ne s’affiche plus (main) mais ((7539cf7...))\nVous voici revenu au code tel qu’il était à l’époque de ce commit\n\ngit checkout main pour revenir au présent\n\n\n\n\n5.5 Annuler un commit\n\nEn fait non, on ne verra pas comment annuler un commit, ni sur le dépôt local, ni sur le dépôt distant. C’est possible mais à vos risques et périls.\nPréférez la méthode un peu archaïque qui consiste à retourner dans le passé pour copier ce qui fonctionnait bien avant.\nEt pour vous faciliter la vie, faites des commits réguliers et ne modifiez pas 50 fichiers dans un commit.\n\n\n\n\n\n\n\nTip\n\n\n\nSi à un moment vous avez peur de faire une bétise et de perdre tout votre code (par exemple si une commande Git ne se passe pas comme vous l’aviez prévu), il est tout a fait possible de copier votre dépôt. Votre dépôt local est un dossier, allez dans l’explorateur windows, faites CTRL + C CTRL + V et voila vous avez une copie que vous pouvez garder de coté au cas où ça tourne mal.\n\n\nEt surtout n’hésitez pas à demander de l’aide !"
  },
  {
    "objectID": "doc/tp.html#fonctionnalités-de-github",
    "href": "doc/tp.html#fonctionnalités-de-github",
    "title": "Git TP",
    "section": "6 Fonctionnalités de GitHub",
    "text": "6 Fonctionnalités de GitHub\nGitHub n’est pas seulement un dépôt distant, il y a de nombreuses fonctionnalités interessantes.\n\nIssues : Pour lister et suivre les incidents ou les évolutions du programme\nWiki : Pour créer facilement des pages de documentation en langage markdown\nCI/CD (Continuous Integration/Continuous Delivery) : Cela permet lorsque l’on met à jour le dépôt distant de lancer des tâches automatisées, par exemple pour : tester le code, évaluer la qualité du code, déployer le code sur une machine de production ou de développement…"
  },
  {
    "objectID": "doc/tp.html#un-petit-exo-dapplication",
    "href": "doc/tp.html#un-petit-exo-dapplication",
    "title": "Git TP",
    "section": "7 Un petit exo d’application",
    "text": "7 Un petit exo d’application\n\nRevenez dans VSCode, ouvrez un terminal Git Bash et positionnez votre terminal dans le dossier P:\\Cours\\Python\\git-tp comme cela a été fait au début de la partie 2.\nDans VSCode, sur le constructeur de la classe voiture, mettre la valeur par défaut de couleur à verte : def __init__(self, nom, couleur=verte)\nDans GitHub, faites la même modification sur la classe voiture mais en mettant cette fois-ci la couleur jaune\nCréez un nouveau fichier velo.py en copiant le contenu du fichier voiture.py\nModifier la méthode accelere() de velo.py pour avoir une vitesse maximale de 80\nCréer un point de sauvegarde sur votre dépôt local (add et commit)\nSynchronisez vos dépôts et résolvez les conflits (pull et push)"
  },
  {
    "objectID": "doc/tp.html#les-branches",
    "href": "doc/tp.html#les-branches",
    "title": "Git TP",
    "section": "8 Les branches",
    "text": "8 Les branches\nℹ️ Uniquement si vous êtes à l’aise\n\n8.1 A quoi sert une branche ?\nImaginez vous avez votre code qui fonctionne bien mais qui est tout moche (avec des duplications…). Comme vous êtes sérieux, vous voulez faire tout bien comme il faut et mettre tout au propre.\nVous faites vos corrections, faites de commits, et puis à un moment vous en avez marre car plus rien ne fonctionne. Vous avez envie de retourner en arrière, ce qui est possible avec ce que l’on a vu précédemment mais pas trivial ni très propre.\nSi vous connaissiez les branches voici ce que vous auriez fait :\n\ncréer une branche nommée “refonte”\nDévelopper, Commiter sur cette branche\nSi à la fin ce que vous avez fait sur cette branche vous plait alors fusion de cette branche avec la branche principale main\nSinon vous pouvez simplement supprimer cette branche\n\nEn gros une branche permet de coder et/ou tester une nouvelle fonctionnalité sans polluer la branche principale.\n\n\n\n8.2 Un petit exemple pour y voir plus clair\n\nimaginons que vous voulez ajouter une classe trottinette, mais vous n’êtes pas encore sûr, alors vous testez sur une branche\ngit checkout -b trottinette\n\ncréation d’une branche trottinette\nSwitched to a new branch ‘trottinette’\n\net comme l’indique le message, avec cette commande vous êtes directement positionné sur cette branche\n\n\nCréez un fichier trottinette.py\nModifiez la vitesse de voiture à 210 parce que vous êtes un malade\nadd puis commit\ngit push pour partager sur le dépôt distant\n\nGit dit que cette branche n’est pas connue sur le dépôt distant\nMais comme il est sympa, il donne la commande pour la créer\ngit push --set-upstream origin trottinette\n\nEnsuite revenons sur la branche principale main\n\ngit checkout main\n\nModifiez la vitesse maximale de voiture à 90 parce qu’en fait vous êtes très prudent puis commit\nMaintenant, après mûre réflexion, vous vous dites que la trottinette c’est trop bien et qu’il faut l’intégrer à la branche main\nVous avec envie de fusionner directement les branches trottinette et main\n\ngit merge trottinette\nSeulement il y a un conflit et c’est fait exprés\nIl a été dit plus haut que la branche main doit rester le plus propre possible, ainsi on va éviter de la polluer avec des commits de gestion de conflit. Les conflits doivent être réglé sur les autres branches\nAnnulons ce merge\n\ngit merge --abort\n\n\nVoici comment nous allons procéder pour faire cela proprement\n\nOn retourne sur la branche trottinette\n\ngit checkout trottinette\n\nNous allons faire la fusion sur cette branche\n\ngit merge main\nnous résolvons le conflit puis commit\n\nMaintenant que les 2 branches sont synchronisées, retournons sur la branche main\n\ngit checkout main\ngit merge --squash trottinette\n\ncette fois-ci pas de conflits car ils ont été résolu juste avant\n\ngit commit -am \"ajout fonctionnalité trottinette\"\n\nL’option --squash permet de ne pas polluer le main avec tous les commits réalisés sur la branche trottinette. Si par la suite vous utilisez GitHub ou GitHub cette option se retrouve directement dans les merge ou les pull requests."
  }
]
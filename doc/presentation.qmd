---
title: "Introduction à Git"
description: "[Slides](presentation-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
  revealjs:
    theme: moon
    footer: "[Home](../index.html) --- [Introduction à Git](presentation.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: presentation-slides.html
from: markdown+emoji
lightbox: true
---

## Introduction

Imaginez que vous faites parti d'une équipe de 5 personnes qui doit coder une application de jeux de cartes.

Comment faites-vous pour mettre en commun votre code ?

- Vous développez votre partie chacun de votre coté et à la fin, vous mettez tout en commun
- Vous envoyez vos programmes par mail
- Vous créer un dossier commun que vous mettez à jour manuellement


## Git

- Versionner son code
- Historique des modifications
- Travail en équipe
- Décentralisé


## Pourquoi versionner ?

- Quelle est la bonne version ?
- Comment faire pour revenir en arrière ?
- Qui a écrit ce code ? Quand ?

::: {.notes}
- les questions que l'on peut se poser en projet
:::


### Pour connaitre la véritable dernière version

::: {.notes}
- imaginons que vous partagiez un dossier commun
- ou encore que ce fichier soit dans des mails
:::

::: {.panel-tabset .nav-pills}

#### Sans Git

```
├─── Projet info
│   ├─── old
│   │   ├─── Rapport.txt
│   │   ├─── Rapport_new.txt
│   │   ├─── Rapport_v1.0.txt
│   │   └─── Rapport_v1.2.txt
│   ├─── Rapport_old.txt
│   ├─── Rapport_2022.05.15.txt
│   └─── Rapport_2022.05.15_new.txt
```

:confused: Quelle est la bonne version du fichier ?

#### Avec Git

:blush: Un seul fichier + l'historique des modifications

```
├───Projet info
│   └───Livrables
│     └───Rapport.txt

Date         Heure   Auteur      Message commit
----         -----   ------      --------------
2022.05.29   23h58   bianca      "Version finale"
2022.05.29   23h40   archibald   "j'avais oublié l'intro"
2022.05.29   21h32   tryphon     "ajout partie 2"
2022.05.29   20h25   bianca      "v1.1"
2022.05.29   20h12   tryphon     "Création du rapport"
```

#### Objectif

::: {#fig-thinkr}
![](img/thinkR_git_avec_sans.png){width=40%}

Source : [ThinkR](https://thinkr.fr/travailler-avec-git-via-rstudio-et-versionner-son-code/){target="_blank"}
::: 

:::


### Ancien code commenté{.smaller}

::: {.panel-tabset .nav-pills}

#### Sans Git

```{.R filename="analyse.R"}
library(ggplot2)

data <- data.frame(x = seq(-4, 4, length=100))
data$y <- dnorm(data$x)

# plot(data$x, data$y, type="l", lwd=2, col="blue",
#      main="Densité de la loi normale centrée réduite",
#      xlab="x", ylab="Densité")
# abline(h=0, col="gray")

ggplot(data, aes(x = x, y = y)) +
  geom_line(color = "blue", size = 1) +
  ggtitle("Densité de la loi normale centrée réduite") +
  xlab("x") +
  ylab("Densité") +
  theme_minimal()
```


#### Avec Git

```{.R filename="analyse.R - Commit 05016ab - Date 2024.06.02 - Author tryphon"}
data$y <- dnorm(data$x)

plot(data$x, data$y, type="l", lwd=2, col="blue",
     main="Densité de la loi normale centrée réduite",
     xlab="x", ylab="Densité")
abline(h=0, col="gray")
```

<br>

```{.R filename="analyse.R - Commit f97f766 - Date 2024.06.04 - Author bianca"}
library(ggplot2)

data <- data.frame(x = seq(-4, 4, length=100))
data$y <- dnorm(data$x)

ggplot(data, aes(x = x, y = y)) +
  geom_line(color = "blue", size = 1) +
  ggtitle("Densité de la loi normale centrée réduite") +
  xlab("x") +
  ylab("Densité") +
  theme_minimal()
```

:::

::: {.notes}
Vous passez de R-base à ggplot2
:::

## La solution

::: incremental
![](img/git-logo.jpg){.r-stretch}
:::

::: {.notes}
- **git** : connard en argot britannique
:::

## Historique

- Créé par Linus Torvalds en 2005 
- Pour gérer le développement du noyau Linux
- Le standard incontournable de la gestion de versions
- Anciens outils : CVS, SVN

::: {.notes}
- Standard : produit qui s'est imposé par l'usage (ex : Moteur de recherche Google, TCP/IP)
:::

## Logiciel

- Logiciel Libre
- Gratuit
- S'utilise en ligne de commande

::: {.callout-note}
:fearful: Git s'utilise très majoritairement en [ligne de commande]{.underline} dans un terminal `Git Bash`.  
:sweat_smile: Pas de panique, quelques commandes simples suffisent largement pour travailler avec Git.

Il existe aussi des interfaces graphiques mais elles sont souvent imparfaites et sources d'erreur.
:::

::: {.notes}
- Logiciel libre : 
  - code source est ouvert et disponible
  - permettant à quiconque de l'utiliser, le modifier, et le distribuer librement
  - différent de gratuit
:::

## Git Bash

- Terminal de commande
- Plusieurs manières de lancer (Menu Windows, clic droit, inclus dans VSCode)

![](img/git-bash.PNG){.r-stretch}

::: {.notes}
Lors de l'installation de Git, choisissez le terminal Unix
:::

### Commandes Unix {.smaller}

| Commande                          | Description                                        |
|-----------------------------------|----------------------------------------------------|
| `ls` (ou `ll`)                    | Liste le contenu d'un répertoire                   |
| `pwd`                             | Affiche le répertoire courant                      |
| `cd <directory>`                  | Change le répertoire de travail courant            |
| `mv <src_file> <dest_file>`       | Déplace des fichiers ou des répertoires            |
| `cp <src_file> <dest_file>`       | Copie un fichier ou un répertoire                  |
| `mkdir <directory>`               | Crée un nouveau répertoire                         |
| `rm <file_or_dir>`                | Supprime des fichiers ou des répertoires           |
| `touch <filename>`                | Crée un nouveau fichier vide                       |
| `cat <filename>`                  | Affiche le contenu d'un fichier                    |
| `grep <text> <filename>`          | Rechercher dans un fichier                         |
| `man <command_name>`              | Manuel d'utilisation de la commande                |

::: {.notes}
- ce qui est entre < ... > est à remplacer
- ls : list 
- cd : change directory
- pwd : print working directory
- mkdir : make directory
- pour éditer un fichier : vi, nano
:::

### Commandes Unix - Exemples

Pour chaque commande, de nombreuses options sont disponibles

```{.bash}
ll *.py                  # liste tous les fichiers python du répertoire courantes
ll *.py > a.txt          # créer un fichier a.txt contenant le résultat de la commande
cd ..                    # Se positionne dans le répertoire parent
cd ../projet/src         # remonter dans le dossier parent puis aller dans projet puis src
cp /p/image.jpg .        # copie le fichier image.jpg du disque P dans le dossier courant (.)
```

::: {.callout-tip}
- `.` représente le dossier courant
- `..` représente le dossier parent
:::


## Versionner son code

### Créer un commit

2 étapes pour créer une nouvelle version :

- `git add <filename>`
  - ajouter le fichier à l'index (ie. dire à Git de suivre ce fichier)
  - `git add .` : pour ajouter tous les fichiers
- `git commit -m "mon message de sauvegarde"`

::: {.notes}
- git utilise la sauvegarde incrémentale
- il ne garde que les modifs apportées depuis le dernier commit
- message dans commit : "fix: ", "feat: "

https://talks.freelancerepublik.com/git-commandes-indispensables-developpeurs/
:::

### Exemple

::: {.panel-tabset .nav-pills}

#### v0

Voici votre dépôt avant de commencer à coder.

```
├─── Projet info
│   ├─── src
│   │   ├─── main.py
│   └─── doc
│   │   └─── Rapport.txt
```

#### Je code

Vous avez modifié un fichier et créé un nouveau.

```
├─── Projet info
│   ├─── src
│   │   ├─── main.py               <- fichier modifié
│   │   ├─── velo.py               <- nouveau fichier
│   └─── doc
│   │   └─── Rapport.txt
```

#### v1

j'ajoute les fichiers créés ou modifiés à l'index :

- `git add .`

je crée un point de sauvegarde

- `git commit -m "ajout de l'utilisation de velo"`


#### Schéma

![](img/git-commit.PNG){.r-stretch}

- je viens de créer un nouveau commit
- il est possible de consulter les commits précédents
  - `git checkout <commit_number>`
  - les fichiers de votre dépôt sont alors dans l'état où ils étaient à ce commit

<!--
```{mermaid}
gitGraph:
  commit tag:"v0"
  commit tag:"v1"
```
-->

:::



## Travail en équipe

### Dépôt local et dépôt distant

- 1 dépôt distant
  - appelé aussi **remote**
  - hébergé sur une forge (GitHub, GitLab, Bitbucket...)
- n dépôts locaux
  - **clone** sur votre machine
  - git permet la synchronisation des dépôts

::: {.callout-note title="Remarque"}
Il est tout à fait possible d'avoir plusieurs clones du même dépôt sur son poste
:::


### Dépôt local et dépôt distant

::: {.callout-tip}
Chaque dépôt est une copie intégrale du projet
:::

```{mermaid}
flowchart LR
    github[(Dépot distant)]
    dev1[(Dépot local 1)]
    dev2[(Dépot local 2)]
    dev3[(Dépot local 3)]
    dev4[(Dépot local 4)]
    
    github <--> dev1
    github <--> dev2
    dev3 <--> github
    dev4 <--> github
```







## Concepts

- Clonage d'un dépôt
- Concept de commit
- Commandes Git Bash
- txt




----




## Git, qu'est ce que c'est ?

Git est un système de contrôle de version distribué, largement utilisé dans le développement logiciel pour suivre les modifications apportées aux fichiers source. Il permet aux développeurs de travailler efficacement en équipe, de gérer les différentes versions du code, de collaborer sur un même projet et de maintenir un historique complet des modifications. Git facilite le développement collaboratif, tout en offrant performance, flexibilité et fiabilité.

- Git
  - Logiciel de **gestion de versions**
  - Open source, gratuit, très très très utilisé et pas qu'en informatique
  - créé par Linus Torvalds, créateur également du noyau Linux
- Git Bash
  - Terminal pour écrire des commandes `git`
  - Possible d'ouvrir via le menu Démarrer, mais aussi inclus dans Visual Studio Code
- GitHub / GitLab
  - plateforme de développement collaboratif basée sur Git
  - héberge des dépôts Git
  - Propose d'autres fonctionnalités (CICD, wiki, gestion des incidents...)


## Git, ça sert à quoi ?

- Git permet de suivre les modifications apportées aux fichiers et de gérer efficacement les différentes versions
- Git enregistre un historique complet de toutes les modifications, ce qui permet de retracer l'évolution du projet, d'identifier les changements spécifiques et de revenir à des versions antérieures si nécessaire
- Git facilite la collaboration entre les membres d'une équipe en permettant à plusieurs personnes de travailler simultanément sur le même projet



Git va aider à synchroniser ces dépôts avec les commandes suivantes :

- `git clone` : créer une copie du dépôt commun sur son poste
- `git status` : voir où l'on en est
- `git add` : ajouter de nouveaux fichiers dans le dépôt
- `git commit` : créer un point de sauvegarde
- `git pull` : récupérer les éventuelles modifications du dépôt distant pour mettre à jour son dépôt local
- `git push` : partager ses mises à jour locale sur le dépôt distant


## Les principales commandes




### git clone

`git clone` est une commande de Git utilisée pour [créer une copie locale complète d'un dépôt distant]{.underline}. 
Elle télécharge tous les fichiers et l'historique de version du dépôt distant vers votre système local dans un nouveau répertoire.

Exemples :

- `git clone https://github.com:<propietaire_depot>/<nom_du_depot>.git`
- `git clone git@github.com:ludo2ne/Git-tuto.git`
- `git clone https://github.com/ludo2ne/Git-tuto.git`

Il y a deux principaux protocoles pour cloner un dépot git : *ssh* et *https*. Sans rentrer dans les détails, l'utilisation suivante est préconisée :

- ssh : si vous souhaitez modifier le code et le partager (nécéssite d'avoir paramétré une clé ssh)
- https : si vous voulez simplement avoir une copie locale du code sans partager vos modifications


### git status

`git status` affiche l'état actuel du répertoire de travail et de l'index. Elle montre : 

- les fichiers modifiés prêt à rentrer dans le prochain commit (*Changes to be committed)
- les autres fichiers modifiés (*Changes not staged for commit*)
- les fichiers non suivis (*Untracked files*)

Cette commande est à utiliser sans modération pour voir l'état du dépôt !


### git add

`git add` est utilisée pour ajouter des fichiers à l'index, c'est à dire des fichiers que vous souhaitez versionner.

Autrement dit, si vous faites `git add soleil.txt`, vous dites à git qu'il faut ajouter ce fichier au dépôt et le versionner.

`git add .` permet d'ajouter [tous]{.underline} les fichiers non suivis à l'index


:::{.callout-tip title="Le fichier .gitignore"}
`.gitignore` est un fichier présent à la racine du dépôt permettant de dire à Git quels fichiers il doit ignorer. Par exemple : 

- si .gitignore contient `*.csv` :arrow_right: tous les fichiers *csv* seront ignorés par Git
- si .gitignore contient `data/` :arrow_right: le dossier *data* et son contenu sera ignoré

Cela est utile, pour exclure par exemple du dépôt Git :

- des fichiers contenant des mots de passe, des jetons d'accès...
- des fichiers de données volumineux qui n'ont pas vocation à être versionnés
- des fichiers de log 

:::

### git commit

`git commit -m "mon_message"` est utilisée pour créer un [point de sauvegarde]{.underline}.  
Il est conseillé d'écrire un message court, clair et compréhensible.


### git pull

`git pull` récupère les dernières modifications du dépôt distant et met à jour votre dépôt local.

:::{.callout-note title="Les conflits"}
Que se passe-t-il si : 

- Alice a modifié un fichier et poussé sa modification sur le dépôt distant
- Vous avez également modifié le même fichier et vous faites un `git pull` pour mettre à jour votre dépôt à partir du dépôt distant

:fearful: Un conflit ! Git ne sait pas choisir quelle est la bonne version entre la votre et celle d'Alice.  
:sweat_smile: Pas de panique ! Pour résoudre le conflit, il faut simplement :

- modifier le fichier en question pour garder la bonne version
- `git add` puis `git commit` pour valider la résolution du conflit
:::


### git push

`git push` envoie les modifications locales vers le dépôt distant.  

::: {.callout-important}
Pour pouvoir pousser, il est nécessaire :

- d'avoir au préalable créé au minimum un *commit*
- que votre dépôt soit à jour (pas de retard de version par rapport au dépôt distant)
:::

## Exemples

### Exemple 1

- Si sur le dépôt distant, le fichier *soleil.txt* a été créé par une autre personne
- La commande `git pull` permet de mettre à jour son dépôt local
- Le fichier `soleil.txt` apparait sur votre dépôt local

### Exemple 2

- En local, vous avez créé le fichier `temple.py` et modifié le fichier `soleil.txt`
- Faites `git add .` pour dire à Git que vous souhaitez valider vos modifications
- Créez un point de sauvegarde avec la commande `git commit -m "message de mise à jour"`
- Puis, la commande `git push` permet de partager cette nouvelle version sur le dépôt distant
- Sur le dépôt distant, les 2 fichiers seront créés ou mis à jour

Pour gérer les versions, Git utilise des points de sauvegarde appelés `commits`. Grace à cela, il est possible de consulter les versions antérieures des fichiers.


## Les erreurs courantes

### fichier disparu

Si vous venez de faire un `git push` et que votre fichier n'apparait pas sur le dépôt distant, c'est probablement parce que vous avez oublié de l'ajouter à l'index avec `git add <mon_fichier>`.

Autre possibilité : votre fichier est ignoré par git car il fait parti du `.gitignore`

### git push rejected

```
! [rejected]        main -> main (fetch first)
error: failed to push some refs
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

Le message d'erreur est assez explicite. Le dépôt distant a été modifié et votre dépôt local n'est donc plus à jour.

Vous devez commencer par mettre à jour votre dépôt local avec `git pull` avant de pousser votre code



## Bibliographie {.unnumbered}

- [Git : un élément essentiel au quotidien](https://pythonds.linogaliana.fr/content/git/introgit.html){.external target="_blank"}, Python pour la datascience, Lino Galiana
- [Formation Git du Lab INSEE](https://github.com/InseeFrLab/formation-git){.external target="_blank"}
- [Bonnes pratiques Git](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/){.external target="_blank"}
- [GitFlow](https://www.atlassian.com/fr/git/tutorials/comparing-workflows/gitflow-workflow){.external target="_blank"}
- [Développement basé sur le tronc](https://www.atlassian.com/fr/continuous-delivery/continuous-integration/trunk-based-development){.external target="_blank"}